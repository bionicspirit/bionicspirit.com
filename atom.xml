<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <id>http://alexn.org/</id>
 <title type="text">alexn.org</title>
 <subtitle type="text">Blog about programming and personal projects, by Alexandru Nedelcu</subtitle>
 <link href="https://alexn.org/atom.xml" rel="self"/>
 <link href="https://alexn.org/" />
 <updated>2018-05-06T16:09:48+00:00</updated>

 <author>
   <name>Alexandru Nedelcu</name>
   <uri>https://alexn.org/</uri>
 </author>

 <entry>
   <id>http://alexn.org/blog/2018/05/06/bifunctor-io.html</id>
   <title>On Bifunctor IO and Java's Checked Exceptions</title>
   <link href="https://alexn.org/blog/2018/05/06/bifunctor-io.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2018-05-05T21:00:00+00:00</published>
   <updated>2018-05-05T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Programming]]></category>
   <category><![CDATA[IO]]></category>
   <category><![CDATA[Haskell]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Scalaz]]></category>
   <category><![CDATA[Cats-Effect]]></category>
   <category><![CDATA[FP]]></category>

   <content type="html"><![CDATA[
   <p>The Bifunctor <code class="highlighter-rouge">IO</code> data type is a hot topic in the Scala community. In
this article however I'm expressing my dislike for it because it
shares the same problems as Java's Checked Exceptions.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2018/05/06/bifunctor-io.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2018/02/12/in-defense-oofp.html</id>
   <title>In Defense of OOFP</title>
   <link href="https://alexn.org/blog/2018/02/12/in-defense-oofp.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2018-02-11T22:00:00+00:00</published>
   <updated>2018-02-11T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Programming]]></category>
   <category><![CDATA[Collections]]></category>
   <category><![CDATA[Haskell]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[OOP]]></category>
   <category><![CDATA[FP]]></category>

   <content type="html"><![CDATA[
   <p>This article is about OOP hierarchies, in comparisson with
<a href="https://en.wikipedia.org/wiki/Type_class">type classes</a>, using as
example Scala's standard collections, which are involved in a recent
debate around their redesign.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2018/02/12/in-defense-oofp.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/11/10/minitest-no-crap-scala-library.html</id>
   <title>Minitest: Zero Crap Scala Testing Library</title>
   <link href="https://alexn.org/blog/2017/11/10/minitest-no-crap-scala-library.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-11-09T22:00:00+00:00</published>
   <updated>2017-11-09T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Code]]></category>
   <category><![CDATA[Testing]]></category>
   <category><![CDATA[Scala]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2017/scala-icon.png" class="right" width="200" alt="Scala icon" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p><a href="https://github.com/monix/minitest">Minitest</a> is my minimal testing library 
that I've been using for developing <a href="https://monix.io">Monix</a>.</p>

<h2 id="raison-dêtre" style="font-size: 150%; font-weight: bold;"><b>Raison d'être<b></b></b></h2>

<p>I dislike most testing frameworks, because of bloat and of heavy DSLs
trying to mimic the English language. When I created Minitest, I
wasn't satisfied with any of the available alternatives.</p>

<p>Then I found that <a href="http://www.scala-sbt.org/">SBT</a> can do all the
heavy lifting (e.g. running the tests, reporting, etc), exposing a
nice <a href="https://github.com/sbt/test-interface">sbt/test-interface</a> that
you can integrate with. All you need to do is to build your own
API on top. And so I did.</p>

<p class="extra-info">
<strong>NOTE:</strong> My opinions in this article disagree with the design 
choices of popular testing libraries. I know that libraries like
<a href="http://www.scalatest.org/">ScalaTest</a> or 
<a href="https://etorreborre.github.io/specs2/">Specs2</a> are the way they
are because people want them that way. And those are awesome
projects, having awesome authors. They are just not for me.
</p>

<h3 id="portability" style="font-size: 120%; font-weight: bold;"><b>Portability<b></b></b></h3>

<p>The natural tendency of testing frameworks is to grow beyond all
imagination in order to accommodate the various testing styles that
people want, these testing frameworks also end up hard to port to new
platforms - which is especially relevant in Scala due to new major
versions and new targets released all the time
(e.g. <a href="http://www.scala-js.org/">Scala.js</a>, <a href="https://github.com/scala-native/scala-native">Scala
Native</a>,
<a href="https://github.com/lampepfl/dotty">Dotty</a>).</p>

<p>In 2014 I started to work on <a href="https://monix.io">Monix</a> and during that
time <a href="http://www.scala-js.org/">Scala.js</a> was also born.</p>

<p>This awesome Scala compiler that targets JavaScript was really fresh
back then and I wanted to target it, however none of the testing
libraries (e.g. <a href="http://www.scalatest.org/">ScalaTest</a>) were
supporting it yet, except for
<a href="https://github.com/lihaoyi/utest">µTest</a>. µTest seemed fine, but it
had problems when displaying error messages, plus its DSL was and
still is weird.</p>

<p>For some reason I don't like magic in my tests — and by magic I mean
expressions or statements that I don't immediately understand. That,
and I wanted an easy transition in Monix from ScalaTest's
<a href="http://www.scalatest.org/getting_started_with_fun_suite">FunSuite</a>,
which is what I was using.</p>

<h3 id="say-no-to-dsls" style="font-size: 120%; font-weight: bold;"><b>Say No to DSLs<b></b></b></h3>

<p>I do not want to write <code class="highlighter-rouge">x shouldBe greaterThan(y)</code> or other such
nonsense. I do not have the memory for that, I always forget the API
and the IDE doesn't help much due to the implicit conversions going on.</p>

<p>Unit tests might be business driven, but so is software in
general, nothing makes tests a special snowflake to warrant the abuse
of the programming language to make it look like English.</p>

<p>Yes, there are advantages to such a DSL. For example if you express
the above with a simple <code class="highlighter-rouge">assert</code>, then you won't get a meaningful
error message back, depending on whether the implementation does or
doesn't do macros for <code class="highlighter-rouge">assert</code>, but if it does, then that's a whole
other can of worms:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">assert</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">)</span>
</code></pre></div>
<p><strong>Fact:</strong> most assertions that you need to do in testing are <em>equality
tests</em> and for that rare moment in which you need inequality tests, you
can simply add a custom error message:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">assert</span><span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">,</span> <span class="n">s</span><span class="s">"$x &gt; $y"</span><span class="o">)</span>
</code></pre></div>
<p>Yes, it's repetitive, but I don't care, because this is such a rare
event that I don't want to optimize it with a special DSL or even with
macros.</p>

<p>Another thing that I absolutely hate are tests marked with English
words like "<code class="highlighter-rouge">it</code>", forcing you to phrase the test's description in a
certain way. I frequently end up with "sentences" that makes no sense:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">it</span><span class="o">(</span><span class="s">"left identity"</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ...
</span><span class="o">}</span>
</code></pre></div>
<p>This tendency actually stems from Java OOP, with its "kingdom of
nouns", the idea being that the things you're testing are all nouns
that interact with the world, aka objects. Well, I'm not testing just
objects, so <code class="highlighter-rouge">it</code> is a bad trend.</p>

<p>And the idea that business folks might be writing tests, hell no, that
almost never happens and if they are inclined to do that (like once in
a million), then they can just learn programming. It's not like an
English-like DSL is any closer to natural language.</p>

<h3 id="minimal-implementation-less-is-more" style="font-size: 120%; font-weight: bold;"><b>Minimal Implementation, Less is More<b></b></b></h3>

<p>Because the implementation is minimal, there's nothing that I can't
fix in it, there's nothing that I can't implement should I need
anything.</p>

<p>It's also easy to port to new targets. I intend to port it to 
<a href="https://github.com/scala-native/scala-native">Scala Native</a> as soon as it
is available for Scala 2.12 (at the moment of writing, it isn't).</p>

<p>In fact, if you want to build your own testing framework, Minitest can
serve as a sample ;-)</p>

<h2 id="hypothesis" style="font-size: 150%; font-weight: bold;"><b>Hypothesis<b></b></b></h2>

<p>All you need is the ability to express:</p>

<ol>
  <li>synchronous tests, returning <code class="highlighter-rouge">Unit</code> (or an equivalent, as I ended
up doing in order to avoid Scala's annoying implicit conversion)</li>
  <li>asynchronous tests, returning <code class="highlighter-rouge">Future</code>
</li>
  <li>the ability to setup an environment before every test, then
tear it down after each test</li>
</ol>

<p>All the asserts that you need:</p>

<ol>
  <li>
<code class="highlighter-rouge">assert(boolean, string?)</code>: general purpose assertion for any
condition</li>
  <li>
<code class="highlighter-rouge">assertEquals(received, expected)</code>: for equality testing with a
nice error message</li>
  <li>
<code class="highlighter-rouge">intercept</code>: for testing that exceptions are thrown</li>
  <li>
<code class="highlighter-rouge">fail(reason?)</code>: fails the current test</li>
  <li>
<code class="highlighter-rouge">ignore(reason?)</code>: ignores the current test</li>
  <li>
<code class="highlighter-rouge">cancel(reason?)</code>: cancels the current test</li>
</ol>

<p>What you don't need:</p>

<ol>
  <li>nesting in tests</li>
  <li>an English-like DSL</li>
  <li>a purely functional <em>base</em> API</li>
</ol>

<h2 id="tutorial" style="font-size: 150%; font-weight: bold;"><b>Tutorial<b></b></b></h2>

<p>Test suites MUST BE objects, not classes. To create a simple test
suite, it could inherit from <code class="highlighter-rouge">SimpleTestSuite</code>. Here's a simple test:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">minitest.SimpleTestSuite</span>

<span class="k">object</span> <span class="nc">MySimpleSuite</span> <span class="k">extends</span> <span class="nc">SimpleTestSuite</span> <span class="o">{</span>
  <span class="n">test</span><span class="o">(</span><span class="s">"should be"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="n">test</span><span class="o">(</span><span class="s">"should not be"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assert</span><span class="o">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="mi">3</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="n">test</span><span class="o">(</span><span class="s">"should throw"</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">class</span> <span class="nc">DummyException</span> <span class="k">extends</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="s">"DUMMY"</span><span class="o">)</span>
    <span class="k">def</span> <span class="n">test</span><span class="o">()</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">DummyException</span>

    <span class="n">intercept</span><span class="o">[</span><span class="kt">DummyException</span><span class="o">]</span> <span class="o">{</span>
      <span class="n">test</span><span class="o">()</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="n">test</span><span class="o">(</span><span class="s">"test result of"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">assertResult</span><span class="o">(</span><span class="s">"hello world"</span><span class="o">)</span> <span class="o">{</span>
      <span class="s">"hello"</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="s">"world"</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="n">test</span><span class="o">(</span><span class="s">"should be ignored"</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="nc">Platform</span><span class="o">.</span><span class="n">isJS</span><span class="o">)</span> <span class="n">ignore</span><span class="o">(</span><span class="s">"Blocking not supported on top of JS"</span><span class="o">)</span>
    <span class="k">val</span> <span class="n">r</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="nc">Future</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="nc">Duration</span><span class="o">.</span><span class="nc">Inf</span><span class="o">)</span>
    <span class="n">assertEquals</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>In case you want to setup an environment for each test and need
<code class="highlighter-rouge">setup</code> and <code class="highlighter-rouge">tearDown</code> semantics, you could inherit from
<a href="https://github.com/monix/minitest/blob/v2.0.0/shared/src/main/scala/minitest/TestSuite.scala">TestSuite</a>. 
Then on each <code class="highlighter-rouge">test</code> definition, you'll receive a fresh value:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">monix.execution.schedulers.TestScheduler</span>
<span class="k">import</span> <span class="nn">minitest.TestSuite</span>

<span class="k">object</span> <span class="nc">MyTestSuite</span> <span class="k">extends</span> <span class="nc">TestSuite</span><span class="o">[</span><span class="kt">TestScheduler</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">setup</span><span class="o">()</span> <span class="k">=</span> <span class="nc">TestScheduler</span><span class="o">()</span>

  <span class="k">def</span> <span class="n">tearDown</span><span class="o">(</span><span class="n">env</span><span class="k">:</span> <span class="kt">TestScheduler</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
    <span class="n">assert</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">tasks</span><span class="o">.</span><span class="n">isEmpty</span><span class="o">,</span> <span class="s">"Scheduler should not have tasks left"</span><span class="o">)</span>

  <span class="n">test</span><span class="o">(</span><span class="s">"simulated async"</span><span class="o">)</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">ec</span> <span class="k">=&gt;</span>
    <span class="k">val</span> <span class="n">f</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
    <span class="n">ec</span><span class="o">.</span><span class="n">tick</span><span class="o">()</span>
	
    <span class="n">assertEquals</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">value</span><span class="o">,</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Success</span><span class="o">(</span><span class="mi">2</span><span class="o">)))</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Minitest supports asynchronous results in tests, just use <code class="highlighter-rouge">testAsync</code>
and return a <code class="highlighter-rouge">Future[Unit]</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

<span class="k">object</span> <span class="nc">MySimpleSuite</span> <span class="k">extends</span> <span class="nc">SimpleTestSuite</span> <span class="o">{</span>
  <span class="n">testAsync</span><span class="o">(</span><span class="s">"asynchronous execution"</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">future</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
    
    <span class="k">for</span> <span class="o">(</span><span class="n">result</span> <span class="k">&lt;-</span> <span class="n">future</span><span class="o">)</span> <span class="k">yield</span> <span class="o">{</span>
      <span class="n">assertEquals</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="mi">101</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Minitest has integration with
<a href="https://www.scalacheck.org/">ScalaCheck</a>. 
So for property-based testing:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">minitest.laws.Checkers</span>

<span class="k">object</span> <span class="nc">MyLawsTest</span> <span class="k">extends</span> <span class="nc">SimpleTestSuite</span> <span class="k">with</span> <span class="nc">Checkers</span> <span class="o">{</span>
  <span class="n">test</span><span class="o">(</span><span class="s">"addition of integers is commutative"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">check2</span><span class="o">((</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">==</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span>
  <span class="o">}</span>
  
  <span class="n">test</span><span class="o">(</span><span class="s">"addition of integers is transitive"</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">check3</span><span class="o">((</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">z</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">)</span> <span class="o">+</span> <span class="n">z</span> <span class="o">==</span> <span class="n">x</span> <span class="o">+</span> <span class="o">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">z</span><span class="o">))</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>That's everything!</p>

<h2 id="common-complaints" style="font-size: 150%; font-weight: bold;"><b>Common Complaints<b></b></b></h2>

<h3 id="i-do-not-like-future" style="font-size: 120%; font-weight: bold;"><b>I do not like Future<b></b></b></h3>

<p>That's too bad, because the <code class="highlighter-rouge">Future</code> is needed by the runtime and
regardless what alternative you use (e.g. <code class="highlighter-rouge">cats.effect.IO</code>,
<code class="highlighter-rouge">monix.eval.Task</code>), you'll have to convert it into a <code class="highlighter-rouge">Future</code> anyway.</p>

<p>Besides, a good testing framework cannot have dependencies, because it
would end in conflict with the project's dependencies. It's unwise to
depend on Cats or Scalaz.</p>

<p>And you can always build your own <code class="highlighter-rouge">testTask</code>, <code class="highlighter-rouge">testEffect</code> or <code class="highlighter-rouge">testIO</code>
utilities on top of <code class="highlighter-rouge">testAsync</code>.</p>

<h3 id="i-want-a-purely-functional-api" style="font-size: 120%; font-weight: bold;"><b>I want a purely functional API<b></b></b></h3>

<p><a href="https://etorreborre.github.io/specs2/">Specs2</a> has a nice functional
API. You might like that, however I don't like it for all the reasons
stated above.</p>

<p>And if pure FP is what you want, nothing stops you from implementing
your own utilities and I recommend piggybacking on ScalaCheck, e.g:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">cats.effect.IO</span>
<span class="k">import</span> <span class="nn">org.scalacheck.</span><span class="o">{</span><span class="nc">Prop</span><span class="o">,</span> <span class="nc">Test</span><span class="o">}</span>
<span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

<span class="k">trait</span> <span class="nc">PureTestSuite</span> <span class="k">extends</span> <span class="n">minitest</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="nc">AbstractTestSuite</span> <span class="o">{</span>
  <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="n">ts</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SimpleTestSuite</span> <span class="o">{}</span>
  <span class="k">lazy</span> <span class="k">val</span> <span class="n">properties</span> <span class="k">=</span> <span class="n">ts</span><span class="o">.</span><span class="n">properties</span>
  
  <span class="k">def</span> <span class="n">test</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Prop</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> 
    <span class="n">ts</span><span class="o">.</span><span class="n">test</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Test</span><span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">result</span><span class="o">.</span><span class="n">passed</span><span class="o">)</span> <span class="n">fail</span><span class="o">(</span><span class="nc">Pretty</span><span class="o">.</span><span class="n">pretty</span><span class="o">(</span><span class="n">result</span><span class="o">))</span>
    <span class="o">}</span>

  <span class="k">def</span> <span class="n">testIO</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">IO</span><span class="o">[</span><span class="kt">Prop</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> 
    <span class="n">ts</span><span class="o">.</span><span class="n">testAsync</span><span class="o">(</span><span class="n">name</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">f</span><span class="o">.</span><span class="n">unsafeToFuture</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span>
        <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Test</span><span class="o">.</span><span class="n">check</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">result</span><span class="o">.</span><span class="n">passed</span><span class="o">)</span> <span class="n">fail</span><span class="o">(</span><span class="nc">Pretty</span><span class="o">.</span><span class="n">pretty</span><span class="o">(</span><span class="n">result</span><span class="o">))</span>
      <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>There's your purely functional API in just a couple of lines of code.</p>

<p>I don't want that in Monix though - the integration that we have with
ScalaCheck is minimal and enough.</p>

<h3 id="it-does-not-support-maven-cbt-or-others" style="font-size: 120%; font-weight: bold;"><b>It does not support Maven, CBT or others<b></b></b></h3>

<p>Sorry about that, but this library is meant to be minimal and stable,
and I don't have the time to expand support beyond SBT right now.</p>

<p>Pull requests open and only accepted if they don't complicate the
codebase much.</p>

<h2 id="final-words" style="font-size: 150%; font-weight: bold;"><b>Final Words<b></b></b></h2>

<p>Forget DSLs.</p>

<p>All you need for testing are
<a href="https://github.com/monix/minitest/">Minitest</a> and
<a href="https://www.scalacheck.org/">ScalaCheck</a>.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/11/10/minitest-no-crap-scala-library.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/10/15/functional-programming.html</id>
   <title>What is Functional Programming?</title>
   <link href="https://alexn.org/blog/2017/10/15/functional-programming.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-10-14T21:00:00+00:00</published>
   <updated>2017-10-14T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Programming]]></category>
   <category><![CDATA[Haskell]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[JavaScript]]></category>
   <category><![CDATA[FP]]></category>

   <content type="html"><![CDATA[
   <p>Functional Programming (FP) is programming with <em>functions</em>.<br>
<a href="https://goo.gl/q8dToC">Mathematical functions</a>.</p>

<p>There's no other definition that's correct, unless it's equivalent
to this one. There's no other definition that matters.</p>

<p><img src="/assets/img/2017/haskell.png" class="right" width="250" alt="Haskell's logo, referencing Lambda Calculus and the monadic bind" title="Haskell's logo, referencing Lambda Calculus and the monadic bind" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 250px; " align="right"></p>

<h2 id="background" style="font-size: 150%; font-weight: bold;"><b>Background<b></b></b></h2>

<p>I first read the rigorous definition of a mathematical function
in my first year of high-school, the 9-th grade. A <em>function</em>
represents a unique association between elements of a domain
(the input set) to the elements of a codomain (the output
set). This means that applying the function to some input, you always
get the same output.</p>

<p>My 9-th grade self actually read this in a high-school math manual:</p>

<div class="highlight"><pre class="highlight plaintext"><code>Given f: A → B, ∀ x,y ∈ A
If f(x) ≠ f(y) then x ≠ y
</code></pre></div>
<p>And in my young mind this condition seemed obvious and redundant, but
that's what you get with mathematical rigorosity, which in our
profession is sorely needed.</p>

<p class="extra-info">
Given that I'm from Romania, being exposed to an education centered
on rote learning, influenced by the French and the Russian / Soviet
educational systems, I'm now pretty sure that I have an atypical background,
compared to my U.S. peers. <br><br> For example we learned some
<a href="https://twitter.com/alexelcu/status/888343945649979392">category theory in our 12-th grade</a>,
of which I'm grateful, being really intriguing to me how
6-figures Ivy League graduates can complain about having to learn
the math material of normal teenagers.
</p>

<p>If you want to get even more technical, functional programming has
at its foundation the
<a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda Calculus</a>, a
system for expressing computations that is equivalent to Turing
machines, a universal model of computation built on function
abstraction and application.</p>

<p class="extra-info">
Some languages like Haskell are actually compiled / reduced to
an intermediate language that's very close to Lambda Calculus,
which is cool to have as a theoretical foundation, because then you
can prove things about your language and have the ability to add new
features safely, e.g. without risking type unsoundness. As an aside, Scala 
doesn't have that luxury because it's also an OOP language, so they are 
developing <a href="http://lampwww.epfl.ch/%7Eamin/dot/soundness_oopsla16.pdf">DOT calculus</a>
as an alternative. Interesting stuff.
</p>

<h2 id="why-functional-programming" style="font-size: 150%; font-weight: bold;"><b>Why Functional Programming?<b></b></b></h2>

<p>Many people are enamored with Functional Programming because it
gives us:</p>

<ol>
  <li><a href="https://en.wikipedia.org/wiki/Referential_transparency">Referential Transparency</a></li>
  <li><a href="https://wiki.haskell.org/Equational_reasoning_examples">Equational Reasoning</a></li>
</ol>

<p>Software has
<a href="http://www.cs.nott.ac.uk/~pszcah/G51ISS/Documents/NoSilverBullet.html">essential complexity</a>
in it and it doesn't help that our tools also contribute a decent
amount of accidental complexity. If for example you think about
<a href="https://en.wikipedia.org/wiki/Asynchrony_(computer_programming)">asynchrony</a> and
<a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)">concurrency</a>,
which often lead to
<a href="https://en.wikipedia.org/wiki/Nondeterministic_algorithm">non-determinism</a>,
the challenges involved have had tremendous cost for this industry.</p>

<p>Functional Programming keeps complexity at a manageable level because
FP components can be divorced from their surrounding context and
analysed independently. FP components can also be freely composed,
an insanely useful property in an industry where software projects
are seemingly built like houses of cards.</p>

<p>Memory locks for example don't compose. Two functions yielding
asynchronous results might or might not compose, depending on what
shared mutable state they access, or what condition they are waiting
on for completion.</p>

<p>There are a few alternatives to FP, like Rust's draconic borrow
checker, which essentially bans uncontrolled sharing. There are
advantages and disadvantages to both approaches, however if you ever
found it weird or frustrating to deal with pure functions, then
fighting Rust's borrow checker should be even more weird or
frustrating (mind you, I think Rust is awesome, but that's beside the
point).</p>

<p>If you no longer require purity, if you change the definition of what
kind of "<em>functions</em>" we can accept, then we are no longer talking of
Functional Programming, but about …</p>

<h2 id="procedural-programming" style="font-size: 150%; font-weight: bold;"><b>Procedural Programming<b></b></b></h2>

<p>We wouldn't need the "<em>pure</em>" qualification if we, as programmers,
wouldn't overload terms.</p>

<p>Back in the day of assembly language and Turbo Pascal, we had perfectly
good terms for impure functions, such as:
<a href="https://en.wikipedia.org/wiki/Subroutine">procedure, routine, subroutine</a>,
these being blocks of code on which you jumped with the code pointer,
executed some side-effects, pushed some results on the stack, then
jumped back to where you were, with the contract being that such
subroutines had a single entry point and a single exit point.</p>

<p>We have had a perfectly good term for describing programming made of
procedures / subroutines: <a href="https://en.wikipedia.org/wiki/Procedural_programming">Procedural Programming</a> 😉</p>

<h3 id="impure-is-uninteresting" style="font-size: 120%; font-weight: bold;"><b>Impure is Uninteresting<b></b></b></h3>

<p>Lately the trend is to classify code making use of "lambda expressions"
as functional programming and to classify programming languages that
have "first-class functions" as being functional programming languages.</p>

<p class="extra-info">
"Lambda expressions" are anonymous functions that can capture the
variables in the scope they've been defined (implemented using closures).
</p>

<p>Well, the problem is that:</p>

<ol>
  <li>The venerable <a href="https://goo.gl/wfmLG6">C language</a> has had the
ability to pass function pointers around since forever, I know
of no mainstream language that doesn't allow you to pass function
references, which makes functions "first class"</li>
  <li>You don't actually need anonymous functions for doing functional
programming — take a look at this
<a href="http://www.functionaljava.org/">Functional.Java</a> library, which was
built before those "lambda expressions" came to Java 8</li>
  <li>It's 2017 and most languages in use have usable lambda expressions, except
for Python which has inherent limitations due to it being statement
oriented and the developers refusing to introduce multi-line
anonymous functions, which has led to a dozen or so non-orthogonal
features to replace the need for it, under the mantra
"<em>only one way of doing things</em>", which by now is surely some
kind of joke</li>
</ol>

<p>If you reduce your "<em>functional programming</em>" qualifier
to usage of first class (impure) functions and lambda expressions,
I think the top 15 languages and their use on GitHub qualifies.</p>

<p>Which is ridiculous — like how society keeps changing the obesity
threshold, because it takes less energy and is less depressing to
change definitions, instead of attacking the problem head on.
We should recognize a <em>rebranding</em> for what it is, an effort by
marketing people to make turds more attractive by embracing trends
only in name, but not in spirit.</p>

<h2 id="anti-intellectualism-phenomenon" style="font-size: 150%; font-weight: bold;"><b>Anti-intellectualism Phenomenon<b></b></b></h2>

<p>For all the learning that we are doing, we software developers are
a really conservative bunch, unwilling to accept new concepts easily
and in this context "<em>new</em>" is relative to what we've
learned either in university or at our first job. The vigour with which
we defend what we already know is proportional with the 
time we've invested in our knowledge and whatever it is that we
are currently doing.</p>

<p>Many people advise against mentioning "<em>Monad</em>", because it will
strike fear in the hearts of the unfaithful, the advice being apparently
to either sidestep the issue, to rename it into something that can
be supposedly easier to understand, or to compare it with burritos.</p>

<p>Such efforts are like renaming "<em>Water</em>" into "<em>Drinkable</em>" —
which obviously makes no sense in certain contexts and deprives
people of the correct jargon for seeking help. Although I'll grant
that "<em>Monad</em>" is pretty awful if you'll look at its etymology,
but it doesn't matter, because it has evolved into a proper noun and has
been used by book authors and researchers.</p>

<p>Anyway, want to discredit an idea, opinion, fact, or tool?
Classify it as "<em>academic</em>", a term that now has negative connotations,
even though most interesting breakthroughs in computer science come
from academia.</p>

<p>Which is probably why we keep reinventing the same two languages,
somehow expecting different results and personally I'm getting
the feeling that we are in Groundhog Day, that movie from 1993.</p>

<h2 id="can-we-do-fp-in-any-language" style="font-size: 150%; font-weight: bold;"><b>Can We do FP in Any Language?<b></b></b></h2>

<p>Yes, although some programming languages are better than others.</p>

<p>Doing FP in a programming language like Java feels like
doing OOP in C with <a href="https://en.wikipedia.org/wiki/GObject">GObject</a>.
Doable, but it makes one think of switching professions in the long run.</p>

<p>But actually it's not the programming language that's the biggest
problem, because
<a href="https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf">technical challenges</a>
can usually be worked around, but the culture around it created by the
community, along with the libraries available, because as a developer
you won't want to reinvent the wheel and swim against the tide.</p>

<p>This is why in addition to Haskell and OCaml, which are the languages
that people refer to when speaking of FP,
<a href="https://scala-lang.org/">Scala</a> also shines amongst them, because it
has managed to attract and retain talent to
work on <a href="https://typelevel.org/projects/">awesome libraries for FP</a>,
that don't have an equal outside of Haskell.</p>

<p>And for example, yes, you can do actual Functional Programming in
JavaScript and there have been libraries helping with that, including
really popular ones like
<a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>,
<a href="https://reactjs.org/">React</a>,
<a href="http://redux.js.org/">Redux</a>,
<a href="https://github.com/facebook/immutable-js/">Immutable.js</a>,
<a href="http://underscorejs.org/">Underscore.js</a> among others,
which were partially inspired by the community's experience with
<a href="https://clojurescript.org/">ClojureScript</a> and now
<a href="https://github.com/reasonml">ReasonML</a>,
<a href="http://www.purescript.org/">PureScript</a> and others.
There are also community efforts, such as my own
<a href="https://funfix.org">Funfix</a>, plus a growing ecosystem around
<a href="https://github.com/fantasyland/fantasy-land">Fantasy Land</a>, etc.</p>

<p>But bring up a problem like
<a href="https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html">JavaScript's Promise Leaks Memory</a>
in <code class="highlighter-rouge">then</code> chains and dozens of developers will jump on you to
re-educate you on how promises work and to make you understand that
the concerns you have are a niche, functional programming be damned.</p>

<p>Which does highlight that if you want functional programming,
the communities of languages being bred for FP, like Haskell,
PureScript, OCaml, Scala, etc are probably richer and bigger than
the FP sub-communities of the top mainstream languages, Java and
JavaScript included.</p>

<h2 id="learning-resources" style="font-size: 150%; font-weight: bold;"><b>Learning Resources<b></b></b></h2>

<p>Don't believe the opinions of people on the Internet, mine included.
Learn some Functional Programming instead, the real stuff, not the
pop lambda-infused mumbo jumbo, then you can make up your own mind.
At the very least it's fun and you've got nothing to lose.</p>

<p>Thus far I found these two books to be really good as an introduction
to FP:</p>

<ul>
  <li><a href="http://haskellbook.com/">Haskell Programming from First Principles</a></li>
  <li><a href="https://www.manning.com/books/functional-programming-in-scala">Functional Programming in Scala</a></li>
</ul>

<p>Learning Haskell first is not a bad idea, because Haskell is currently
the <em>lingua franca</em> of FP and most interesting research is happening in
Haskell or in Haskell-derived languages (e.g. Idris, PureScript, etc).
Even if you move on, you'll still refer to concepts you learned in
Haskell by name, you'll still be inspired by ideas from Haskell's
ecosystem, etc. But if you're into Scala already, then the "red book"
is pretty awesome.</p>

<p>After that, you might want to read
<a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">Category Theory for Programmers</a>
(<a href="https://github.com/hmemcpy/milewski-ctfp-pdf">PDF version</a>),
which should come only after you've went through one of the above books
from cover to cover.</p>

<p class="extra-info">
Note you don't need category theory for FP, but it's better if you
eventually learn the basics, since it's a formal language for talking
about <em>composition</em> and we want <em>composition</em> in our lives 😎 <br><br>
If you want motivation, remember that kids in Romania do it —
put that on your fridge 😜
</p>

<p>More good books might be out there, but for learning FP I'd advise
against going with anything that's dynamically typed or LISP based. For one
because dynamic languages tend to be more pragmatic, plus their limited
type system don't allow many of the useful abstractions that
we've discovered in the last decade, so you'd be depriving yourself
of many useful concepts and libraries. You should feel free to pick a
dynamic language once you have the knowledge to make an informed choice.</p>

<p>Also <a href="https://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a>
(see <a href="https://github.com/sarabander/sicp-pdf">modern PDF compilation</a>)
might have been good for its time and is still a good book,
but it's not that good for learning FP in 2017.</p>

<p>Now go forth and spread the true FP love 💘</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/10/15/functional-programming.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/10/13/scaladays-copenhagen.html</id>
   <title>Scala Days 2017 — Monix Task</title>
   <link href="https://alexn.org/blog/2017/10/13/scaladays-copenhagen.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-10-12T21:00:00+00:00</published>
   <updated>2017-10-12T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Monix]]></category>
   <category><![CDATA[Presentation]]></category>
   <category><![CDATA[Video]]></category>
   <category><![CDATA[Slides]]></category>

   <content type="html"><![CDATA[
   <p>Presentation from <a href="http://scaladays.org/">Scala Days</a>, held in 
<a href="http://event.scaladays.org/scaladays-chicago-2017">Chicago</a>
and <a href="http://event.scaladays.org/scaladays-cph-2017">Copenhagen</a>:</p>

<ul>
  <li><a href="/assets/pdfs/monix-task-scaladays.pdf">Slides (PDF file)</a></li>
  <li><a href="https://www.youtube.com/watch?v=wi97X8_JQUk">Video (YouTube)</a></li>
</ul>

<iframe width="100%" height="400" src="https://www.youtube.com/embed/wi97X8_JQUk" frameborder="0" allowfullscreen=""></iframe>

<h2 id="abstract" style="font-size: 150%; font-weight: bold;"><b>Abstract<b></b></b></h2>

<p><img src="/assets/img/2017/scaladays.jpg" class="right" width="200" alt="Scaladays" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p>Scala’s Future from the standard library is great, but sometimes we need more. A Future strives to be a value, one detached from time and for this reason its capabilities are restricted and for some use-cases its behavior ends up being unintuitive. Therefore, while the Future/Promise pattern is great for representing asynchronous results of processes that may or may not be started yet, it cannot be used as a specification for an asynchronous computation.</p>

<p>The Monix Task is in essence about dealing with asynchronous computations and non-determinism, being inspired by the Scalaz Task and designed from the ground up for performance and to be compatible with Scala.js/Javascript runtimes and with the Cats library. It also makes use of Scala’s Future to represent results, the two being complementary.</p>

<p>In this talk I’ll show you its design, when you should use it and why in dealing with asynchronicity it’s better to work with Task instead of blocking threads.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/10/13/scaladays-copenhagen.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html</id>
   <title>JavaScript's Promise Leaks Memory</title>
   <link href="https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-10-10T21:00:00+00:00</published>
   <updated>2017-10-10T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Code]]></category>
   <category><![CDATA[JavaScript]]></category>
   <category><![CDATA[Promise]]></category>
   <category><![CDATA[Funfix]]></category>
   <category><![CDATA[Functional]]></category>

   <content type="html"><![CDATA[
   <p>This piece of code will leak memory and eventually crash your Node.js
process or browser:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="c1">// Tested on Node.js 7.10, Firefox 57 and Chrome 61</span>
<span class="c1">//</span>
<span class="c1">// Usage of `setImmediate` is to prove that we have</span>
<span class="c1">// async boundaries, can be removed for browsers</span>
<span class="c1">// not supporting it.</span>

<span class="kd">function</span> <span class="nx">signal</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">cb</span> <span class="o">=&gt;</span> <span class="nx">setImmediate</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">cb</span><span class="p">(</span><span class="nx">i</span><span class="p">)))</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">signal</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">i</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="nx">loop</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</code></pre></div>
<p><a href="/assets/html/js-promise-leak.html" target="_blank"><b>→ Load Sample for Browser</b></a></p>

<p>It takes a while to fill GBs of heap, plus Node is less conservative, the GC eventually
freezing the process trying to recover memory, so give it a few seconds.</p>

<p>This is equivalent with this <code class="highlighter-rouge">async</code> function:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">i</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">signal</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>

  <span class="c1">// Recursive call</span>
  <span class="k">return</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<p>Of course, if this loop would be synchronous, not using <code class="highlighter-rouge">Promise</code> or <code class="highlighter-rouge">async</code> / <code class="highlighter-rouge">await</code>,
then the process would blow up with a stack overflow error because
at the moment of writing JavaScript does not do
<a href="https://en.wikipedia.org/wiki/Tail_call">tail calls optimizations</a>
(until everybody implements ECMAScript 6 fully at least).</p>

<p>But before you jump to conclusions, this has nothing to do with JavaScript's
lack of TCO support. This is because in our recursive function it's
not JavaScript's <a href="https://en.wikipedia.org/wiki/Call_stack">call stack</a>
that's managing that loop, but rather the <code class="highlighter-rouge">Promise</code> implementation.
That recursive call is asynchronous and so it does not abuse the call stack
by definition.</p>

<p>Unfortunately, just like a regular function using the call stack for those
recursive calls, the <code class="highlighter-rouge">Promise</code> implementation is abusing the heap memory,
not chaining <code class="highlighter-rouge">then</code> calls correctly. And that sample should not leak,
the <code class="highlighter-rouge">Promise</code> implementation should be able to do the equivalent of TCO
and in such a case eliminate frames in the <code class="highlighter-rouge">then</code> chain being created.</p>

<h2 id="the-spec-is-the-problem" style="font-size: 150%; font-weight: bold;"><b>The Spec is The Problem<b></b></b></h2>

<p><a href="https://promisesaplus.com/">
  <img src="/assets/img/2017/then.png" class="right" width="200" alt="Then" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right">
</a></p>

<p>We're talking of the <a href="https://promisesaplus.com/">Promise/A+ specification</a>.
Relevant links to known issues on GitHub, explaining why:</p>

<ol>
  <li>Node.js issue, now closed:
<strong><a href="https://github.com/nodejs/node/issues/6673">node/#6673</a></strong>
</li>
  <li>Promise/A+ spec issue, open since 2014:
<strong><a href="https://github.com/promises-aplus/promises-spec/issues/179">promises-spec/#179</a></strong>
</li>
</ol>

<p>As you'll see, there are some reasonable arguments for why the <code class="highlighter-rouge">Promise</code>
implementation is allowed to leak memory. But I can't agree.</p>

<h2 id="the-non-leaky-solution" style="font-size: 150%; font-weight: bold;"><b>The Non-leaky Solution<b></b></b></h2>

<p>The solution, if you insist on using JavaScript's <code class="highlighter-rouge">Promise</code>, is to work
with non-recursive functions:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">signal</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>But at this point any semblance of functional programming, if you ever had
any, goes out the window, see below.</p>

<h2 id="common-objections" style="font-size: 150%; font-weight: bold;"><b>Common Objections<b></b></b></h2>

<p>Gathering feedback from people, here are the common objections:</p>

<h3 id="1-this-is-normal" style="font-size: 120%; font-weight: bold;"><b>1. This is Normal<b></b></b></h3>

<p>No, if you judge this implementation, relative to other <code class="highlighter-rouge">Promise</code> / <code class="highlighter-rouge">Future</code>
implementations in the industry, which are setting expectations.</p>

<p>Here are the implementations that I know about that DO NOT leak memory:</p>

<ol>
  <li>
<a href="http://bluebirdjs.com/docs/getting-started.html">Bluebird</a>, probably
the most popular non-standard <code class="highlighter-rouge">Promise</code> implementation for JavaScript</li>
  <li>
<a href="https://www.scala-lang.org/">Scala</a>'s standard
<a href="http://www.scala-lang.org/api/2.12.3/scala/concurrent/Future.html">Future</a>,
in the wild since 2013; the fix for the leaky <code class="highlighter-rouge">flatMap</code>
chains was added by <a href="https://twitter.com/richdougherty">Rich Dougherty</a>
in <a href="https://github.com/scala/scala/pull/2674">this PR</a>, inspired
by Twitter's <code class="highlighter-rouge">Future</code> implementation</li>
  <li>Twitter's <a href="https://twitter.github.io/util/docs/com/twitter/util/Future.html">Future</a>,
which is used in all of Twitter's backend infrastructure, being integrated
in <a href="https://twitter.github.io/finagle/">Finagle</a>
</li>
  <li>
<a href="http://trane.io/">Trane.io</a>, a Java Future implementation providing a <code class="highlighter-rouge">TailRec</code>
builder meant precissely for this use-case</li>
  <li>My very own Funfix <a href="https://funfix.org/api/exec/classes/future.html">Future</a>
and Monix <a href="https://monix.io/api/3.0/monix/execution/CancelableFuture.html">CancelableFuture</a>
</li>
</ol>

<p>Interestingly, complaints for Scala's <code class="highlighter-rouge">Future</code> happened due to usage of
Play's <a href="https://www.playframework.com/documentation/2.6.x/Iteratees">Iteratees</a>,
with which people have been modeling stream processing.</p>

<h3 id="2-but-it-does-unlimited-chaining-of-promises" style="font-size: 120%; font-weight: bold;"><b>2. But It Does Unlimited Chaining of Promises<b></b></b></h3>

<p>Yes, that's why it's leaking memory.</p>

<p>No, the implementation should not chain promises like that and an
alternative implementation is possible and well known, as evidenced by
the implementations mentioned that don't leak.</p>

<p>The fault lies with the standard <code class="highlighter-rouge">Promise</code> implementation, not with
the shown sample, being a legitimate use-case.</p>

<h3 id="3-that-sample-does-not-use-the-return-value" style="font-size: 120%; font-weight: bold;"><b>3. That Sample Does Not Use the Return Value<b></b></b></h3>

<p>The sample is kept simple for didactic purposes, however:</p>

<ol>
  <li>you can easily imagine a loop that processes a very long stream of data,
aggregating information along the way, returning a result later</li>
  <li>the script does do error handling and without that inner
<code class="highlighter-rouge">return</code>, the <code class="highlighter-rouge">.catch(console.error)</code> would have no effect</li>
</ol>

<h3 id="4-thats-the-equivalent-of-a-stack-overflow" style="font-size: 120%; font-weight: bold;"><b>4. That's the Equivalent of a Stack Overflow<b></b></b></h3>

<p>Yes, I've mentioned this above, but just to set your mind at rest on this point,
proper Tail-Calls Optimizations are coming for normal call sites, being part of
ECMAScript, see:</p>

<ul>
  <li><a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls">ECMAScript specification</a></li>
  <li><a href="https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/">ECMAScript 6 Proper Tail Calls in WebKit</a></li>
</ul>

<p>You can't rely on it yet, but you can rest assured that in the future
if that sample would be synchronous, it would not trigger a stack overflow.</p>

<p>Therefore, given that asynchronous calls are by definition processes / events
happening independently of the current call stack / run loop, this behavior
is actually surprising, since one of the reasons to go async is to escape
the limitations of the call stack.</p>

<h3 id="5-you-dont-understand-how-promises-work" style="font-size: 120%; font-weight: bold;"><b>5. You Don't Understand How Promises Work<b></b></b></h3>

<p>I've been told that I don't understand promises. So I apologize for the
appeal to authority that I'm about to make.</p>

<p>Data types for dealing with <em>asynchrony</em> have been a hobby of mine since
2012 and I've been authoring several projects in which I implemented
Promise-like data types:</p>

<ul>
  <li>
<a href="https://monix.io/">Monix</a>, which implements <code class="highlighter-rouge">Task</code>, one of the best ports
of Haskell's <code class="highlighter-rouge">IO</code>, along with a complementary <code class="highlighter-rouge">CancelableFuture</code> and
what I think is the best back-pressured Rx <code class="highlighter-rouge">Observable</code> implementations
in existence</li>
  <li>
<a href="https://github.com/funfix/funfix">Funfix</a>, a JavaScript library for FP,
delivering a <code class="highlighter-rouge">Future</code> and an <code class="highlighter-rouge">IO</code> implementation, see below</li>
  <li>have contributed to <a href="https://github.com/typelevel/cats-effect">cats-effect</a>,
a more conservative <code class="highlighter-rouge">IO</code> port</li>
</ul>

<p class="extra-info">
Bonus — see my <a href="https://www.youtube.com/watch?v=wi97X8_JQUk">presentation from Scala Days</a>!
</p>

<p>My work, good or bad, has followed a certain pattern, which is why I do
understand promises, I do understand at least two solutions to this, hence
this article.</p>

<h3 id="6-no-use-cases-this-is-a-niche" style="font-size: 120%; font-weight: bold;"><b>6. No Use-cases, This is a Niche<b></b></b></h3>

<p>Is functional programming a niche?</p>

<p>You cannot describe any functional programming algorithm involving loops
without tail recursions. If folds are used, then folds are described with
tail recursions as well. That's because:</p>

<ol>
  <li>any loop can be described with a tail recursion</li>
  <li>you can't have immutability of the state you're evolving without it</li>
</ol>

<p>An example of a use-case is the processing of really long / infinite streams of
events, for which it's really natural to describe algorithms using tail recursions
and for which you can't really work with imperative, mutation-based loops.</p>

<p>Imagine reading chunks of data from a file and describing them with a data
structure like this:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="kr">interface</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span>

<span class="kd">class</span> <span class="nx">Next</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span> <span class="kr">implements</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span>
    <span class="kr">public</span> <span class="nx">readonly</span> <span class="na">head</span><span class="p">:</span> <span class="nx">A</span><span class="p">,</span>
    <span class="kr">public</span> <span class="nx">readonly</span> <span class="na">next</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">List</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;&gt;</span>
  <span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Halt</span> <span class="kr">implements</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="kr">public</span> <span class="nx">readonly</span> <span class="nx">error</span><span class="p">?:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div>
<p>Sample is using TypeScript (could be Flow) for making it clear what the types are.
You can work with plain JavaScript of course.</p>

<p>This structure is really cheap and effective, being a lazy, asynchronous,
referentially transparent stream. And in fact it's really similar to JavaScript
implementations of async iterators, so yes, you are going to work with
something like this in the future, even if you don't like it ;-)</p>

<p>And describing transformation functions like this one is really fun too:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="kd">function</span> <span class="nx">map</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">,</span> <span class="nx">B</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">list</span><span class="p">:</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">f</span><span class="p">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">A</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">B</span><span class="p">):</span> <span class="nx">List</span><span class="o">&lt;</span><span class="nx">B</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">list</span> <span class="k">instanceof</span> <span class="nx">Next</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">cons</span> <span class="o">=</span> <span class="nx">list</span> <span class="k">as</span> <span class="nx">Next</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">Next</span><span class="p">(</span><span class="nx">f</span><span class="p">(</span><span class="nx">cons</span><span class="p">.</span><span class="nx">head</span><span class="p">),</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">cons</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">xs</span> <span class="o">=&gt;</span> <span class="nx">map</span><span class="p">(</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">f</span><span class="p">)))</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nx">Halt</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">list</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Alas, with the <code class="highlighter-rouge">Promise</code> implementation leaking, this doesn't work ;-)</p>

<h2 id="funfix" style="font-size: 150%; font-weight: bold;"><b>Funfix<b></b></b></h2>

<p><a href="https://funfix.org">
  <img src="/assets/img/funfix-1024.png" class="right" width="200" alt="Funfix 1024" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right">
</a></p>

<p>I've been building a new project, <a href="https://funfix.org/">Funfix</a>,
a JavaScript library for functional programming (capital FP), supporting
<a href="https://www.typescriptlang.org/">TypeScript</a> and <a href="https://flow.org/">Flow</a>
types out of the box.</p>

<p>Funfix exposes <a href="https://funfix.org/api/exec/classes/future.html">Future&lt;A&gt;</a>, an
eager <code class="highlighter-rouge">Promise</code> alternative that's safe, cancellable and filled with goodies,
along with <a href="https://funfix.org/api/effect/classes/io.html">IO&lt;A&gt;</a>, a lazy, lawful,
cancellable data type for handling all kinds of side effects, inspired by Haskell,
the two being complementary.</p>

<p>This piece of code powered by <code class="highlighter-rouge">Future</code> does not leak:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Future</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"funfix"</span>

<span class="kd">function</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">Future</span><span class="p">.</span><span class="k">of</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">n</span><span class="p">).</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">i</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="nx">loop</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">recover</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</code></pre></div>
<p>And neither does this one, powered by <code class="highlighter-rouge">IO</code>:</p>

<div class="highlight"><pre class="highlight typescript"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">IO</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"funfix"</span>

<span class="kd">function</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">IO</span><span class="p">.</span><span class="k">of</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">n</span><span class="p">).</span><span class="nx">flatMap</span><span class="p">(</span><span class="nx">i</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">loop</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="nx">loop</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">run</span><span class="p">().</span><span class="nx">recover</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</code></pre></div>
<p>This <code class="highlighter-rouge">IO</code> is a port of <a href="https://monix.io/">Monix</a>'s
<a href="https://monix.io/docs/2x/eval/task.html">Task</a>, being a better
<code class="highlighter-rouge">IO</code> than Haskell's <code class="highlighter-rouge">IO</code> due to its cancellable nature ;-)</p>

<p>In <a href="https://github.com/funfix/funfix/pull/57">this PR</a> I've also
fixed the memory leak for <code class="highlighter-rouge">Future</code>, doing the same tricks that
Scala's <a href="http://www.scala-lang.org/api/2.12.3/scala/concurrent/Future.html">Future</a>
is doing. Now released in <a href="https://github.com/funfix/funfix/releases/tag/v6.2.0">v6.2.0</a>.</p>

<p>And note that this is harder to do for Funfix's <code class="highlighter-rouge">Future</code> due to also
having to deal with chains of <code class="highlighter-rouge">Cancelable</code> references, which can
also leak.</p>

<p class="extra-info">
<strong>Author's Rant —</strong> in response to this article I've been called a scumbag
for "<em>shameless self promotion</em>".<br><br>
I'm building stuff that I share with the world and I like talking about
it on my personal blog. I'm not going to apologize for it.
</p>

<h2 id="final-words" style="font-size: 150%; font-weight: bold;"><b>Final Words<b></b></b></h2>

<p>That the current JavaScript <code class="highlighter-rouge">Promise</code> implementation has this leak
is a big problem, because tail-recursive calls are the cornerstone
of functional programming.</p>

<p>Yes, it's true that <code class="highlighter-rouge">Promise</code> is not a useful monadic type for doing FP,
since it does not suspend side effects (which is why you should
use <a href="https://funfix.org/api/effect/classes/io.html">IO</a>), but that's
beside the point, plus for the FP purists out there, you can always
suspend it in a thunk, assuming that it doesn't leak in <code class="highlighter-rouge">then</code> chains.</p>

<p>This is also why I fear standardization by committee in general. Along with
the totally awkward <code class="highlighter-rouge">then</code> signature that can't be safely described with
TypeScript's or Flow's types, this is another example of how standard
solutions can be harmful, because by being pushed as a standard, it makes
it hard for alternatives to exist, since most people are just going to
use the standard implementation, especially in JavaScript's ecosystem
where people are afraid to take on dependencies.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/10/11/javascript-promise-leaks-memory.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/08/16/automatic-releases-sbt-travis.html</id>
   <title>Automatic Releases to Maven Central with Travis and SBT</title>
   <link href="https://alexn.org/blog/2017/08/16/automatic-releases-sbt-travis.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-08-15T21:00:00+00:00</published>
   <updated>2017-08-15T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Code]]></category>
   <category><![CDATA[Maven]]></category>
   <category><![CDATA[Open Source]]></category>
   <category><![CDATA[SBT]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Sonatype]]></category>
   <category><![CDATA[Travis]]></category>

   <content type="html"><![CDATA[
   <p>Builds and deployments of new versions and snapshots is a pain.</p>

<p>This article is an explanation to how I automated this process
for <a href="https://monix.io">monix.io</a>, an open source Scala library that's
making use of <a href="http://www.scala-sbt.org/">SBT</a> as the build tool
and <a href="https://travis-ci.org/">travis-ci.org</a> as the continuous
integration.</p>

<p><img src="/assets/img/2017/sbt.png" class="right" width="300" alt="Sbt" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 300px; " align="right"></p>

<p>What this setup does is to trigger a <code class="highlighter-rouge">publish</code> script that
automatically deploys packages on Maven Central:</p>

<ol>
  <li>whenever you tag a release by pushing a version tag in Git, like
<code class="highlighter-rouge">v1.10.0</code>
</li>
  <li>whenever you push into the <code class="highlighter-rouge">snapshot</code> branch, the result being
hashed versions, e.g. <code class="highlighter-rouge">1.10.0-36fa3d3</code>, where the hash appended
as a suffix is the Git commit hash; these hashed versions are like
snapshot releases, but better because people can rely on them to
remain in Maven Central and thus less volatile</li>
</ol>

<p>After you read this article, you can use the setup of these projects
for inspiration:</p>

<ul>
  <li><a href="https://github.com/monix/shade/">github.com/monix/shade</a></li>
  <li><a href="https://github.com/monix/monix/">github.com/monix/monix</a></li>
</ul>

<p><strong>WARNING:</strong> with this process you'll have to
trust <a href="https://travis-ci.org/">Travis-ci.org</a> with your PGP private
key for signing the published binaries. If that's an acceptable risk
or not, that's up to you. See below.</p>

<h2 id="generating-a-pgp-key-pair" style="font-size: 150%; font-weight: bold;"><b>Generating a PGP Key Pair<b></b></b></h2>

<p>For deployments to Sonatype / Maven Central the built packages need to
be signed. If you don't have an existing PGP key, one can be easily
generated.</p>

<p><strong>WARNING:</strong> do not give out your personal PGP private key that you
use to sign emails or for online transactions. Generate a special PGP
key pair just for your project.</p>

<p>I'm currently using a MacOS machine, so for managing PGP
keys I'm using the open source <a href="https://gpgtools.org/">GPG Suite</a>,
coming with a nice GUI interface.</p>

<p>As far as I know GPG comes installed by default on all major Linux
operating systems and for Windows checkout this
<a href="https://www.gnupg.org/download/index.en.html">download page on gnupg.org</a>.</p>

<p>With the GPG command line tools installed you can generate a PGP key pair
like this:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ gpg --gen-key
</code></pre></div>
<p>Steps:</p>

<ul>
  <li>accept the default <code class="highlighter-rouge">RSA</code> for the kind of key</li>
  <li>enter the desired key size, the bigger the better, so enter <code class="highlighter-rouge">4096</code>
</li>
  <li>for expiration, I preferred a key that doesn't expire, although this might not be wise</li>
  <li>for an email address, enter a valid one</li>
  <li>I recommend encrypting your private key with a generous passphrase
that you then store in 1Password / LastPass ;-)</li>
</ul>

<p>To get the ID of the newly generated key you can do:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ gpg --list-secret-keys --keyid-format LONG
</code></pre></div>
<p>To export this newly generated key, assuming that <code class="highlighter-rouge">2673B174C4071B0E</code>
is the key ID, you'll need both the public key and the private one,
but they can be dumped in the same file:</p>

<div class="highlight"><pre class="highlight plaintext"><code>gpg -a --export 2673B174C4071B0E &gt; my-key.asc
gpg -a --export-secret-keys 2673B174C4071B0E &gt;&gt; my-key.asc
</code></pre></div>
<p>I also keep these in 1Password btw.</p>

<p>To configure SBT to sign your packages with a key living in the
project's repository you'll need a PGP key ring. Such a key ring is
basically a database of multiple PGP keys. You need to have one to
keep in the repository of your project. Normally these keys are kept
in:</p>

<ul>
  <li>
<code class="highlighter-rouge">$HOME/.gnupg/pubring.gpg</code> for the public keys</li>
  <li>
<code class="highlighter-rouge">$HOME/.gnupg/secring.gpg</code> for the private keys</li>
</ul>

<p>In the <code class="highlighter-rouge">$PROJECT</code> root we need a custom key ring containing just the
key we need, like this:</p>

<ul>
  <li>
<code class="highlighter-rouge">$PROJECT/project/.gnupg/pubring.gpg</code> for the public keys</li>
  <li>
<code class="highlighter-rouge">$PROJECT/project/.gnupg/secring.gpg</code> for the private keys</li>
</ul>

<p>These files are going to be encrypted, to provide minimal protection.
To generate this ring in your project, go to you're project's root
directory and then:</p>

<div class="highlight"><pre class="highlight plaintext"><code>gpg --no-default-keyring \
  --primary-keyring `pwd`/project/.gnupg/pubring.gpg \
  --secret-keyring `pwd`/project/.gnupg/secring.gpg \
  --keyring `pwd`/project/.gnupg/pubring.gpg \
  --fingerprint \
  --import path/to/my-key.asc
</code></pre></div>
<p>The <code class="highlighter-rouge">my-key.asc</code> file is the one that you've created in the previous step.</p>

<p>After you create these files, make sure to delete any junk from
<code class="highlighter-rouge">$PROJECT/project/.gnupg</code>, so verify the newly created files with
<code class="highlighter-rouge">git status</code>.</p>

<p>NOTE: check the newly created files, because the <code class="highlighter-rouge">gpg</code> command line
tools might generate junk. We only want those 2 files (<code class="highlighter-rouge">pubring.gpg</code>
and <code class="highlighter-rouge">secring.gpg</code>), so check your project directory with <code class="highlighter-rouge">git status</code>
and delete anything extra.</p>

<h2 id="configuring-sbt" style="font-size: 150%; font-weight: bold;"><b>Configuring SBT<b></b></b></h2>

<p>Curently in <a href="https://monix.io">monix.io</a> I'm using the following plugins:</p>

<ul>
  <li>
<a href="https://github.com/sbt/sbt-pgp">sbt-pgp</a> for signing packages with PGP</li>
  <li>
<a href="https://github.com/sbt/sbt-git">sbt-git</a> for making use of Git from
SBT, relevant here if you want to do Git-enabled version hashes</li>
  <li>
<a href="https://github.com/xerial/sbt-sonatype">sbt-sonatype</a> for automatically
publishing artifacts to Maven Central</li>
</ul>

<p>For PGP the configuration is as follows:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">useGpg</span> <span class="o">:=</span> <span class="kc">false</span>
<span class="n">usePgpKeyHex</span><span class="o">(</span><span class="s">"2673B174C4071B0E"</span><span class="o">)</span>
<span class="n">pgpPublicRing</span> <span class="o">:=</span> <span class="n">baseDirectory</span><span class="o">.</span><span class="n">value</span> <span class="o">/</span> <span class="s">"project"</span> <span class="o">/</span> <span class="s">".gnupg"</span> <span class="o">/</span> <span class="s">"pubring.gpg"</span>
<span class="n">pgpSecretRing</span> <span class="o">:=</span> <span class="n">baseDirectory</span><span class="o">.</span><span class="n">value</span> <span class="o">/</span> <span class="s">"project"</span> <span class="o">/</span> <span class="s">".gnupg"</span> <span class="o">/</span> <span class="s">"secring.gpg"</span>
<span class="n">pgpPassphrase</span> <span class="o">:=</span> <span class="n">sys</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">"PGP_PASS"</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">toArray</span><span class="o">)</span>
</code></pre></div>
<p>Explanation:</p>

<ul>
  <li>
<code class="highlighter-rouge">useGpg := false</code> says that we do not want to use the GPG tools
installed on your computer, but rather the implementation that
<code class="highlighter-rouge">sbt-pgp</code> ships with; in my experience this is a must, otherwise
depending on the GPG tools you have, you won't be able to make it
use a different pgp ring</li>
  <li>
<code class="highlighter-rouge">usePgpKeyHex</code> forces a certain key to be used for signing by
specifying its key</li>
  <li>
<code class="highlighter-rouge">pgpPublicRing</code> and <code class="highlighter-rouge">pgpPublicRing</code> specify the path to a GPG ring
that contains the key you want, instead of the default one which is
usually <code class="highlighter-rouge">$HOME/.gnupg/pubring.gpg</code> and <code class="highlighter-rouge">$HOME/.gnupg/secring.gpg</code>
</li>
  <li>
<code class="highlighter-rouge">pgpPassphrase</code> is a GPG passphrase for the used key, that's taken
from the env variable named <code class="highlighter-rouge">PGP_PASS</code>; Travis has the ability to
set such env variables to be available in your build</li>
</ul>

<p>For publishing to Sonatype, we'll need these settings:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">sonatypeProfileName</span> <span class="o">:=</span> <span class="n">organization</span><span class="o">.</span><span class="n">value</span>

<span class="n">credentials</span> <span class="o">+=</span> <span class="nc">Credentials</span><span class="o">(</span>
  <span class="s">"Sonatype Nexus Repository Manager"</span><span class="o">,</span>
  <span class="s">"oss.sonatype.org"</span><span class="o">,</span>
  <span class="n">sys</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">"SONATYPE_USER"</span><span class="o">,</span> <span class="s">""</span><span class="o">),</span>
  <span class="n">sys</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">getOrElse</span><span class="o">(</span><span class="s">"SONATYPE_PASS"</span><span class="o">,</span> <span class="s">""</span><span class="o">)</span>
<span class="o">)</span>

<span class="n">isSnapshot</span> <span class="o">:=</span> <span class="n">version</span><span class="o">.</span><span class="n">value</span> <span class="n">endsWith</span> <span class="s">"SNAPSHOT"</span>

<span class="n">publishTo</span> <span class="o">:=</span> <span class="nc">Some</span><span class="o">(</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">isSnapshot</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>
    <span class="nc">Opts</span><span class="o">.</span><span class="n">resolver</span><span class="o">.</span><span class="n">sonatypeSnapshots</span>
  <span class="k">else</span>
    <span class="nc">Opts</span><span class="o">.</span><span class="n">resolver</span><span class="o">.</span><span class="n">sonatypeStaging</span>
<span class="o">)</span>
</code></pre></div>
<p>In addition to these options, for Sonatype we also need the required
artifact info (e.g. license, homepage, authors). Here's what I have
for Shade, adjust accordingly:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">licenses</span> <span class="o">:=</span> <span class="nc">Seq</span><span class="o">(</span><span class="s">"MIT"</span> <span class="o">-&gt;</span> <span class="n">url</span><span class="o">(</span><span class="s">"https://opensource.org/licenses/MIT"</span><span class="o">))</span>
<span class="n">homepage</span> <span class="o">:=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">url</span><span class="o">(</span><span class="s">"https://github.com/monix/shade"</span><span class="o">))</span>

<span class="n">scmInfo</span> <span class="o">:=</span> <span class="nc">Some</span><span class="o">(</span>
  <span class="nc">ScmInfo</span><span class="o">(</span>
    <span class="n">url</span><span class="o">(</span><span class="s">"https://github.com/monix/shade"</span><span class="o">),</span>
    <span class="s">"scm:git@github.com:monix/shade.git"</span>
  <span class="o">))</span>

<span class="n">developers</span> <span class="o">:=</span> <span class="nc">List</span><span class="o">(</span>
  <span class="nc">Developer</span><span class="o">(</span>
    <span class="n">id</span><span class="o">=</span><span class="s">"alexelcu"</span><span class="o">,</span>
    <span class="n">name</span><span class="o">=</span><span class="s">"Alexandru Nedelcu"</span><span class="o">,</span>
    <span class="n">email</span><span class="o">=</span><span class="s">"noreply@alexn.org"</span><span class="o">,</span>
    <span class="n">url</span><span class="k">=</span><span class="n">url</span><span class="o">(</span><span class="s">"https://alexn.org"</span><span class="o">)</span>
  <span class="o">))</span>
</code></pre></div>
<p>TIP, to find out the ID of a license type, see this cool list:
<a href="https://spdx.org/licenses/">spdx.org/licenses/</a>.</p>

<p>You'll need those two environment variables set in Travis's settings,
more details below.</p>

<p>And then to enable Git versioning for snapshots (e.g. <code class="highlighter-rouge">3.0.0-9d94d3d</code>)
you can do:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">enablePlugins</span><span class="o">(</span><span class="nc">GitVersioning</span><span class="o">)</span>

<span class="cm">/* The BaseVersion setting represents the in-development (upcoming) version,
 * as an alternative to SNAPSHOTS.
 */</span>
<span class="n">git</span><span class="o">.</span><span class="n">baseVersion</span> <span class="o">:=</span> <span class="s">"3.0.0"</span>

<span class="k">val</span> <span class="nc">ReleaseTag</span> <span class="k">=</span> <span class="s">"""^v([\d\.]+)$"""</span><span class="o">.</span><span class="n">r</span>
<span class="n">git</span><span class="o">.</span><span class="n">gitTagToVersionNumber</span> <span class="o">:=</span> <span class="o">{</span>
  <span class="k">case</span> <span class="nc">ReleaseTag</span><span class="o">(</span><span class="n">v</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">v</span><span class="o">)</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
<span class="o">}</span>

<span class="n">git</span><span class="o">.</span><span class="n">formattedShaVersion</span> <span class="o">:=</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">suffix</span> <span class="k">=</span> <span class="n">git</span><span class="o">.</span><span class="n">makeUncommittedSignifierSuffix</span><span class="o">(</span><span class="n">git</span><span class="o">.</span><span class="n">gitUncommittedChanges</span><span class="o">.</span><span class="n">value</span><span class="o">,</span> <span class="n">git</span><span class="o">.</span><span class="n">uncommittedSignifier</span><span class="o">.</span><span class="n">value</span><span class="o">)</span>

  <span class="n">git</span><span class="o">.</span><span class="n">gitHeadCommit</span><span class="o">.</span><span class="n">value</span> <span class="n">map</span> <span class="o">{</span> <span class="k">_</span><span class="o">.</span><span class="n">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">7</span><span class="o">)</span> <span class="o">}</span> <span class="n">map</span> <span class="o">{</span> <span class="n">sha</span> <span class="k">=&gt;</span>
    <span class="n">git</span><span class="o">.</span><span class="n">baseVersion</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="s">"-"</span> <span class="o">+</span> <span class="n">sha</span> <span class="o">+</span> <span class="n">suffix</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Now test your setup with this command:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ PGP_PASS="xxxxxx" sbt publishLocalSigned
</code></pre></div>
<p>Replace <code class="highlighter-rouge">xxxxxx</code> with your passphrase. If this command works, then we
are good thus far.</p>

<h2 id="configuring-travis" style="font-size: 150%; font-weight: bold;"><b>Configuring Travis<b></b></b></h2>

<p>In <code class="highlighter-rouge">build.sbt</code> I configured these 2 commands:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">addCommandAlias</span><span class="o">(</span><span class="s">"ci-all"</span><span class="o">,</span>  <span class="s">";+clean ;+compile ;+test ;+package"</span><span class="o">)</span>
<span class="n">addCommandAlias</span><span class="o">(</span><span class="s">"release"</span><span class="o">,</span> <span class="s">";+publishSigned ;sonatypeReleaseAll"</span><span class="o">)</span>
</code></pre></div>
<p>Then the <code class="highlighter-rouge">.travis.yml</code> file has something like this:</p>

<div class="highlight"><pre class="highlight yaml"><code><span class="na">language</span><span class="pi">:</span> <span class="s">scala</span>
<span class="na">sudo</span><span class="pi">:</span> <span class="s">required</span>
<span class="na">dist</span><span class="pi">:</span> <span class="s">trusty</span>
<span class="na">group</span><span class="pi">:</span> <span class="s">edge</span>

<span class="na">matrix</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">jdk</span><span class="pi">:</span> <span class="s">oraclejdk8</span>
      <span class="na">scala</span><span class="pi">:</span> <span class="s">2.12.3</span>
      <span class="na">env</span><span class="pi">:</span> <span class="s">COMMAND=ci-all PUBLISH=true</span>

<span class="na">script</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">sbt -J-Xmx6144m ++$TRAVIS_SCALA_VERSION $COMMAND</span>

<span class="na">after_success</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">./project/publish</span>
</code></pre></div>
<p>And then the <code class="highlighter-rouge">project/publish</code> script, which I've built with Ruby
(since I don't know Bash well :)):</p>

<div class="highlight"><pre class="highlight ruby"><code><span class="c1">#!/usr/bin/env ruby</span>

<span class="k">def</span> <span class="nf">exec</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
  <span class="nb">abort</span><span class="p">(</span><span class="s2">"Error encountered, aborting"</span><span class="p">)</span> <span class="k">unless</span> <span class="nb">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s2">"CI=</span><span class="si">#{</span><span class="no">ENV</span><span class="p">[</span><span class="s1">'CI'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"TRAVIS_BRANCH=</span><span class="si">#{</span><span class="no">ENV</span><span class="p">[</span><span class="s1">'TRAVIS_BRANCH'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"TRAVIS_PULL_REQUEST=</span><span class="si">#{</span><span class="no">ENV</span><span class="p">[</span><span class="s1">'TRAVIS_PULL_REQUEST'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span> <span class="s2">"PUBLISH=</span><span class="si">#{</span><span class="no">ENV</span><span class="p">[</span><span class="s1">'PUBLISH'</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
<span class="nb">puts</span>

<span class="k">unless</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'CI'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'true'</span>
  <span class="nb">abort</span><span class="p">(</span><span class="s2">"ERROR: Not running on top of Travis, aborting!"</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">unless</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'PUBLISH'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'true'</span>
  <span class="nb">puts</span> <span class="s2">"Publish is disabled"</span>
  <span class="nb">exit</span>
<span class="k">end</span>

<span class="n">branch</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'TRAVIS_BRANCH'</span><span class="p">]</span>
<span class="n">version</span> <span class="o">=</span> <span class="kp">nil</span>

<span class="k">unless</span> <span class="n">branch</span> <span class="o">=~</span> <span class="sr">/^v(\d+\.\d+\.\d+)$/</span> <span class="o">||</span>
  <span class="p">(</span><span class="n">branch</span> <span class="o">==</span> <span class="s2">"snapshot"</span> <span class="o">&amp;&amp;</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'TRAVIS_PULL_REQUEST'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'false'</span><span class="p">)</span>

  <span class="nb">puts</span> <span class="s2">"Only triggering deployment on the `snapshot` branch, or for version tags "</span> <span class="o">+</span>
       <span class="s2">"and not for pull requests or other branches, exiting!"</span>
  <span class="nb">exit</span> <span class="mi">0</span>
<span class="k">else</span>
  <span class="n">version</span> <span class="o">=</span> <span class="vg">$1</span>
  <span class="nb">puts</span> <span class="s2">"Version branch detected: </span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">"</span> <span class="k">if</span> <span class="n">version</span>
<span class="k">end</span>

<span class="c1"># Forcing a change to the root directory, if not there already</span>
<span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">absolute_path</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="kp">__FILE__</span><span class="p">),</span> <span class="s2">".."</span><span class="p">)))</span>

<span class="c1"># Go, go, go</span>
<span class="nb">exec</span><span class="p">(</span><span class="s2">"sbt release"</span><span class="p">)</span>
</code></pre></div>
<p>Give execution permissions to this script:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ chmod +x ./project/publish
</code></pre></div>
<p>Remember to push your changes:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ git add .
$ git commit -am 'Build changes for automatic releases'
$ git push
</code></pre></div>
<h3 id="setting-environment-variables" style="font-size: 120%; font-weight: bold;"><b>Setting environment variables<b></b></b></h3>

<p>As a final step we need to set the following environment variables in Travis:</p>

<ul>
  <li>
<code class="highlighter-rouge">PGP_PASS</code>: the passphrase we used to encrypt our private PGP key</li>
  <li>
<code class="highlighter-rouge">SONATYPE_USER</code>: a user to login to Sonatype, used by SBT to publish and deploy releases on Sonatype</li>
  <li>
<code class="highlighter-rouge">SONATYPE_PASS</code>: a password to login to Sonatype, used by SBT to publish and deploy releases on Sonatype</li>
</ul>

<p>See the article on
<a href="https://docs.travis-ci.com/user/environment-variables/">adding environment variables to Travis</a>.</p>

<p>NOTE: to get a <code class="highlighter-rouge">SONATYPE_USER</code> and a <code class="highlighter-rouge">SONATYPE_PASS</code> go to the
<a href="https://oss.sonatype.org/#profile;User%20Token">User Profile on Sonatype</a> page
and access the "<em>User Token</em>", or generate a new one.</p>

<p>Here's a screenshot of how my setup currently looks like:</p>

<p><img src="/assets/img/2017/travis-env-vars.png" class="max" width="2032" height="734" alt="Travis env vars" style="; height: 734px; "></p>

<h3 id="alternative-env-with-travis-encryption" style="font-size: 120%; font-weight: bold;"><b>Alternative Env with Travis Encryption<b></b></b></h3>

<p>As an alternative to setting those environment variables in Travis's
UI, you can use Travis's mechanism for encrypting stuff to set these
values in <code class="highlighter-rouge">.travis.yml</code>. See
the <a href="https://docs.travis-ci.com/user/encryption-keys">Encryption Keys</a>
document.</p>

<p>First install the <code class="highlighter-rouge">travis</code> command line tool:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ gem install travis
</code></pre></div>
<p>And then do the following, replacing <code class="highlighter-rouge">xxxxx</code> with your key:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ travis encrypt 'PGP_PASS=xxxxx' --add

$ travis encrypt 'SONATYPE_USER=xxxxx' --add

$ travis encrypt 'SONATYPE_PASS=xxxxx' --add
</code></pre></div>
<p>NOTE: if your env values have special chars, they might need to be
escaped for Bash to not trigger any errors. See document above.</p>

<p>These commands will modify your <code class="highlighter-rouge">.travis.yml</code> file, adding a section
that resembles the following:</p>

<div class="highlight"><pre class="highlight plaintext"><code>env:
  global:
  - secure: GRdfKNrJn/zqjaDWE+16HCfuCSf/wsDpL...
  - secure: SPSIblLKFVns7pVY1x3SEs4/16htY5HUz...
  - secure: YVx2BSSsqF7LdYTwinf6o8nqJiYL9FeFA...
</code></pre></div>
<p>Now this can be committed in your repository and Travis will take care
of decrypting those values.</p>

<h2 id="publishing" style="font-size: 150%; font-weight: bold;"><b>Publishing<b></b></b></h2>

<p>For publishing hashed snapshot versions, we need a <code class="highlighter-rouge">snapshot</code> branch,
as that's what the script above looks for.</p>

<p>So create this branch by forking <code class="highlighter-rouge">master</code> and pushing it, like so:</p>

<div class="highlight"><pre class="highlight plaintext"><code>$ git checkout master

$ git checkout -b snapshot
$ git push --set-upstream origin snapshot
</code></pre></div>
<p>If everything goes well, we should have a new hashed version published,
but watch the output of Travis for any problems.</p>

<h2 id="extra-resources" style="font-size: 150%; font-weight: bold;"><b>Extra Resources<b></b></b></h2>

<p>I've written this document while preparing the Shade project for
automatic deployments. So here's for inspiration:</p>

<ul>
  <li><a href="https://github.com/monix/shade/compare/1c373f8714e92b48a8bb2337158f61e5650d260a...d712897f122642835cbcd32d159e917c59e7685c">commits in monix/shade</a></li>
  <li>
<a href="https://travis-ci.org/monix/shade/jobs/265215531">snapshot release sample</a>
(that published <code class="highlighter-rouge">1.10.0-d712897</code> on Maven Central)</li>
  <li>
<a href="https://travis-ci.org/monix/shade/jobs/265221087">release of v1.10.0</a>
(that published the final <code class="highlighter-rouge">1.10.0</code> on Maven Central)</li>
</ul>

<h2 id="in-closing" style="font-size: 150%; font-weight: bold;"><b>In Closing<b></b></b></h2>

<p>So that's about it. Pretty painful if you ask me, but hopefully we
don't have to do this too often.</p>

<p>I've written this article for myself actually, because I keep
forgetting what I did the first time.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/08/16/automatic-releases-sbt-travis.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/03/15/fp-inception.html</id>
   <title>Functional Programming Inception - Bucharest FP</title>
   <link href="https://alexn.org/blog/2017/03/15/fp-inception.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-03-14T22:00:00+00:00</published>
   <updated>2017-03-14T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Monix]]></category>

   <content type="html"><![CDATA[
   <p><strong>Functional Programming Inception</strong> -
my presentation from the <a href="http://bucharestfp.ro/">Bucharest FP</a> meetup:</p>

<script async="" class="speakerdeck-embed" data-id="ed894a1f20a141bab121d83d1fa54b68" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<p><img src="/assets/img/2017/scala-icon.png" class="right" width="200" alt="Scala icon" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p>Resources:</p>

<ul>
  <li><a href="/assets/pdfs/FP-Inception-Bucharest.pdf">Slides (PDF file)</a></li>
</ul>

<p>Links from the presentation:</p>

<ul>
  <li><a href="https://monix.io">Monix</a></li>
  <li><a href="http://typelevel.org/cats/">Typelevel Cats</a></li>
  <li><a href="https://github.com/typelevel/discipline">Discipline</a></li>
  <li><a href="https://www.scalacheck.org/">ScalaCheck</a></li>
  <li><a href="https://github.com/monix/monix/pull/280">Generic Iterant Implementation</a></li>
  <li><a href="https://github.com/monix/monix/pull/331">Simplified Task-based Implementation</a></li>
</ul>

<h2 id="abstract" style="font-size: 150%; font-weight: bold;"><b>Abstract<b></b></b></h2>

<p>Designing functionality that exhibits the properties of functional
programming is hard because it requires a mentality change, coping
with immutability and consideration for recursion, performance and
polymorphism. This talk is a lesson in FP design that makes use of
Scala’s hybrid OOP+FP nature.</p>

<p>We are going to start from Scala’s (and Java’s) ubiquitous
Iterator/Iterable types which expose the famous iterator pattern,
analyzing its strengths and weaknesses. And then we are going to work
our way up to a fully featured FP replacement that has referential
transparency and that fixes everything that’s wrong with Iterator,
while being more generic.</p>

<p>This lesson in design involves talking about immutability, imperative
programming, asynchrony and problems encountered when going FP, like
performance considerations, recursion and memory leaks. We are also
going to talk about ADTs, higher kinded polymorphism and type-classes
versus OOP subtyping. Interestingly the example presented will use
both OOP subtyping and type-classes and thus we can make a clear
comparison about what to use and when - a problem that the Scala
developer has in his daily work.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/03/15/fp-inception.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html</id>
   <title>Asynchronous Programming and Scala</title>
   <link href="https://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-01-29T22:00:00+00:00</published>
   <updated>2017-01-29T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Asynchrony]]></category>
   <category><![CDATA[Concurrency]]></category>
   <category><![CDATA[Programming]]></category>

   <content type="html"><![CDATA[
   <p>Asynchrony is everywhere and it subsumes concurrency. This article
explains what asynchronous processing is and its challenges.</p>

<h2 id="table-of-contents" style="font-size: 150%; font-weight: bold;"><b>Table of Contents<b></b></b></h2>

<ul>
  <li><a href="#h1">1. Introduction</a></li>
  <li><a href="#h2">2. The Big Illusion</a></li>
  <li>
<a href="#h3">3. Callback Hell</a>
    <ul>
      <li><a href="#h3-1">3.1. Sequencing (Purgatory of Side-effects)</a></li>
      <li><a href="#h3-2">3.2. Parallelism (Limbo of Nondeterminism)</a></li>
      <li><a href="#h3-3">3.3. Recursivity (Wrath of StackOverflow)</a></li>
    </ul>
  </li>
  <li>
<a href="#h4">4. Futures and Promises</a>
    <ul>
      <li><a href="#h4-1">4.1. Sequencing</a></li>
      <li><a href="#h4-2">4.2. Parallelism</a></li>
      <li><a href="#h4-3">4.3. Recursivity</a></li>
      <li><a href="#h4-4">4.4. Performance Considerations</a></li>
    </ul>
  </li>
  <li>
<a href="#h5">5. Task, Scala's IO Monad</a>
    <ul>
      <li><a href="#h5-1">5.1. Sequencing</a></li>
      <li><a href="#h5-2">5.2. Parallelism</a></li>
      <li><a href="#h5-3">5.3. Recursivity</a></li>
    </ul>
  </li>
  <li>
<a href="#h6">6. Functional Programming and Type-classes</a>
    <ul>
      <li><a href="#h6-1">6.1. Monad (Sequencing and Recursivity)</a></li>
      <li><a href="#h6-2">6.2. Applicative (Parallelism)</a></li>
      <li><a href="#h6-3">6.3. Can We Define a Type-class for Async Evaluation?</a></li>
    </ul>
  </li>
  <li><a href="#h7">7. Picking the Right Tool</a></li>
</ul>

<h2 id="1-introduction" style="font-size: 150%; font-weight: bold;"><b><a href="#h1" name="h1">1.</a> Introduction<b></b></b></h2>

<p>As a concept it is more general than <em>multithreading</em>, although some
people confuse the two. If you're looking for a relationship, you
could say:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="nc">Multithreading</span> <span class="k">&lt;:</span> <span class="nc">Asynchrony</span>
</code></pre></div>
<p>We can represent asynchronous computations with a type:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">type</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span><span class="nc">Try</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</code></pre></div>
<p>If it looks ugly with those <code class="highlighter-rouge">Unit</code> return types, that's because
asynchrony is ugly. An asynchronous computation is any task, thread,
process, node somewhere on the network that:</p>

<ol>
  <li>executes outside of your program's main flow or from the point of
view of the caller, it doesn't execute on the current call-stack</li>
  <li>receives a callback that will get called once the result is
finished processing</li>
  <li>it provides no guarantee about when the result is signaled, no
guarantee that a result will be signaled at all</li>
</ol>

<p>It's important to note asynchrony subsumes <em>concurrency</em>, but not
necessarily <em>multithreading</em>. Remember that in Javascript the majority
of all I/O actions (input or output) are asynchronous and even heavy
business logic is made asynchronous (with <code class="highlighter-rouge">setTimeout</code> based scheduling)
in order to keep the interface responsive. But no kernel-level
multithreading is involved, Javascript being an N:1 multithreaded
platform.</p>

<p>Introducing asynchrony into your program means you'll have concurrency
problems because you never know when asynchronous computations will be
finished, so <em>composing</em> the results of multiple asynchronous
computations running at the same time means you have to do
synchronization, as you can no longer rely on ordering. And not
relying on an order is a recipe for <em>nondeterminism</em>.</p>

<p class="extra-info">
<a href="https://en.wikipedia.org/wiki/Nondeterministic_algorithm">Wikipedia says</a>:
a <em>nondeterministic</em> algorithm is an algorithm that, even for the same
input, can exhibit different behaviors on different runs, as opposed
to a <em>deterministic</em> algorithm … A <em>concurrent</em> algorithm can perform
differently on different runs due to a race condition.
</p>

<p><img src="/assets/img/2017/nondet.png" class="max-border" width="775" alt="Nondet" style="; width: 775px; "></p>

<p>The astute reader could notice that the type in question can be seen <em>everywhere</em>,
with some modifications depending on use-case and contract:</p>

<ul>
  <li>in the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a>
from the <a href="https://en.wikipedia.org/wiki/Design_Patterns">Gang of Four</a>
</li>
  <li>in Scala's <a href="http://www.scala-lang.org/api/current/scala/concurrent/Future.html">Future</a>,
which is defined by its abstract <code class="highlighter-rouge">onComplete</code> method</li>
  <li>in Java's <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-">ExecutorService.submit(Callable)</a>
</li>
  <li>in Javascript's <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">EventTarget.addEventListener</a>
</li>
  <li>in <a href="http://akka.io/">Akka</a> actors, although there the given callback
is replaced by the <code class="highlighter-rouge">sender()</code> reference</li>
  <li>in the Monix <a href="https://github.com/monix/monix/blob/v2.2.1/monix-eval/shared/src/main/scala/monix/eval/Task.scala#L1253">Task.Async</a> definition</li>
  <li>in the Monix <a href="https://monix.io/api/2.2/monix/reactive/Observable.html">Observable</a>
and <a href="https://monix.io/api/2.2/monix/reactive/Observer.html">Observer</a> pair</li>
  <li>in the <a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/">Reactive Streams</a> specification</li>
</ul>

<p>What do all of these abstractions have in common? They provide ways to
deal with asynchrony, some more successful than others.</p>

<h2 id="2-the-big-illusion" style="font-size: 150%; font-weight: bold;"><b><a href="#h2" name="h2">2.</a> The Big Illusion<b></b></b></h2>

<p>We like to pretend that we can describe functions that can convert
asynchronous results to synchronous ones:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">await</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">A</span>
</code></pre></div>
<p>Fact of the matter is that we can't pretend that asynchronous
processes are equivalent with normal functions. If you need a lesson
in history for why we can't pretend that, you only need to take a look
at why CORBA failed.</p>

<p>With asynchronous processes we have the following very common
<a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing">fallacies of distributed computing</a>:</p>

<ol>
  <li>The network is reliable</li>
  <li>Latency is zero</li>
  <li>Bandwidth is infinite</li>
  <li>The network is secure</li>
  <li>Topology doesn't change</li>
  <li>There is one administrator</li>
  <li>Transport cost is zero</li>
  <li>The network is homogeneous</li>
</ol>

<p>None of them are true of course. Which means code gets written with
little error handling for network failures, ignorance of network
latency or packet loss, ignorance of bandwidth limits and in general
ignorance of the ensuing nondeterminism.</p>

<p>People have tried to cope with this by:</p>

<ul>
  <li>callbacks, callbacks everywhere, equivalent to basically ignoring
the problem, as it happens in Javascript, which leads to the well
known effect of <em>callback hell</em>, paid for with the sweat and blood
of programmers that constantly imagine having chosen a different
life path</li>
  <li>blocking threads, on top of
<a href="https://en.wikipedia.org/wiki/Thread_(computing)#1:1_.28kernel-level_threading.29">1:1 (kernel-level) multithreading</a>
platforms</li>
  <li>
<a href="https://en.wikipedia.org/wiki/Continuation">first-class continuations</a>,
implemented for example by Scheme in
<a href="https://en.wikipedia.org/wiki/Call-with-current-continuation">call/cc</a>,
being the ability to save the execution state at any point and
return to that point at a later point in the program</li>
  <li>The <code class="highlighter-rouge">async</code> / <code class="highlighter-rouge">await</code> language extension from C#, also implemented in
the <a href="https://github.com/scala/async">scala-async</a> library and in the
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">latest ECMAScript</a>
</li>
  <li>
<a href="https://en.wikipedia.org/wiki/Green_threads">Green threads</a>
managed by the runtime, possibly in combination with
<a href="https://en.wikipedia.org/wiki/Thread_(computing)#M:N_.28hybrid_threading.29">M:N multithreading</a>,
to simulate blocking for asynchronous actions; examples including
Golang but also Haskell</li>
  <li>The <a href="https://en.wikipedia.org/wiki/Actor_model">actor model</a> as implemented in Erlang or Akka,
or <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">CSP</a> such as
in <a href="https://github.com/clojure/core.async">Clojure's core.async</a> or in Golang</li>
  <li>Monads being used for ordering and composition, such as Haskell's
<a href="https://hackage.haskell.org/package/async-2.1.1/docs/Control-Concurrent-Async.html">Async</a> type
in combination with the <a href="https://wiki.haskell.org/IO_inside">IO</a> type, or
<a href="https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/asynchronous-workflows">F# asynchronous workflows</a>,
or <a href="http://docs.scala-lang.org/overviews/core/futures.html">Scala's Futures and Promises</a>,
or the <a href="https://monix.io/docs/2x/eval/task.html">Monix Task</a>
or the <a href="https://github.com/scalaz/scalaz/blob/scalaz-seven/concurrent/src/main/scala/scalaz/concurrent/Task.scala">Scalaz Task</a>,
etc, etc.</li>
</ul>

<p>If there are so many solutions, that's because none of them is
suitable as a general purpose mechanism for dealing with asynchrony.
The <a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">no silver bullet</a>
dilemma is relevant here, with memory management and concurrency being
the biggest problems that we face as software developers.</p>

<p class="extra-info">
<strong>WARNING - personal opinion and rant:</strong> People like to boast about M:N
platforms like Golang, however I prefer 1:1 multithreaded platforms,
like the JVM or dotNET.
<br><br>
Because you can build M:N multithreading on top of 1:1 given enough
expressiveness in the programming language (e.g. Scala's Futures and
Promises, Task, Clojure's core.async, etc), but if that M:N runtime starts being
unsuitable for your usecase, then you can't fix it or replace it
without replacing the platform. And yes, most M:N platforms are broken
in one way or another.
<br><br>
Indeed learning about all the possible solutions and making choices is
freaking painful, but it is much less painful than making uninformed
choices, with the TOOWTDI and "worse is better" mentalities being in
this case actively harmful. People complaining about the difficulty of
learning a new and expressive language like Scala or Haskell are
missing the point, because if they have to deal with concurrency, then
learning a new programming language is going to be the least of their
problems. I know people that have quit the software industry because
of the shift to concurrency.
</p>

<h2 id="3-callback-hell" style="font-size: 150%; font-weight: bold;"><b><a href="#h3" name="h3">3.</a> Callback Hell<b></b></b></h2>

<p>Let's build an artificial example made to illustrate our challenges.
Say we need to initiate two asynchronous processes and combine their
result.</p>

<p>First let's define a function that executes stuff asynchronously:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.global</span>

<span class="k">type</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span><span class="n">A</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>

<span class="k">def</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="n">global</span><span class="o">.</span><span class="n">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
      <span class="k">def</span> <span class="n">run</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
        <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
        <span class="n">onFinish</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
      <span class="o">}</span>
    <span class="o">})</span>
  <span class="o">}</span>

<span class="c1">// Usage
</span><span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
<span class="c1">//=&gt; Result: 40
</span></code></pre></div>
<h3 id="31-sequencing-purgatory-of-side-effects" style="font-size: 120%; font-weight: bold;"><b><a href="#h3-1" name="h3-1">3.1.</a> Sequencing (Purgatory of Side-effects)<b></b></b></h3>

<p>Let's combine two asynchronous results, with the execution happening
one after another, in a neat sequence:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span>
      <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">b</span> <span class="k">=&gt;</span>
        <span class="c1">// Combining the two results
</span>        <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

<span class="c1">// Usage
</span><span class="n">timesFour</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
<span class="c1">//=&gt; Result: 80
</span></code></pre></div>
<p>Looks simple now, but we are only combining two results, one after another.</p>

<p>The big problem however is that <em>asynchrony infects everything it touches</em>.
Let's assume for  the sake of argument that we start with a pure function:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">4</span>
</code></pre></div>
<p>But then your enterprise architect, after hearing about these Enterprise JavaBeans and
a lap dance, decides that you should depend on this asynchronous <code class="highlighter-rouge">timesTwo</code>
function. And now our <code class="highlighter-rouge">timesFour</code> implementation changes from a pure mathematical
function to a side-effectful one and we have no choice in the matter.
And without a well grown <code class="highlighter-rouge">Async</code> type, we are forced to deal with side-effectful
callbacks for the whole pipeline. And blocking for the result won't help,
as you're just hiding the problem, see <a href="#h2">section 2</a> for why.</p>

<p>But wait, things are about to get worse 😷</p>

<h3 id="32-parallelism-limbo-of-nondeterminism" style="font-size: 120%; font-weight: bold;"><b><a href="#h3-2" name="h3-2">3.2.</a> Parallelism (Limbo of Nondeterminism)<b></b></b></h3>

<p>The second call we made above is not dependent on the first call,
therefore it can run in parallel. On the JVM we can run CPU-bound
tasks in parallel, but this is relevant for Javascript as well, as we
could be making Ajax requests or talking with web workers.</p>

<p>Unfortunately here things can get a little complicated. First of all
the naive way to do it is terribly wrong:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// REALLY BAD SAMPLE
</span>
<span class="k">def</span> <span class="n">timesFourInParallel</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="k">var</span> <span class="n">cacheA</span> <span class="k">=</span> <span class="mi">0</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span> <span class="n">cacheA</span> <span class="k">=</span> <span class="n">a</span> <span class="o">}</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">b</span> <span class="k">=&gt;</span>
      <span class="c1">// Combining the two results
</span>      <span class="n">onFinish</span><span class="o">(</span><span class="n">cacheA</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>

<span class="n">timesFourInParallel</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
<span class="c1">//=&gt; Result: 80
</span>
<span class="n">timesFourInParallel</span><span class="o">(</span><span class="mi">20</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
<span class="c1">//=&gt; Result: 40
</span></code></pre></div>
<p>This right here is an example showing <em>nondeterminism</em> in action. We
get <em>no ordering guarantees</em> about which one finishes first, so if we
want parallel processing, we need to model a mini state machine for
doing synchronization.</p>

<p>First, we define our ADT describing the state-machine:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Defines the state machine
</span><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">State</span>
<span class="c1">// Initial state
</span><span class="k">case</span> <span class="k">object</span> <span class="nc">Start</span> <span class="k">extends</span> <span class="nc">State</span>
<span class="c1">// We got a B, waiting for an A
</span><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">State</span>
<span class="c1">// We got a A, waiting for a B
</span><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">State</span>
</code></pre></div>
<p>And then we can evolve this state machine asynchronously:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// BAD SAMPLE FOR THE JVM (only works for Javascript)
</span>
<span class="k">def</span> <span class="n">timesFourInParallel</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="k">var</span> <span class="n">state</span><span class="k">:</span> <span class="kt">State</span> <span class="o">=</span> <span class="nc">Start</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span>
      <span class="n">state</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="n">state</span> <span class="k">=</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">b</span> <span class="k">=&gt;</span>
      <span class="n">state</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="n">state</span> <span class="k">=</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>To better visualize what we're dealing with, here's the state machine:</p>

<div class="max-border">
  <img src="/assets/img/2017/callback-hell-stm.png" align="center" width="300" alt="Callback hell stm" style="; width: 300px; ">
</div>

<p>But wait, we aren't over because the JVM has true 1:1 multi-threading, which means
we get to enjoy <em>shared memory concurrency</em> and thus access to that <code class="highlighter-rouge">state</code> has to
be synchronized.</p>

<p>One solution is to use <code class="highlighter-rouge">synchronized</code> blocks, also called <em>intrinsic locks</em>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// We need a common reference to act as our monitor
</span><span class="k">val</span> <span class="n">lock</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AnyRef</span>
<span class="k">var</span> <span class="n">state</span><span class="k">:</span> <span class="kt">State</span> <span class="o">=</span> <span class="nc">Start</span>

<span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span>
  <span class="n">lock</span><span class="o">.</span><span class="n">synchronized</span> <span class="o">{</span>
    <span class="n">state</span> <span class="k">match</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
        <span class="n">state</span> <span class="k">=</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
      <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span>
        <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
      <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
        <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>        <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//...
</span></code></pre></div>
<p>Such high-level locks protect resources (such as our <code class="highlighter-rouge">state</code>) from
being accessed in parallel by multiple threads. But I personally
prefer to avoid high-level locks because the kernel's scheduler can
freeze any thread for any reason, including threads that hold locks,
freezing a thread holding a lock means that other threads will be
unable to make progress and if you want to guarantee constant progress
(e.g. soft real-time characteristics), then
<a href="https://en.wikipedia.org/wiki/Non-blocking_algorithm">non-blocking</a>
logic is preferred when possible.</p>

<p>So an alternative is to use an
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html">AtomicReference</a>,
which is perfect for this case:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// CORRECT VERSION FOR JVM
</span>
<span class="k">import</span> <span class="nn">scala.annotation.tailrec</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.atomic.AtomicReference</span>

<span class="k">def</span> <span class="n">timesFourInParallel</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">state</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicReference</span><span class="o">[</span><span class="kt">State</span><span class="o">](</span><span class="nc">Start</span><span class="o">)</span>

    <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">onValueA</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
      <span class="n">state</span><span class="o">.</span><span class="n">get</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="nc">Start</span><span class="o">,</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)))</span>
            <span class="n">onValueA</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="c1">// retry
</span>        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)(</span><span class="n">onValueA</span><span class="o">)</span>

    <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">onValueB</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
      <span class="n">state</span><span class="o">.</span><span class="n">get</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="nc">Start</span><span class="o">,</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)))</span>
            <span class="n">onValueB</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="c1">// retry
</span>        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>

    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)(</span><span class="n">onValueB</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p class="extra-info">
<strong>PRO-TIP:</strong> if you want code that cross-compiles to Javascript / Scala.js,
along with performance tweaks and cool utilities for manipulating atomic references,
try the <a href="https://monix.io/docs/2x/execution/atomic.html">Atomic</a> type
from <a href="https://monix.io/">Monix</a>.
</p>

<p>Are you getting pumped? Let's take it up a notch 😝</p>

<h3 id="33-recursivity-wrath-of-stackoverflow" style="font-size: 120%; font-weight: bold;"><b><a href="#h3-3" name="h3-3">3.3.</a> Recursivity (Wrath of StackOverflow)<b></b></b></h3>

<p>What if I were to tell you that the above <code class="highlighter-rouge">onFinish</code> call is
stack-unsafe and if you aren't going to force an <em>asynchronous
boundary</em> when calling it, then your program can blow up
with a <code class="highlighter-rouge">StackOverflowError</code>?</p>

<p>You shouldn't take my word for it. Let's first have some fun and
define the above operation in a generic way:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.annotation.tailrec</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.atomic.AtomicReference</span>

<span class="k">type</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span><span class="n">A</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>

<span class="k">def</span> <span class="n">mapBoth</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">fb</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span><span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span><span class="o">)</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="c1">// Defines the state machine
</span>  <span class="k">sealed</span> <span class="k">trait</span> <span class="nc">State</span><span class="o">[</span><span class="kt">+A</span>,<span class="kt">+B</span><span class="o">]</span>
  <span class="c1">// Initial state
</span>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Start</span> <span class="k">extends</span> <span class="nc">State</span><span class="o">[</span><span class="kt">Nothing</span>, <span class="kt">Nothing</span><span class="o">]</span>
  <span class="c1">// We got a B, waiting for an A
</span>  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">WaitForA</span><span class="o">[</span><span class="kt">+B</span><span class="o">](</span><span class="n">b</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">State</span><span class="o">[</span><span class="kt">Nothing</span>,<span class="kt">B</span><span class="o">]</span>
  <span class="c1">// We got a A, waiting for a B
</span>  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">WaitForB</span><span class="o">[</span><span class="kt">+A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">State</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">Nothing</span><span class="o">]</span>

  <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">state</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicReference</span><span class="o">[</span><span class="kt">State</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">]](</span><span class="nc">Start</span><span class="o">)</span>

    <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">onValueA</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
      <span class="n">state</span><span class="o">.</span><span class="n">get</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="nc">Start</span><span class="o">,</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)))</span>
            <span class="n">onValueA</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="c1">// retry
</span>        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">))</span>
        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>

    <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">onValueB</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
      <span class="n">state</span><span class="o">.</span><span class="n">get</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Start</span> <span class="k">=&gt;</span>
          <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="n">compareAndSet</span><span class="o">(</span><span class="nc">Start</span><span class="o">,</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="n">b</span><span class="o">)))</span>
            <span class="n">onValueB</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="c1">// retry
</span>        <span class="k">case</span> <span class="nc">WaitForB</span><span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="n">onFinish</span><span class="o">(</span><span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">))</span>
        <span class="k">case</span> <span class="nc">WaitForA</span><span class="o">(</span><span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="c1">// Can't be caught b/c async, hopefully it gets reported
</span>          <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
      <span class="o">}</span>

    <span class="n">fa</span><span class="o">(</span><span class="n">onValueA</span><span class="o">)</span>
    <span class="n">fb</span><span class="o">(</span><span class="n">onValueB</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>And now we can define an operation similar to Scala's <code class="highlighter-rouge">Future.sequence</code>,
because our will is strong and our courage immensurable 😇</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">sequence</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="nd">@tailrec</span> <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Async</span><span class="o">[</span><span class="kt">A</span><span class="o">]],</span> <span class="n">acc</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span>
    <span class="n">list</span> <span class="k">match</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span>
        <span class="n">onFinish</span> <span class="k">=&gt;</span> <span class="n">acc</span><span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">onFinish</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">reverse</span><span class="o">))</span>
      <span class="k">case</span> <span class="n">x</span> <span class="o">::</span> <span class="n">xs</span> <span class="k">=&gt;</span>
        <span class="k">val</span> <span class="n">update</span> <span class="k">=</span> <span class="n">mapBoth</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">acc</span><span class="o">)(</span><span class="k">_</span> <span class="o">::</span> <span class="k">_</span><span class="o">)</span>
        <span class="n">loop</span><span class="o">(</span><span class="n">xs</span><span class="o">,</span> <span class="n">update</span><span class="o">)</span>
    <span class="o">}</span>

  <span class="k">val</span> <span class="n">empty</span><span class="k">:</span> <span class="kt">Async</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="k">_</span><span class="o">(</span><span class="nc">Nil</span><span class="o">)</span>
  <span class="n">loop</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">empty</span><span class="o">)</span>
<span class="o">}</span>

<span class="c1">// Invocation
</span><span class="n">sequence</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">30</span><span class="o">)))</span> <span class="o">{</span> <span class="n">r</span> <span class="k">=&gt;</span>
  <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $r"</span><span class="o">)</span>
<span class="o">}</span>
<span class="c1">//=&gt; Result: List(20, 40, 60)
</span></code></pre></div>
<p>Oh, you really think we are done?</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="mf">0.</span><span class="n">until</span><span class="o">(</span><span class="mi">10000</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">).</span><span class="n">toList</span>
<span class="n">sequence</span><span class="o">(</span><span class="n">list</span><span class="o">)(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Sum: ${r.sum}"</span><span class="o">))</span>
</code></pre></div>
<p>Behold the glorious memory error that will probably crash your program in production,
being considered a fatal error that Scala's <code class="highlighter-rouge">NonFatal</code> does not catch:</p>

<div class="highlight"><pre class="highlight plaintext"><code>java.lang.StackOverflowError
  at java.util.concurrent.ForkJoinPool.externalPush(ForkJoinPool.java:2414)
  at java.util.concurrent.ForkJoinPool.execute(ForkJoinPool.java:2630)
  at scala.concurrent.impl.ExecutionContextImpl$$anon$3.execute(ExecutionContextImpl.scala:131)
  at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:20)
  at .$anonfun$timesTwo$1(&lt;pastie&gt;:27)
  at .$anonfun$timesTwo$1$adapted(&lt;pastie&gt;:26)
  at .$anonfun$mapBoth$1(&lt;pastie&gt;:66)
  at .$anonfun$mapBoth$1$adapted(&lt;pastie&gt;:40)
  at .$anonfun$mapBoth$1(&lt;pastie&gt;:67)
  at .$anonfun$mapBoth$1$adapted(&lt;pastie&gt;:40)
  at .$anonfun$mapBoth$1(&lt;pastie&gt;:67)
  at .$anonfun$mapBoth$1$adapted(&lt;pastie&gt;:40)
  at .$anonfun$mapBoth$1(&lt;pastie&gt;:67)
</code></pre></div>
<p>As I said, that <code class="highlighter-rouge">onFinish</code> call being made without a <em>forced async
boundary</em> can lead to a stack-overflow error. On top of Javascript
this can be solved by scheduling it with <code class="highlighter-rouge">setTimeout</code> and on top of
the JVM you need a thread-pool or a Scala <code class="highlighter-rouge">ExecutionContext</code>.</p>

<p>Are you feeling the fire yet? 🔥</p>

<h2 id="4-futures-and-promises" style="font-size: 150%; font-weight: bold;"><b><a href="#h4" name="h4">4.</a> Futures and Promises<b></b></b></h2>

<p>The <code class="highlighter-rouge">scala.concurrent.Future</code> describes strictly evaluated
asynchronous computations, being similar to our <code class="highlighter-rouge">Async</code> type used
above.</p>

<p class="extra-info">
<a href="https://en.wikipedia.org/wiki/Futures_and_promises">Wikipedia says</a>:
Future and Promise are constructs used for synchronizing program
execution in some concurrent programming languages. They describe an
object that acts as a proxy for a result that is initially unknown,
usually because the computation of its value is yet incomplete.
</p>

<p class="extra-info">
<strong>Author's Rant:</strong> The <code class="highlighter-rouge">docs.scala-lang.org</code> article on
<a href="http://docs.scala-lang.org/overviews/core/futures.html">Futures and Promises</a> currently
says that "<em>Futures provide a way to reason about performing many
operations in parallel– in an efficient and non-blocking way</em>", but
that is misleading, a source of confusion.
<br><br>
The <code class="highlighter-rouge">Future</code> type describes <em>asynchrony</em> and not parallelism. Yes, you
can do things in parallel with it, but it's not meant only for
parallelism (async != parallelism) and for people looking into ways to
use their CPU capacity to its fullest, working with <code class="highlighter-rouge">Future</code> can prove
to be expensive and unwise, because in certain cases it has performance
issues, see <a href="#h4-4">section 4.4</a>.
</p>

<p>The <code class="highlighter-rouge">Future</code> is an interface defined by 2 primary operations, along with
many combinators defined based on those primary operations:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.util.Try</span>
<span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext</span>

<span class="k">trait</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">+T</span><span class="o">]</span> <span class="o">{</span>
  <span class="c1">// abstract
</span>  <span class="k">def</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Try</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span>

  <span class="c1">// abstract
</span>  <span class="k">def</span> <span class="n">onComplete</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>

  <span class="c1">// Transforms values
</span>  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">U</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="c1">// Sequencing ;-)
</span>  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">T</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">U</span><span class="o">])(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">U</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="c1">// ...
</span><span class="o">}</span>
</code></pre></div>
<p>The properties of <code class="highlighter-rouge">Future</code>:</p>

<ul>
  <li>
<a href="https://en.wikipedia.org/wiki/Eager_evaluation">Eagerly evaluated</a>
(strict and not lazy), meaning that when the caller of a function
receives a <code class="highlighter-rouge">Future</code> reference, whatever asynchronous process that
should complete it has probably started already.</li>
  <li>
<a href="https://en.wikipedia.org/wiki/Memoization">Memoized</a> (cached),
since being eagerly evaluated means that it behaves like a normal
value instead of a function and the final result needs to be
available to all listeners. The purpose of the <code class="highlighter-rouge">value</code> property is
to return that memoized result or <code class="highlighter-rouge">None</code> if it isn't complete
yet. Goes without saying that calling its <code class="highlighter-rouge">def value</code> yields a
non-deterministic result.</li>
  <li>Streams a single result and it shows because of the memoization
applied. So when listeners are registered for completion, they'll
only get called once at most.</li>
</ul>

<p>Explanatory notes about the <code class="highlighter-rouge">ExecutionContext</code>:</p>

<ul>
  <li>The <code class="highlighter-rouge">ExecutionContext</code> manages asynchronous execution and although
you can view it as a thread-pool, it's not necessarily a thread-pool
(because async != multithreading or parallelism).</li>
  <li>The <code class="highlighter-rouge">onComplete</code> is basically our <code class="highlighter-rouge">Async</code> type defined above,
however it takes an <code class="highlighter-rouge">ExecutionContext</code> because all completion
callbacks need to be called asynchronously.</li>
  <li>All combinators and utilities are built on top of <code class="highlighter-rouge">onComplete</code>,
therefore all combinators and utilities must also take an
<code class="highlighter-rouge">ExecutionContext</code> parameter.</li>
</ul>

<p>If you don't understand why that <code class="highlighter-rouge">ExecutionContext</code> is needed in all
those signatures, go back and re-read <a href="#h3-3">section 3.3</a> and don't
come back until you do.</p>

<h3 id="41-sequencing" style="font-size: 120%; font-weight: bold;"><b><a href="#h4-1" name="h4-1">4.1.</a> Sequencing<b></b></b></h3>

<p>Let's redefine our function from <a href="#h3">section 3</a> in terms of <code class="highlighter-rouge">Future</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span><span class="nc">Future</span><span class="o">,</span> <span class="nc">ExecutionContext</span><span class="o">}</span>

<span class="k">def</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Future</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>

<span class="c1">// Usage
</span><span class="o">{</span>
  <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

  <span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="n">onComplete</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
  <span class="c1">//=&gt; Result: Success(40)
</span><span class="o">}</span>
</code></pre></div>
<p>Easy enough, the <code class="highlighter-rouge">Future.apply</code> builder executes the given computation
on the given <code class="highlighter-rouge">ExecutionContext</code>. So on the JVM, assuming the <code class="highlighter-rouge">global</code>
execution context, it's going to run on a different thread.</p>

<p>Now to do sequencing like in <a href="#h3-1">section 3.1</a>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="c1">// Usage
</span><span class="o">{</span>
  <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

  <span class="n">timesFour</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="n">onComplete</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
  <span class="c1">//=&gt; Result: Success(80)
</span><span class="o">}</span>
</code></pre></div>
<p>Easy enough. That "<em>for comprehension</em>" magic right there is
translated to nothing more than calls to <code class="highlighter-rouge">flatMap</code> and <code class="highlighter-rouge">map</code>, being
literally equivalent with:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span>
    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">b</span> <span class="k">=&gt;</span>
      <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>
<p>And if you import <a href="https://github.com/scala/async">scala-async</a> in
your project, then you can do it like:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.async.Async.</span><span class="o">{</span><span class="n">async</span><span class="o">,</span> <span class="n">await</span><span class="o">}</span>

<span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">async</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="n">await</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
    <span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="n">await</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="n">b</span><span class="o">))</span>
    <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
  <span class="o">}</span>
</code></pre></div>
<p>The <code class="highlighter-rouge">scala-async</code> library is powered by macros and will translate your
code to something equivalent to <code class="highlighter-rouge">flatMap</code> and <code class="highlighter-rouge">map</code> calls. So in other
words <code class="highlighter-rouge">await</code> does not block threads, even though it gives the
illusion that it does.</p>

<p>This looks great actually, unfortunately it has many limitations.  The
library <em>cannot rewrite</em> your code in case the <code class="highlighter-rouge">await</code> is inside an
anonymous function and unfortunately Scala code is usually full of
such expressions. This does not work:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// BAD SAMPLE
</span><span class="k">def</span> <span class="n">sum</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]])(</span><span class="k">implicit</span> <span class="n">ec</span><span class="o">;</span> <span class="nc">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">async</span> <span class="o">{</span>
    <span class="k">var</span> <span class="n">sum</span> <span class="k">=</span> <span class="mi">0</span>
    <span class="c1">// Nope, not going to work because "for" is translated to "foreach"
</span>    <span class="k">for</span> <span class="o">(</span><span class="n">f</span> <span class="k">&lt;-</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">sum</span> <span class="o">+=</span> <span class="n">await</span><span class="o">(</span><span class="n">f</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>
<p>This approach gives the illusion of having <em>first-class
continuations</em>, but these continuations are unfortunately not first
class, being just a compiler-managed rewrite of the code. And yes,
this restriction applies to C# and ECMAScript as well. Which is a
pity, because it means <code class="highlighter-rouge">async</code> code will not be heavy on FP.</p>

<p>Remember my rant from above about the no silver bullet? 😞</p>

<h3 id="42-parallelism" style="font-size: 120%; font-weight: bold;"><b><a href="#h4-2" name="h4-2">4.2.</a> Parallelism<b></b></b></h3>

<p>Just as in <a href="#h3-2">section 3.2</a> those two function calls are
independent of each other, which means that we can call them in
parallel. With <code class="highlighter-rouge">Future</code> this is easier, although its evaluation
semantics can be a little confusing for beginners:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFourInParallel</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="c1">// Future is eagerly evaluated, so this will trigger the
</span>  <span class="c1">// execution of both before the composition happens
</span>  <span class="k">val</span> <span class="n">fa</span> <span class="k">=</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
  <span class="k">val</span> <span class="n">fb</span> <span class="k">=</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>

  <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">fa</span><span class="o">;</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">fb</span><span class="o">)</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
  <span class="c1">// fa.flatMap(a =&gt; fb.map(b =&gt; a + b))
</span><span class="o">}</span>
</code></pre></div>
<p>It can be a little confusing and it catches beginners
off-guard. Because of its execution model, in order to execute things
in parallel, you simply have to initialize those future references
before the composition happens.</p>

<p>An alternative would be to use <code class="highlighter-rouge">Future.sequence</code>, which works for
arbitrary collections:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFourInParallel</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">::</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">::</span> <span class="nc">Nil</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">sum</span><span class="o">)</span>
</code></pre></div>
<p>This too can catch beginners by surprise, because those futures are
going to be executed in parallel only if the collection given to
<code class="highlighter-rouge">sequence</code> is strict (not like Scala's <code class="highlighter-rouge">Stream</code> or some <code class="highlighter-rouge">Iterator</code>). And
the name is sort of a misnomer obviously.</p>

<h3 id="43-recursivity" style="font-size: 120%; font-weight: bold;"><b><a href="#h4-3" name="h4-3">4.3.</a> Recursivity<b></b></b></h3>

<p>The <code class="highlighter-rouge">Future</code> type is entirely safe for recursive operations (because
of the reliance on the <code class="highlighter-rouge">ExecutionContext</code> for executing callbacks). So
retrying the sample in <a href="#h3-3">section 3.3</a>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">mapBoth</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">fb</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span><span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span><span class="o">)</span>
  <span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>

  <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">fa</span><span class="o">;</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">fb</span><span class="o">)</span> <span class="k">yield</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span>
<span class="o">}</span>

<span class="k">def</span> <span class="n">sequence</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span>
  <span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>

  <span class="k">val</span> <span class="n">seed</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="n">list</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">seed</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">f</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="n">l</span> <span class="k">&lt;-</span> <span class="n">acc</span><span class="o">;</span> <span class="n">a</span> <span class="k">&lt;-</span> <span class="n">f</span><span class="o">)</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">::</span> <span class="n">l</span><span class="o">)</span>
    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span>
<span class="o">}</span>

<span class="c1">// Invocation
</span><span class="o">{</span>
  <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

  <span class="n">sequence</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">30</span><span class="o">))).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
  <span class="c1">// =&gt; List(20, 40, 60)
</span><span class="o">}</span>
</code></pre></div>
<p>And this time we get no <code class="highlighter-rouge">StackOverflowError</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="mf">0.</span><span class="n">until</span><span class="o">(</span><span class="mi">10000</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">).</span><span class="n">toList</span>
<span class="n">sequence</span><span class="o">(</span><span class="n">list</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Sum: ${r.sum}"</span><span class="o">))</span>
<span class="c1">//=&gt; Sum: 99990000
</span></code></pre></div>
<h3 id="44-performance-considerations" style="font-size: 120%; font-weight: bold;"><b><a href="#4-4" name="h4-4">4.4.</a> Performance Considerations<b></b></b></h3>

<p>The trouble with <code class="highlighter-rouge">Future</code> is that each call to <code class="highlighter-rouge">onComplete</code> will use
an <code class="highlighter-rouge">ExecutionContext</code> for execution and in general this means that a
<code class="highlighter-rouge">Runnable</code> is sent in a thread-pool, thus forking a (logical) thread.
If you have CPU-bounded tasks, this implementation detail is actually
a disaster for performance because jumping threads means
<a href="https://en.wikipedia.org/wiki/Context_switch">context switches</a>,
along with the CPU
<a href="https://en.wikipedia.org/wiki/Locality_of_reference">cache locality</a>
being destroyed. Of course, the implementation does have certain optimizations,
like the <code class="highlighter-rouge">flatMap</code> implementation using an internal execution context that's
trampolined, in order to avoid forks when chaining those internal
callbacks, but it's not enough and benchmarking doesn't lie.</p>

<p>Also due to it being memoized means that upon completion the
implementation is forced to execute at least one
<code class="highlighter-rouge">AtomicReference.compareAndSet</code> per producer, plus one <code class="highlighter-rouge">compareAndSet</code>
call per listener registered before the <code class="highlighter-rouge">Future</code> is complete. And such
calls are quite expensive, all because we need memoization that plays
well with multithreading.</p>

<p>In other words if you want to exploit your CPU to its fullest for CPU-bound
tasks, then working with futures and promises is not such a good idea.</p>

<p>If you want to see how Scala's <code class="highlighter-rouge">Future</code> implementation compares with
<code class="highlighter-rouge">Task</code>, see the following
<a href="https://github.com/rossabaker/benchmarks/pull/4">recent benchmark</a>:</p>

<div class="highlight"><pre class="highlight plaintext"><code>[info] Benchmark                   (size)   Mode  Cnt     Score     Error  Units
[info] FlatMap.fs2Apply             10000  thrpt   20   291.459 ±   6.321  ops/s
[info] FlatMap.fs2Delay             10000  thrpt   20  2606.864 ±  26.442  ops/s
[info] FlatMap.fs2Now               10000  thrpt   20  3867.300 ± 541.241  ops/s
[info] FlatMap.futureApply          10000  thrpt   20   212.691 ±   9.508  ops/s
[info] FlatMap.futureSuccessful     10000  thrpt   20   418.736 ±  29.121  ops/s
[info] FlatMap.futureTrampolineEc   10000  thrpt   20   423.647 ±   8.543  ops/s
[info] FlatMap.monixApply           10000  thrpt   20   399.916 ±  15.858  ops/s
[info] FlatMap.monixDelay           10000  thrpt   20  4994.156 ±  40.014  ops/s
[info] FlatMap.monixNow             10000  thrpt   20  6253.182 ±  53.388  ops/s
[info] FlatMap.scalazApply          10000  thrpt   20   188.387 ±   2.989  ops/s
[info] FlatMap.scalazDelay          10000  thrpt   20  1794.680 ±  24.173  ops/s
[info] FlatMap.scalazNow            10000  thrpt   20  2041.300 ± 128.729  ops/s
</code></pre></div>
<p>As you can see the <a href="https://monix.io/docs/2x/eval/task.html">Monix Task</a> destroys
Scala's <code class="highlighter-rouge">Future</code> for CPU-bound tasks.</p>

<p class="extra-info">
<strong>NOTE:</strong> this benchmark is limited, there are still use-cases where
usage of <code class="highlighter-rouge">Future</code> is faster (e.g. the Monix <a href="https://monix.io/docs/2x/reactive/observers.html">Observer</a>
uses <code class="highlighter-rouge">Future</code> for back-pressure for a good reason) and performance is
often not relevant, like when doing I/O, in which case throughput
will not be CPU-bound.
</p>

<h2 id="5-task-scalas-io-monad" style="font-size: 150%; font-weight: bold;"><b><a href="#h5" name="h5">5.</a> Task, Scala's IO Monad<b></b></b></h2>

<p><code class="highlighter-rouge">Task</code> is a data type for controlling possibly lazy &amp; asynchronous computations,
useful for controlling side-effects, avoiding nondeterminism and callback-hell.</p>

<p>The <a href="https://monix.io/">Monix</a> library provides a very sophisticated
<a href="https://monix.io/docs/2x/eval/task.html">Task</a> implementation, inspired by the
<a href="https://github.com/scalaz/scalaz/blob/scalaz-seven/concurrent/src/main/scala/scalaz/concurrent/Task.scala">Task in Scalaz</a>.
Same concept, different implementation.</p>

<p class="extra-info">
The <code class="highlighter-rouge">Task</code> type is also inspired by <a href="https://wiki.haskell.org/IO_inside">Haskell's IO monad</a>,
being in this author's opinion the true <code class="highlighter-rouge">IO</code> type for Scala.
<br><br>
This is a matter of debate, as Scalaz also exposes a separate <code class="highlighter-rouge">IO</code> type
that only deals with synchronous execution. The Scalaz <code class="highlighter-rouge">IO</code> is not async, which
means that it doesn't tell the whole story, because on top of the JVM you need
to represent async computations somehow. In Haskell on the other hand you have
the <code class="highlighter-rouge">Async</code> type which is converted to <code class="highlighter-rouge">IO</code>, possibly managed by the runtime
(green-threads and all).
<br><br>
On the JVM, with the Scalaz implementation, we can't represent async
computations with <code class="highlighter-rouge">IO</code> and without blocking threads on evaluation, which is
something to avoid, because
<a href="https://monix.io/docs/2x/best-practices/blocking.html">blocking threads is error prone</a>.
</p>

<p>In summary the <code class="highlighter-rouge">Task</code> type:</p>

<ul>
  <li>models lazy &amp; asynchronous evaluation</li>
  <li>models a producer pushing only one value to one or multiple consumers</li>
  <li>it is lazily evaluated, so compared with <code class="highlighter-rouge">Future</code> it doesn’t trigger the execution, or any effects until <code class="highlighter-rouge">runAsync</code>
</li>
  <li>it is not memoized by default on evaluation, but the Monix <code class="highlighter-rouge">Task</code> can be</li>
  <li>doesn’t necessarily execute on another logical thread</li>
</ul>

<p>Specific to the Monix implementation:</p>

<ul>
  <li>allows for cancelling of a running computation</li>
  <li>never blocks any threads in its implementation</li>
  <li>does not expose any API calls that can block threads</li>
  <li>all async operations are stack safe</li>
</ul>

<p>A visual representation of where <code class="highlighter-rouge">Task</code> sits in the design space:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Eager</th>
      <th style="text-align: center">Lazy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><strong>Synchronous</strong></td>
      <td style="text-align: center">A</td>
      <td style="text-align: center">() =&gt; A</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">
<a href="https://monix.io/docs/2x/eval/coeval.html">Coeval[A]</a>, <a href="https://github.com/scalaz/scalaz/blob/scalaz-seven/effect/src/main/scala/scalaz/effect/IO.scala">IO[A]</a>
</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>Asynchronous</strong></td>
      <td style="text-align: center">(A =&gt; Unit) =&gt; Unit</td>
      <td style="text-align: center">(A =&gt; Unit) =&gt; Unit</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center">Future[A]</td>
      <td style="text-align: center"><a href="https://monix.io/docs/2x/eval/task.html">Task[A]</a></td>
    </tr>
  </tbody>
</table>

<h3 id="51-sequencing" style="font-size: 120%; font-weight: bold;"><b><a href="#h5-1" name="h5-1">5.1.</a> Sequencing<b></b></b></h3>

<p>Redefining our function from <a href="#h3">section 3</a> in terms of <code class="highlighter-rouge">Task</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">monix.eval.Task</span>

<span class="k">def</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Task</span><span class="o">(</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>

<span class="c1">// Usage
</span><span class="o">{</span>
  <span class="c1">// Our ExecutionContext needed on evaluation
</span>  <span class="k">import</span> <span class="nn">monix.execution.Scheduler.Implicits.global</span>

  <span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
  <span class="c1">//=&gt; Result: 40
</span><span class="o">}</span>
</code></pre></div>
<p>The code seems to be almost the same as the <code class="highlighter-rouge">Future</code> version in
<a href="#h4-1">section 4.1</a>, the only difference is that our <code class="highlighter-rouge">timesTwo</code>
function no longer takes an <code class="highlighter-rouge">ExecutionContext</code> as a parameter.
This is because <code class="highlighter-rouge">Task</code> references are lazy, being like functions,
so nothing gets printed until the call to <code class="highlighter-rouge">foreach</code> which forces
the evaluation to happen. It is there that we need a
<a href="https://monix.io/docs/2x/execution/scheduler.html">Scheduler</a>,
which is Monix's enhanced <code class="highlighter-rouge">ExecutionContext</code>.</p>

<p>Now to do sequencing like in <a href="#h3-1">section 3.1</a>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">);</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>

<span class="c1">// Usage
</span><span class="o">{</span>
  <span class="c1">// Our ExecutionContext needed on evaluation
</span>  <span class="k">import</span> <span class="nn">monix.execution.Scheduler.Implicits.global</span>

  <span class="n">timesFour</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">result</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $result"</span><span class="o">)</span> <span class="o">}</span>
  <span class="c1">//=&gt; Result: 80
</span><span class="o">}</span>
</code></pre></div>
<p>And just like with the <code class="highlighter-rouge">Future</code> type, that "<em>for comprehension</em>" magic
is translated by the Scala compiler to nothing more than calls to
<code class="highlighter-rouge">flatMap</code> and <code class="highlighter-rouge">map</code>, literally equivalent with:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span> <span class="n">a</span> <span class="k">=&gt;</span>
    <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span> <span class="n">b</span> <span class="k">=&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>
<h3 id="52-parallelism" style="font-size: 120%; font-weight: bold;"><b><a href="#h5-2" name="h5-2">5.2.</a> Parallelism<b></b></b></h3>

<p>The story for <code class="highlighter-rouge">Task</code> and parallelism is better than with <code class="highlighter-rouge">Future</code>, because
<code class="highlighter-rouge">Task</code> allows fine-grained control when forking tasks, while trying
to execute transformations (e.g. <code class="highlighter-rouge">map</code>, <code class="highlighter-rouge">flatMap</code>) on the current thread
and call-stack, thus preserving cache locality and avoiding context
switches for what is in essence sequential work.</p>

<p>But first, translating the sample using <code class="highlighter-rouge">Future</code> does not work:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// BAD SAMPLE (for achieving parallelism, as this will be sequential)
</span><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="c1">// Will not trigger execution b/c Task is lazy
</span>  <span class="k">val</span> <span class="n">fa</span> <span class="k">=</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
  <span class="k">val</span> <span class="n">fb</span> <span class="k">=</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">)</span>
  <span class="c1">// Evaluation will be sequential b/c of laziness
</span>  <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">fa</span><span class="o">;</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">fb</span><span class="o">)</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="o">}</span>
</code></pre></div>
<p>In order to achieve parallelism <code class="highlighter-rouge">Task</code> requires you to be explicit about it:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">timesFour</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Task</span><span class="o">.</span><span class="n">mapBoth</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="n">n</span><span class="o">))(</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">)</span>
</code></pre></div>
<p>Oh, does <code class="highlighter-rouge">mapBoth</code> seem familiar? If those two tasks fork threads on
execution, then they will get executed in parallel as <code class="highlighter-rouge">mapBoth</code> starts
them both at the same time.</p>

<h3 id="53-recursivity" style="font-size: 120%; font-weight: bold;"><b><a href="#h5-3" name="h5-3">5.3.</a> Recursivity<b></b></b></h3>

<p><code class="highlighter-rouge">Task</code> is recursive and stack-safe (in <code class="highlighter-rouge">flatMap</code>) and incredibly efficient, being powered
by an internal trampoline. You can checkout this cool paper by Rúnar Bjarnason on
<a href="http://blog.higher-order.com/assets/trampolines.pdf">Stackless Scala with Free Monads</a>
for getting a hint on how <code class="highlighter-rouge">Task</code> got implemented so efficiently.</p>

<p>The <code class="highlighter-rouge">sequence</code> implementation looks similar with the one for <code class="highlighter-rouge">Future</code>
in <a href="#h4-3">section 4.3</a>, except that you can see the laziness in
the signature of <code class="highlighter-rouge">sequence</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">sequence</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Task</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">seed</span> <span class="k">=</span> <span class="nc">Task</span><span class="o">.</span><span class="n">now</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="n">list</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">seed</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">f</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="k">for</span> <span class="o">(</span><span class="n">l</span> <span class="k">&lt;-</span> <span class="n">acc</span><span class="o">;</span> <span class="n">a</span> <span class="k">&lt;-</span> <span class="n">f</span><span class="o">)</span> <span class="k">yield</span> <span class="n">a</span> <span class="o">::</span> <span class="n">l</span><span class="o">)</span>
    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span>
<span class="o">}</span>

<span class="c1">// Invocation
</span><span class="o">{</span>
  <span class="c1">// Our ExecutionContext needed on evaluation
</span>  <span class="k">import</span> <span class="nn">monix.execution.Scheduler.Implicits.global</span>

  <span class="n">sequence</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">timesTwo</span><span class="o">(</span><span class="mi">10</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">20</span><span class="o">),</span> <span class="n">timesTwo</span><span class="o">(</span><span class="mi">30</span><span class="o">))).</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
  <span class="c1">// =&gt; List(20, 40, 60)
</span><span class="o">}</span>
</code></pre></div>
<h2 id="6-functional-programming-and-type-classes" style="font-size: 150%; font-weight: bold;"><b><a href="#h6" name="h6">6.</a> Functional Programming and Type-classes<b></b></b></h2>

<p>When working with well grown functions such as <code class="highlighter-rouge">map</code>, <code class="highlighter-rouge">flatMap</code> and <code class="highlighter-rouge">mapBoth</code>,
we no longer care that underlying it all is an "<code class="highlighter-rouge">(A =&gt; Unit) =&gt; Unit</code>", because these
functions are, assuming lawfulness, pure and referentially transparent.
This means we can reason about them and their result, divorced from their
surrounding context.</p>

<p>This is the great achievement of Haskell's <code class="highlighter-rouge">IO</code>. Haskell does not "fake" side-effects,
as functions returning <code class="highlighter-rouge">IO</code> values are literally pure, the side-effects being
pushed at the edges of the program where they belong. And we can say the same
thing about <code class="highlighter-rouge">Task</code>. Well, for <code class="highlighter-rouge">Future</code> it's more complicated given its eager
nature, but working with <code class="highlighter-rouge">Future</code> is not bad either.</p>

<p>And can we build interfaces that abstract over such types as <code class="highlighter-rouge">Task</code>, <code class="highlighter-rouge">Future</code>,
<code class="highlighter-rouge">Coeval</code>, <code class="highlighter-rouge">Eval</code>, <code class="highlighter-rouge">IO</code>, <code class="highlighter-rouge">Id</code>, <code class="highlighter-rouge">Observable</code> and others?</p>

<p>Yes we can, we've already seen that <code class="highlighter-rouge">flatMap</code> describes sequencing, while
<code class="highlighter-rouge">mapBoth</code> describes parallelism. But we can't describe them with classic
OOP interfaces, for one because due to the covariance and contravariance rules of
<code class="highlighter-rouge">Function1</code> parameters we'd lose type info in <code class="highlighter-rouge">flatMap</code> (unless you use
F-bounded polymorphic types, which are more suitable for implementation reuse and
aren't available in other OOP languages),
but also because we need to describe a data constructor that can't be a
method (i.e. OOP subtyping applies to instances and not whole classes).</p>

<p>Fortunately Scala is one of the very few languages capable of higher kinded
types and with the ability to encode
<a href="https://en.wikipedia.org/wiki/Type_class">type-classes</a>, which means we've got
everything needed to port concepts from Haskell 😄</p>

<p class="extra-info">
<strong>Author's Rant:</strong> The dreaded <code class="highlighter-rouge">Monad</code>, <code class="highlighter-rouge">Applicative</code> and <code class="highlighter-rouge">Functor</code> words
strike fear in the hearts of the unfaithful, having given rise to the belief
that they are  "academic" notions disconnected from real-world concerns,
with book authors going to great length to avoid using these words, which
includes Scala's API documentation and official tutorials.
<br><br>
But this is a disservice to both the Scala language and its users.
In other languages they are only design patterns that are hard to explain
primarily because they can't be expressed as types. You can count the
languages having this expressive capability with one hand. And users suffer
because in case of trouble they don't know how to search for existing
literature on the subject, having been deprived of learning
the correct jargon.
<br><br>
I also feel this is a flavor of
<a href="https://en.wikipedia.org/wiki/Anti-intellectualism">anti-intellectualism</a>,
as usual born out of fear of the unknown. You can see it coming from people
that really know what they are doing, as none of us is immune. For example Java's
<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional</a>
type violates the functor laws (e.g. <code class="highlighter-rouge">opt.map(f).map(g) != opt.map(f andThen g)</code>),
in Swift <code class="highlighter-rouge">5 == Some(5)</code> which is preposterous and good luck explaining to
people that <code class="highlighter-rouge">Some(null)</code> actually makes sense for as long as <code class="highlighter-rouge">null</code> is a valid
value of <code class="highlighter-rouge">AnyRef</code> and because otherwise you can't define <code class="highlighter-rouge">Applicative[Option]</code>.
</p>

<h3 id="61-monad-sequencing-and-recursivity" style="font-size: 120%; font-weight: bold;"><b><a href="#h6-1" name="h6-1">6.1.</a> Monad (Sequencing and Recursivity)<b></b></b></h3>

<p>This article is not about explaining Monads. There are other great articles
for that. But if you're looking to build an intuition, here's another one: in the
context of data types such as <code class="highlighter-rouge">Future</code> or <code class="highlighter-rouge">Task</code>, Monads describe sequencing
of operations and is the <em>only reliable</em> way to ensure ordering.</p>

<blockquote>
  <p>"<em>Observation: programmers doing concurrency with imperative languages
are tripped by the unchallenged belief that ";" defines sequencing.</em>"
– <a href="https://twitter.com/shipilev/status/822004316605206529">Aleksey Shipilëv</a></p>
</blockquote>

<p>A simple encoding of the <code class="highlighter-rouge">Monad</code> type in Scala:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// We shouldn't need to do this :-(
</span><span class="k">import</span> <span class="nn">scala.language.higherKinds</span>

<span class="k">trait</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="o">{</span>
  <span class="cm">/** Constructor (said to lift a value `A` in the `F[A]`
    * monadic context). Also part of `Applicative`, see below.
    */</span>
  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>

  <span class="cm">/** FTW */</span>
  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span>
<span class="o">}</span>
</code></pre></div>
<p>And providing an implementation for <code class="highlighter-rouge">Future</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.concurrent._</span>

<span class="c1">// Supplying an instance for Future isn't clean, ExecutionContext needed
</span><span class="k">class</span> <span class="nc">FutureMonad</span><span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">Future</span><span class="o">]</span> <span class="o">{</span>

  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span>
    <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>

  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
    <span class="n">fa</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">f</span><span class="o">)</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">FutureMonad</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">def</span> <span class="n">instance</span><span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">FutureMonad</span> <span class="o">=</span>
    <span class="k">new</span> <span class="nc">FutureMonad</span>
<span class="o">}</span>
</code></pre></div>
<p>This is really powerful stuff. We can now describe a generic function
that works with <code class="highlighter-rouge">Task</code>, <code class="highlighter-rouge">Future</code>, <code class="highlighter-rouge">IO</code>, whatever, although it would be
great if the <code class="highlighter-rouge">flatMap</code> operation is stack-safe:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="cm">/** Calculates the N-th number in a Fibonacci series. */</span>
<span class="k">def</span> <span class="n">fib</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]](</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">a</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span>
    <span class="n">F</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="o">{</span> <span class="n">n</span> <span class="k">=&gt;</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="n">b</span><span class="o">)</span>
      <span class="k">else</span> <span class="n">loop</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">)</span>
    <span class="o">}</span>

  <span class="n">loop</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="nc">BigInt</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="nc">BigInt</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
<span class="o">}</span>

<span class="c1">// Usage:
</span><span class="o">{</span>
  <span class="c1">// Needed in scope
</span>  <span class="k">import</span> <span class="nn">FutureMonad.instance</span>
  <span class="k">import</span> <span class="nn">scala.concurrent.ExecutionContext.Implicits.global</span>

  <span class="c1">// Invocation
</span>  <span class="n">fib</span><span class="o">[</span><span class="kt">Future</span><span class="o">](</span><span class="mi">40</span><span class="o">).</span><span class="n">foreach</span><span class="o">(</span><span class="n">r</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Result: $r"</span><span class="o">))</span>
  <span class="c1">//=&gt; Result: 102334155
</span><span class="o">}</span>
</code></pre></div>
<p class="extra-info">
<strong>PRO-TIP:</strong> this is just a toy example. For getting serious,
see <a href="http://typelevel.org/cats/">Typelevel's Cats</a>
</p>

<h3 id="62-applicative-parallelism" style="font-size: 120%; font-weight: bold;"><b><a href="#h6-2" name="h6-2">6.2.</a> Applicative (Parallelism)<b></b></b></h3>

<p>Monads define sequencing of operations, but sometimes we want to compose
the results of computations that are independent of each other,
that can be evaluated at the same time, possibly in parallel.
There's also a case to be made that applicatives are more composable
than monads 😏</p>

<p>Let's expand our mini Typeclassopedia to put on your wall:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Functor</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="o">{</span>
  <span class="cm">/** I hope we are all familiar with this one. */</span>
  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">Applicative</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="nc">extends</span> <span class="nc">Functor</span><span class="o">[</span><span class="kt">F</span><span class="o">]</span> <span class="o">{</span>
  <span class="cm">/** Constructor (lifts a value `A` in the `F[A]` applicative context). */</span>
  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>

  <span class="cm">/** Maps over two references at the same time.
    *
    * In other implementations the applicative operation is `ap`,
    * but `map2` is easier to understand.
    */</span>
  <span class="k">def</span> <span class="n">map2</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">fb</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span><span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="nc">extends</span> <span class="nc">Applicative</span><span class="o">[</span><span class="kt">F</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span>
<span class="o">}</span>
</code></pre></div>
<p>And to expand our <code class="highlighter-rouge">Future</code> implementation:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Supplying an instance for Future isn't clean, ExecutionContext needed
</span><span class="k">class</span> <span class="nc">FutureMonad</span><span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">Future</span><span class="o">]</span> <span class="o">{</span>

  <span class="k">def</span> <span class="n">pure</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span>
    <span class="nc">Future</span><span class="o">.</span><span class="n">successful</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>

  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span>
    <span class="n">fa</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">f</span><span class="o">)</span>

  <span class="k">def</span> <span class="n">map2</span><span class="o">[</span><span class="kt">A</span>,<span class="kt">B</span>,<span class="kt">R</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">fb</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span><span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">R</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">R</span><span class="o">]</span> <span class="k">=</span>
    <span class="c1">// For Future there's no point in supplying an implementation that's
</span>    <span class="c1">// not based on flatMap, but that's not the case for Task ;-)
</span>    <span class="k">for</span> <span class="o">(</span><span class="n">a</span> <span class="k">&lt;-</span> <span class="n">fa</span><span class="o">;</span> <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">fb</span><span class="o">)</span> <span class="k">yield</span> <span class="n">f</span><span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">FutureMonad</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">def</span> <span class="n">instance</span><span class="o">(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">FutureMonad</span> <span class="o">=</span>
    <span class="k">new</span> <span class="nc">FutureMonad</span>
<span class="o">}</span>
</code></pre></div>
<p>So we can now define generic functions based on <code class="highlighter-rouge">Applicative</code> which is going
to work for <code class="highlighter-rouge">Future</code>, <code class="highlighter-rouge">Task</code>, etc:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">def</span> <span class="n">sequence</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]])</span>
  <span class="o">(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">Applicative</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>

  <span class="k">val</span> <span class="n">seed</span> <span class="k">=</span> <span class="n">F</span><span class="o">.</span><span class="n">pure</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="n">empty</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
  <span class="k">val</span> <span class="n">r</span> <span class="k">=</span> <span class="n">list</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">seed</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">F</span><span class="o">.</span><span class="n">map2</span><span class="o">(</span><span class="n">acc</span><span class="o">,</span><span class="n">e</span><span class="o">)((</span><span class="n">l</span><span class="o">,</span><span class="n">a</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span> <span class="o">::</span> <span class="n">l</span><span class="o">))</span>
  <span class="n">F</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">r</span><span class="o">)(</span><span class="k">_</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div>
<p class="extra-info">
<strong>PRO-TIP:</strong> worth repeating, this is just a toy example. For getting serious,
see <a href="http://typelevel.org/cats/">Typelevel's Cats</a>
</p>

<h3 id="63-can-we-define-a-type-class-for-async-evaluation" style="font-size: 120%; font-weight: bold;"><b><a href="#h6-3" name="h6-3">6.3.</a> Can We Define a Type-class for Async Evaluation?<b></b></b></h3>

<p>Missing from above is a way to actually trigger an evaluation and
get a value out. Thinking of Scala's <code class="highlighter-rouge">Future</code>, we want a way to abstract
over <code class="highlighter-rouge">onComplete</code>. Thinking of Monix's <code class="highlighter-rouge">Task</code> we want to abstract over <code class="highlighter-rouge">runAsync</code>.
Thinking of Haskell's and Scalaz's <code class="highlighter-rouge">IO</code>, we want a way to abstract over
<code class="highlighter-rouge">unsafePerformIO</code>.</p>

<p>The <a href="https://github.com/functional-streams-for-scala/fs2/">FS2</a> library has
defined a type-class called <a href="https://github.com/functional-streams-for-scala/fs2/blob/series/1.0/core/shared/src/main/scala/fs2/util/Effect.scala">Effect</a> that goes like this (simplified):</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Effect</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]]</span> <span class="nc">extends</span> <span class="nc">Monad</span><span class="o">[</span><span class="kt">F</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">unsafeRunAsync</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">])(</span><span class="n">cb</span><span class="k">:</span> <span class="kt">Try</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>This looks like our initial <code class="highlighter-rouge">Async</code> type, very much similar with
<code class="highlighter-rouge">Future.onComplete</code>, with <code class="highlighter-rouge">Task.runAsync</code> and could be applied to
<code class="highlighter-rouge">IO.unsafePerformIO</code>.</p>

<p>However, this is not a real type-class because:</p>

<ol>
  <li>it is lawless and while that's not enough to disqualify it (after all,
useful lawless type-classes like <code class="highlighter-rouge">Show</code> exist), the bigger problem is …</li>
  <li>as shown in <a href="#h3-3">section 3.3</a>, in order to avoid the Wrath of <code class="highlighter-rouge">StackOverflowError</code>,
we need some sort of execution context or thread-pool that can execute tasks
asynchronously without blowing up the stack</li>
</ol>

<p>And such an execution context is different from implementation to implementation.
Java will use <code class="highlighter-rouge">Executor</code>, the Scala <code class="highlighter-rouge">Future</code> uses <code class="highlighter-rouge">ExecutionContext</code>, Monix
uses <code class="highlighter-rouge">Scheduler</code> which is an enhanced <code class="highlighter-rouge">ExecutionContext</code>, FS2 and Scalaz
use <code class="highlighter-rouge">Strategy</code> which wraps an <code class="highlighter-rouge">Executor</code> for forking threads and don't inject
a context when their <code class="highlighter-rouge">unsafePerformIO</code> or <code class="highlighter-rouge">runAsync</code> gets called
(which is why many of the Scalaz combinators are in fact unsafe), etc.</p>

<p>We could apply the same strategy as with <code class="highlighter-rouge">Future</code>, to build the type-class
instance by taking a <code class="highlighter-rouge">implicit whatever: Context</code> from the scope. But that's
a little awkward and inefficient. It's also telling that we can't define
<code class="highlighter-rouge">flatMap</code> only in terms of <code class="highlighter-rouge">Effect.unsafePerformIO</code>, not without that
execution context. And if we can't do it, then the type should probably
not inherit from <code class="highlighter-rouge">Monad</code> because it's not necessarily a <code class="highlighter-rouge">Monad</code>.</p>

<p>So I'm personally not sure - if you have suggestions for what should be
introduced in <a href="http://typelevel.org/cats">Cats</a>, I'd love to hear them.</p>

<p>I do hope you enjoyed this thought experiment, designing things is fun 😎</p>

<h2 id="7-picking-the-right-tool" style="font-size: 150%; font-weight: bold;"><b><a href="#h7" name="h7">7.</a> Picking the Right Tool<b></b></b></h2>

<p>Some abstractions are more general purpose than others and personally
I think the mantra of "<em>picking the right tool for the job</em>" is
overused to defend poor choices.</p>

<p>That said, there's this wonderful presentation by Rúnar Bjarnason called
<a href="https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate, Liberties Constrain</a>
that really drives the point home with concurrency abstractions at least.</p>

<p>As said, there is no silver bullet that can be generally applied for dealing with concurrency.
The more high-level the abstraction, the less scope it has in solving issues. But the less scope
and power it has, the simpler and more composable the model is.
For example many developers in the Scala community are overusing Akka Actors -
which is a great library, but not when misapplied. Like don't use an
Akka <code class="highlighter-rouge">Actor</code> when a <code class="highlighter-rouge">Future</code> or a <code class="highlighter-rouge">Task</code> would do. Ditto for other abstractions,
like the <code class="highlighter-rouge">Observable</code> pattern in Monix and ReactiveX.</p>

<p>Also learn by heart these 2 very simple rules:</p>

<ol>
  <li>avoid dealing with callbacks, threads and locks, because they are very error
prone and not composable at all</li>
  <li>avoid concurrency like the plague it is</li>
</ol>

<p>And let me tell you, concurrency experts are first of all experts in
avoiding concurrency 💀</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/01/16/iterator.html</id>
   <title>Fixing scala.collection.Iterator</title>
   <link href="https://alexn.org/blog/2017/01/16/iterator.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-01-15T22:00:00+00:00</published>
   <updated>2017-01-15T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2017/scala-icon.png" class="right" width="100" alt="Scala icon" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 100px; " align="right"></p>

<p>In my previous article I talked about
<a href="/blog/2017/01/13/traversable.html">getting rid of Traversable</a> because the
<code class="highlighter-rouge">Iterable</code> and <code class="highlighter-rouge">Iterator</code> duo is enough for Scala's standard library.
But the <code class="highlighter-rouge">Iterator</code> interface can also use some improvements.</p>

<p>As a reminder, the <code class="highlighter-rouge">Iterator</code> interface is something like this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">hasNext</span><span class="k">:</span> <span class="kt">Boolean</span>
  <span class="k">def</span> <span class="n">next</span><span class="o">()</span><span class="k">:</span> <span class="kt">A</span>
<span class="o">}</span>
</code></pre></div>
<p>It's a destructive interface that is consumed for as long as you call <code class="highlighter-rouge">next()</code>,
it obviously has "identity" and you're supposed to use it like this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
<span class="k">var</span> <span class="n">sum</span> <span class="k">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">sum</span> <span class="o">+=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">next</span><span class="o">()</span>
<span class="o">}</span>
</code></pre></div>
<h2 id="problem-1-both-methods-hasnext-next-are-side-effecting" style="font-size: 150%; font-weight: bold;"><b>Problem 1: Both methods (hasNext, next) are side-effecting<b></b></b></h2>

<p>You could say that <code class="highlighter-rouge">hasNext</code> is not supposed to move the internal
cursor / pointer / index and thus it shouldn't be side-effecting, but
that's not true, because in many cases the only way to know if there
is a next element to be served is to trigger a side-effecting read.</p>

<p>And so the problem is that both <code class="highlighter-rouge">hasNext</code> and <code class="highlighter-rouge">next()</code> are side-effecting and
in my opinion the result of the wrong method is getting cached. When you work with
Functional Programming for a while, you start noticing when APIs have their
side-effects screwed ;-)</p>

<p>We can't really blame Scala though. This interface has been imported from
Java and kept similar probably for remaining familiar.</p>

<p>But let me illustrate by building an iterator for reading an <code class="highlighter-rouge">InputStream</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">IteratorFromStream</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">InputStream</span><span class="o">,</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span>

  <span class="k">private</span> <span class="k">val</span> <span class="n">buffer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">chunkSize</span><span class="o">)</span>
  <span class="k">private</span> <span class="k">var</span> <span class="n">chunk</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="k">_</span>
  <span class="k">private</span> <span class="k">var</span> <span class="n">hasChunk</span> <span class="k">=</span> <span class="kc">false</span>

  <span class="k">def</span> <span class="n">hasNext</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">hasChunk</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">val</span> <span class="n">len</span> <span class="k">=</span> <span class="n">in</span><span class="o">.</span><span class="n">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">chunk</span> <span class="k">=</span> <span class="n">util</span><span class="o">.</span><span class="nc">Arrays</span><span class="o">.</span><span class="n">copyOf</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">len</span><span class="o">)</span>
        <span class="n">hasChunk</span> <span class="k">=</span> <span class="kc">true</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">in</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">hasChunk</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">next</span><span class="o">()</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">hasNext</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">val</span> <span class="n">ref</span> <span class="k">=</span> <span class="n">chunk</span>
      <span class="n">chunk</span> <span class="k">=</span> <span class="kc">null</span> <span class="c1">// GC purposes
</span>      <span class="n">hasChunk</span> <span class="k">=</span> <span class="kc">false</span>
      <span class="n">ref</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">NoSuchElementException</span><span class="o">(</span><span class="s">"InputStream is empty"</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Not that particularly exciting and you can see how <code class="highlighter-rouge">next()</code> has to duplicate
the work of <code class="highlighter-rouge">hasNext</code> and that <code class="highlighter-rouge">hasNext</code> itself is side-effecting, because
we have to read from the <code class="highlighter-rouge">InputStream</code> before being able to answer that question.</p>

<p>We can do better and we don't have to be original about it.
Behold the alternative inspired by
<a href="https://msdn.microsoft.com/en-us/library/system.collections.ienumerator(v=vs.110).aspx">IEnumerator from C#</a>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="c1">// Side-effecting, moves the cursor
</span>  <span class="k">def</span> <span class="n">moveNext</span><span class="o">()</span><span class="k">:</span> <span class="kt">Boolean</span>

  <span class="c1">// Not side-effecting, can be called multiple times
</span>  <span class="k">def</span> <span class="n">current</span><span class="k">:</span> <span class="kt">A</span>
<span class="o">}</span>
</code></pre></div>
<p>Usage is straightforward:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">val</span> <span class="n">cursor</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
<span class="k">var</span> <span class="n">sum</span> <span class="k">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="n">moveNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="n">sum</span> <span class="o">+=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">current</span>
<span class="o">}</span>
</code></pre></div>
<p>This interface feels more natural to developers because "moving" the
cursor is the side-effect, not reading the current value.
And here's how the above implementation changes:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">IteratorFromStream</span><span class="o">(</span><span class="n">in</span><span class="k">:</span> <span class="kt">InputStream</span><span class="o">,</span> <span class="n">chunkSize</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]]</span> <span class="o">{</span>

  <span class="k">private</span> <span class="k">val</span> <span class="n">buffer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">](</span><span class="n">chunkSize</span><span class="o">)</span>
  <span class="k">private</span> <span class="k">var</span> <span class="n">chunk</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="k">_</span>

  <span class="k">def</span> <span class="n">moveNext</span><span class="o">()</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">len</span> <span class="k">=</span> <span class="n">in</span><span class="o">.</span><span class="n">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">)</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">chunk</span> <span class="k">=</span> <span class="n">util</span><span class="o">.</span><span class="nc">Arrays</span><span class="o">.</span><span class="n">copyOf</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">len</span><span class="o">)</span>
      <span class="kc">true</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
      <span class="n">chunk</span> <span class="k">=</span> <span class="kc">null</span>
      <span class="n">in</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
      <span class="kc">false</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">current</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">chunk</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="nc">NoSuchElementException</span><span class="o">(</span><span class="s">"current"</span><span class="o">)</span>
    <span class="n">chunk</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Notice how this <em>simplifies</em> things on the implementation side as well.</p>

<p><strong>UPDATE:</strong> M.Odersky points out in the comments that the standard library has a
<a href="http://www.scala-lang.org/api/current/scala/collection/BufferedIterator.html">BufferedIterator</a>
implementation that caches the current <code class="highlighter-rouge">head</code> and can be used for convenience.</p>

<h2 id="problem-2-iterator-comes-with-operations-attached" style="font-size: 150%; font-weight: bold;"><b>Problem 2: Iterator comes with operations attached<b></b></b></h2>

<p>At the beginning I gave you a simplified <code class="highlighter-rouge">Iterator</code> definition, however I lied.
The true <code class="highlighter-rouge">scala.collection.Iterator</code> is closer to this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">package</span> <span class="nn">scala.collection</span>

<span class="k">trait</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">TraversableOnce</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">hasNext</span><span class="k">:</span> <span class="kt">Boolean</span>
  <span class="k">def</span> <span class="n">next</span><span class="o">()</span><span class="k">:</span> <span class="kt">A</span>

  <span class="k">def</span> <span class="n">isTraversableAgain</span> <span class="k">=</span> <span class="kc">false</span>
  <span class="k">def</span> <span class="n">isEmpty</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">!</span><span class="n">hasNext</span>
  <span class="k">def</span> <span class="n">hasDefiniteSize</span> <span class="k">=</span> <span class="n">isEmpty</span>

  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">take</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">slice</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">)</span>
  <span class="k">def</span> <span class="n">drop</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">slice</span><span class="o">(</span><span class="n">from</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">until</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">map</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="o">++[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">that</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">GenTraversableOnce</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">flatMap</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">GenTraversableOnce</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">filter</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">corresponds</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">that</span><span class="k">:</span> <span class="kt">GenTraversableOnce</span><span class="o">[</span><span class="kt">B</span><span class="o">])(</span><span class="n">p</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">withFilter</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">filterNot</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">collect</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">pf</span><span class="k">:</span> <span class="kt">PartialFunction</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">scanLeft</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">B</span><span class="o">)(</span><span class="n">op</span><span class="k">:</span> <span class="o">(</span><span class="kt">B</span><span class="o">,</span> <span class="kt">A</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">scanRight</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">z</span><span class="k">:</span> <span class="kt">B</span><span class="o">)(</span><span class="n">op</span><span class="k">:</span> <span class="o">(</span><span class="kt">A</span><span class="o">,</span> <span class="kt">B</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">takeWhile</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">partition</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">span</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">dropWhile</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">zip</span><span class="o">[</span><span class="kt">B</span><span class="o">](</span><span class="n">that</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">B</span><span class="o">])</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[(</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">)]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">padTo</span><span class="o">[</span><span class="kt">A1</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">len</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">elem</span><span class="k">:</span> <span class="kt">A1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A1</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">zipWithIndex</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[(</span><span class="kt">A</span>, <span class="kt">Int</span><span class="o">)]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">foreach</span><span class="o">[</span><span class="kt">U</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">U</span><span class="o">)</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">forall</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">exists</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">contains</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">find</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">indexWhere</span><span class="o">(</span><span class="n">p</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Boolean</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">indexOf</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">elem</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">buffered</span><span class="k">:</span> <span class="kt">BufferedIterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">grouped</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">size</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">GroupedIterator</span><span class="o">[</span><span class="kt">B</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">copyToArray</span><span class="o">[</span><span class="kt">B</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">](</span><span class="n">xs</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">B</span><span class="o">],</span> <span class="n">start</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">len</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">sameElements</span><span class="o">(</span><span class="n">that</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="k">_</span><span class="o">])</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">toTraversable</span><span class="k">:</span> <span class="kt">Traversable</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">toIterator</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="k">def</span> <span class="n">toStream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
  <span class="c1">// ....
</span><span class="o">}</span>
</code></pre></div>
<p>Well, at this point you should be thinking that this violates the principles of
OOP design. When <code class="highlighter-rouge">Iterator</code> comes with operations like <code class="highlighter-rouge">map</code> and <code class="highlighter-rouge">filter</code>,
that are polymorphic and can be overridden, it is no longer just a minimal
protocol for "<em>iterating over things</em>", but a <em>big, fat interface</em>.</p>

<p>You see, there isn't a single possible implementation for <code class="highlighter-rouge">map</code> or for <code class="highlighter-rouge">take</code>
and by providing such operations with a default implementation the
<code class="highlighter-rouge">Iterator</code> is imposing to users how those operations should behave.
Or more specifically:</p>

<ol>
  <li>these operations have lazy behavior, until overridden in subclasses</li>
  <li>assume that the protocol is set in stone</li>
</ol>

<p>But <code class="highlighter-rouge">Iterator</code> is a fine example of an OOP interface because you can add
restrictions to it. Lo and behold how OOP inheritance is supposed to work:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">CloseableIterable</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Iterable</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">iterator</span><span class="k">:</span> <span class="kt">CloseableIterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">CloseableIterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">with</span> <span class="nc">AutoCloseable</span> <span class="o">{</span>
  <span class="cm">/** Closes this resource, relinquishing any underlying resources. */</span>
  <span class="k">def</span> <span class="n">close</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>BAM, we just invalidated more than 80 operations provided by Scala's <code class="highlighter-rouge">Iterator</code>
and <code class="highlighter-rouge">Iterable</code>. Are you going to override them all?</p>

<p>If you say yes, then you don't know what you're getting yourself into,
plus what are you going to do when Scala 2.13 (or whatever the next version is)
comes with new operators that need to be overridden? Are you going to remember
to do it? It's a hard problem.</p>

<p>I don't mind having implementations of <code class="highlighter-rouge">map</code> and <code class="highlighter-rouge">filter</code> for <code class="highlighter-rouge">Iterator</code>, but
Scala lacks a minimal interface that provides just the raw protocol.
There is value in simplicity. Notice Java's <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html">Iterator</a>,
notice C#'s <a href="https://msdn.microsoft.com/en-us/library/system.collections.ienumerator(v=vs.110).aspx">IEnumerator</a>, notice how they don't come with operators attached.
Instead, for C# at least, you can import
<a href="https://github.com/Reactive-Extensions/Rx.NET">Ix.NET</a> in your project,
which gives you a bunch of extension methods you can work with, no strings attached.
Scala could also use <a href="http://typelevel.org/cats/">type-classes</a> which are
much better than extension methods. But instead what currently happens in
Scala's collection library can be seen as <em>inheritance hell</em>.</p>

<p>Not everything needs <code class="highlighter-rouge">map</code> and <code class="highlighter-rouge">flatMap</code> on it.</p>

<p><strong>UPDATE:</strong> there is now an issue for discussing this at
<a href="https://github.com/scala/collection-strawman/issues/17">collection-strawman/issues/#17</a>.</p>

<h2 id="non-problem-early-termination--resource-handling" style="font-size: 150%; font-weight: bold;"><b>Non-problem: early termination &amp; resource handling<b></b></b></h2>

<p>The <code class="highlighter-rouge">Iterator</code> interface alone is not enough to expose streams linked
to file handles, network sockets or other resources that need to be disposed
when terminated early.</p>

<p>So rookies (also because of problem 2 above) can end up with unconsumed iterators,
creating possible connection leaks, because it's easy:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">iterator</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</code></pre></div>
<p>However I don't view this as being a problem because:</p>

<ol>
  <li>we don't need to do resource handling everywhere</li>
  <li>as demonstrated in the sample with <code class="highlighter-rouge">CloseableIterator</code> above, you can build
proper resource handling on top of <code class="highlighter-rouge">Iterator</code>
</li>
  <li>doing I/O by means of an <code class="highlighter-rouge">Iterator</code> is often a bad idea, given
that <code class="highlighter-rouge">Iterator</code> is not capable of asynchronous boundaries, with
I/O operations often being asynchronous</li>
</ol>

<p>Having a <code class="highlighter-rouge">CloseableIterator</code> in the standard library wouldn't be bad though,
however given the very complex inheritance hierarchy and the traversable
grandparents, I'm afraid to wish for it.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/01/16/iterator.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2017/01/13/traversable.html</id>
   <title>Why scala.collection.Traversable Is Bad Design</title>
   <link href="https://alexn.org/blog/2017/01/13/traversable.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2017-01-12T22:00:00+00:00</published>
   <updated>2017-01-12T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2017/scala-icon.png" class="right" width="200" alt="Scala icon" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p>Given there's a
<a href="https://contributors.scala-lang.org/t/ongoing-work-on-standard-collections-redesign/293">Scala collection redesign</a>
discussion going on, it's a good time to talk about one of my personal pet peeves:
the existence of <a href="http://www.scala-lang.org/api/2.12.1/scala/collection/Traversable.html">Traversable</a>
in the standard library, along with its variants like <code class="highlighter-rouge">TraversableLike</code> and <code class="highlighter-rouge">TraversableOnce</code>.
Apparently this interface is missing in the new design and that's awesome.</p>

<p>It's easy to make API mistakes, we all do it and it's important to
learn from past mistakes, this document serving as a lesson for why
<code class="highlighter-rouge">Traversable</code> is a bad idea.</p>

<p>Claims:</p>

<ol>
  <li>
<code class="highlighter-rouge">Traversable</code> has implicit behavior assumptions that are not visible
in its exposed signature, the API being error prone</li>
  <li>Iterating over a <code class="highlighter-rouge">Traversable</code> has worse performance than <code class="highlighter-rouge">Iterator</code>
</li>
  <li>There exists no <code class="highlighter-rouge">Traversable</code> data type that doesn't admit an efficient
<code class="highlighter-rouge">Iterator</code> implementation, thus <code class="highlighter-rouge">Traversable</code> being completely redundant</li>
</ol>

<p>As a reminder and you can also
<a href="http://docs.scala-lang.org/overviews/collections/trait-traversable.html">read the docs</a>,
the <code class="highlighter-rouge">Traversable</code> is a trait like the following:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Traversable</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">foreach</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>The standard library also has the venerable <code class="highlighter-rouge">Iterable</code> / <code class="highlighter-rouge">Iterator</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Iterable</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">iterator</span><span class="o">()</span><span class="k">:</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">hasNext</span><span class="k">:</span> <span class="kt">Boolean</span>
  <span class="k">def</span> <span class="n">next</span><span class="o">()</span><span class="k">:</span> <span class="kt">A</span>
<span class="o">}</span>
</code></pre></div>
<p>Can you spot the similarities?</p>

<p>You should, because these 2 interfaces are supposed to be
<a href="https://en.wikipedia.org/wiki/Duality_(mathematics)">duals</a>.
So if you think of <code class="highlighter-rouge">Traversable</code> as being defined by that
<code class="highlighter-rouge">foreach</code> function, then <code class="highlighter-rouge">Iterable</code> is that function with
its arrows reversed:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">type</span> <span class="kt">Traversable</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">(</span><span class="n">A</span> <span class="k">=&gt;</span> <span class="o">())</span> <span class="k">=&gt;</span> <span class="o">()</span>

<span class="k">type</span> <span class="kt">Iterable</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="o">(()</span> <span class="k">=&gt;</span> <span class="n">A</span><span class="o">)</span>
</code></pre></div>
<p>Now this is interesting. For one <code class="highlighter-rouge">Traversable</code> is a sort of
inversion of control technique, so instead of having a cursor
that you have to manually advance, you now register a callback to
a function and that callback gets called for you on each element.
This actually frees us from certain <code class="highlighter-rouge">Iterator</code> constraints.
For example with a push-based API we should no longer care when
those function calls happen.</p>

<p>But you should already spot problems with the above
definition. Our <code class="highlighter-rouge">Iterable</code> function signature isn't complete,
this one is:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">type</span> <span class="kt">Iterable</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Iterator</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>

<span class="k">type</span> <span class="kt">Iterator</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span>
</code></pre></div>
<p>Or in other words any <code class="highlighter-rouge">Iterator</code> can:</p>

<ol>
  <li>give us the next element,</li>
  <li>or signal completion or failure</li>
</ol>

<p>This means that the actual dual of <code class="highlighter-rouge">Iterator</code> is:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">type</span> <span class="kt">Observer</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Try</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=&gt;</span> <span class="nc">Unit</span>
</code></pre></div>
<p>Or for those OOP-oriented among us, I give you the <code class="highlighter-rouge">Observer</code>
as championed by <a href="https://github.com/Reactive-Extensions/Rx.NET">Rx.NET</a>,
as the true dual of <code class="highlighter-rouge">Iterator</code>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">-A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
  <span class="k">def</span> <span class="n">onComplete</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span>
  <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">ex</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>(Hello <strong><a href="https://monix.io/">Monix</a></strong> :-))</p>

<p>This matters because <code class="highlighter-rouge">Traversable</code> has <strong>no way to signal completion or failure</strong>,
unless you get a guarantee that all the processing happens synchronously, everything
being over after the invocation of its <code class="highlighter-rouge">foreach</code>.</p>

<p>As an abstraction, this makes it useless when compared with <code class="highlighter-rouge">Iterable</code>
and <code class="highlighter-rouge">Iterator</code>. If you introduce the synchronous execution constraint,
there exists no data type that can implement <code class="highlighter-rouge">Traversable</code> and that doesn't
admit an <code class="highlighter-rouge">Iterator</code> implementation. None.</p>

<p>Even more problematic in my opinion is that this restriction isn't
visible in its API, unless your eyes are trained for it. With
<code class="highlighter-rouge">Iterator.next()</code> whether you want it or not, you have to process things
synchronously, because <em>the signature says so</em>.</p>

<p>Also problematic is <code class="highlighter-rouge">TraversableOnce</code>, which is supposed to be a
traversable that can only be traversed once, like its name says.
We've got this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">TraversableOnce</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">foreach</span><span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">Traversable</span><span class="o">[</span><span class="kt">+A</span><span class="o">]</span> <span class="nc">extends</span> <span class="nc">TraversableOnce</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</code></pre></div>
<p>Besides the name and the inheritance relationship, there is no difference.
This is another problem. Even if the API is effectful/impure, we should still
be able to use types serving as documentation. Contrast with the
<code class="highlighter-rouge">Iterable</code> / <code class="highlighter-rouge">Iterator</code> separation. Iterating over an <code class="highlighter-rouge">Iterator</code> is known to
consume it and you can see this in its API. And the generator/factory part is in
<code class="highlighter-rouge">Iterable</code>, which is good separation of concerns.</p>

<p><code class="highlighter-rouge">Traversable</code> also has worse performance than <code class="highlighter-rouge">Iterator</code>.
The ugly truth is that the JVM hasn't been doing a good job at
inlining that function reference you pass to <code class="highlighter-rouge">foreach</code>. This is called
<a href="http://www.azulsystems.com/blog/cliff/2011-04-04-fixing-the-inlining-problem">the inlining problem</a>,
which happens for megamorphic function calls in hot inner loops.</p>

<p>So there you have it and I hope that along with the redesign we'll get rid
of <code class="highlighter-rouge">Traversable</code>.</p>

<p class="extra-info">
My opinions have been highly influenced by the work of Erik Meijer,
if you want to learn more checkout this presentation:

<a href="https://vimeo.com/98922027">Contravariance is the Dual of Covariance Implies Iterable is the Dual of Observable</a>.
</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2017/01/13/traversable.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2016/11/11/newsblur-bookmarklet.html</id>
   <title>Add to NewsBlur Bookmarklet</title>
   <link href="https://alexn.org/blog/2016/11/11/newsblur-bookmarklet.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2016-11-10T22:00:00+00:00</published>
   <updated>2016-11-10T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Utils]]></category>
   <category><![CDATA[Web]]></category>

   <content type="html"><![CDATA[
   <p>I'm using <a href="https://www.newsblur.com/">NewsBlur.com</a> for consuming RSS
feeds. It's a pretty cool service, however adding a new RSS feed from
iOS proves to be a challenge and the "goodies" section provides no way
for easily adding a bookmarklet for adding a feed.</p>

<p>The iPad itself makes it difficult to add bookmarklets, so here's a
tutorial:</p>

<ol>
  <li>Go to <a href="https://newsblur.com">NewsBlur.com</a> and add it as a bookmark
(click on the box with the arrow in it next to the Safari address bar)</li>
  <li>We need to edit the new bookmark: tap the address bar in Safari
and you should see all bookmarks, press and hold on the new
"NewsBlur.com" bookmark that you created and then tap "<em>Edit</em>"</li>
  <li>Change the title to something like: "<em>Add to NewsBlur</em>"</li>
  <li>Copy/paste the following text for the URL:</li>
</ol>

<textarea readonly style="width:400px;height:100px;max-width:100%;background-color:#f0f0f0;">javascript:(function%20()%20%7Bvar%20l%3Ddocument.location%2B%27%27%3Bif%20(l.match(%2F%5E(%3F%3Ahttps%3F%3A%5B%2F%5D%7B2%7D(%3F%3Awww.)%3F)%3Fnewsblur.com%2Fi))%20alert(%22Cannot%20add%20NewsBlur.com%20itself!%22)%3B%20else%20window.location%20%3D%20%27https%3A%2F%2Fwww.newsblur.com%2F%3Furl%3D%27%2BencodeURIComponent(l)%3B%7D)()%3Bvoid(0)</textarea>

<p>For the desktop you can also drag this link:</p>

<p><a style="display:block;width:200px;padding:10px;background-color:#436592;color:#fff;text-decoration:none;font-weight:bold;" href="javascript:(function%20()%20%7Bvar%20l%3Ddocument.location%2B%27%27%3Bif%20(l.match(%2F%5E(%3F%3Ahttps%3F%3A%5B%2F%5D%7B2%7D(%3F%3Awww.)%3F)%3Fnewsblur.com%2Fi))%20alert(%22Cannot%20add%20NewsBlur.com%20itself!%22)%3B%20else%20window.location%20%3D%20%27https%3A%2F%2Fwww.newsblur.com%2F%3Furl%3D%27%2BencodeURIComponent(l)%3B%7D)()%3Bvoid(0)">
  Add to NewsBlur</a></p>

<p>Here is the unencoded Javascript for your inspection:</p>

<div class="highlight"><pre class="highlight javascript"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">l</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="o">+</span><span class="s1">''</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^</span><span class="se">(?:</span><span class="sr">https</span><span class="se">?</span><span class="sr">:</span><span class="se">[/]{2}(?:</span><span class="sr">www.</span><span class="se">)?)?</span><span class="sr">newsblur.com/i</span><span class="p">))</span> 
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"Cannot add NewsBlur.com itself!"</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="s1">'https://www.newsblur.com/?url='</span> <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span>
<span class="p">})();</span><span class="k">void</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<p>Enjoy!</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2016/11/11/newsblur-bookmarklet.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2016/08/25/monix-task-performance.html</id>
   <title>Monix Task vs Scalaz vs Future, The Benchmark</title>
   <link href="https://alexn.org/blog/2016/08/25/monix-task-performance.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2016-08-24T21:00:00+00:00</published>
   <updated>2016-08-24T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Monix]]></category>
   <category><![CDATA[Scalaz]]></category>
   <category><![CDATA[Typelevel]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2015/monifu-square.png" class="right" width="200" alt="Monifu square" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p>The Monix <a href="https://monix.io/docs/2x/eval/task.html">Task</a> was heavily
inspired by <code class="highlighter-rouge">scalaz.concurrent.Task</code> and by
<code class="highlighter-rouge">scala.concurrent.Future</code>. That's not a secret and I'll be forever
grateful to their authors. I've ran a benchmark and I'm glad to report
that the Monix <a href="https://monix.io/docs/2x/eval/task.html">Task</a> beats
in performance both.</p>

<p>Such results are actually unexpected, because the Monix <code class="highlighter-rouge">Task</code> has to
do tricks in order to be "<em>cancelable</em>", a trait that allows it to
close opened resources when race conditions happen, which really means
extra footwork. But no, right now, it beats both in performance and by
quite the margin.</p>

<p>Details:</p>

<ul>
  <li>Benchmark used is
<a href="https://github.com/monixio/monix/blob/v2.0-RC13/benchmarks/src/main/scala/monix/TaskGatherBenchmark.scala">TaskGatherBenchmark</a>
in the repository</li>
  <li>Monix version: <code class="highlighter-rouge">2.0-RC13</code>
</li>
  <li>Scalaz version: <code class="highlighter-rouge">7.2.4</code>
</li>
  <li>Scala version: <code class="highlighter-rouge">2.11.8</code>
</li>
  <li>Java version: <code class="highlighter-rouge">1.8.0_60</code>
</li>
  <li>OS: OS X El Captain, version <code class="highlighter-rouge">10.11.6</code>
</li>
</ul>

<h3 id="sequence" style="font-size: 120%; font-weight: bold;"><b>Sequence<b></b></b></h3>

<p>The purpose of this test is the performance of <code class="highlighter-rouge">flatMap</code>, or in other
words the performance of the run-loop, on both normal/synchronous
tasks and tasks that are forked in separate (logical) threads. So in
other words:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="nc">Task</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">tasks</span><span class="o">)</span>
</code></pre></div>
<p>Which is translated more or less into this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="n">tasks</span><span class="o">.</span><span class="n">foldLeft</span><span class="o">(</span><span class="n">init</span><span class="o">)((</span><span class="n">acc</span><span class="o">,</span><span class="n">et</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">acc</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">b</span> <span class="k">=&gt;</span> <span class="n">et</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">e</span> <span class="k">=&gt;</span> <span class="n">b</span> <span class="o">+=</span> <span class="n">e</span><span class="o">)))</span>
</code></pre></div>
<p>So for synchronous tasks (that evaluate immediately), and note here
that Scala's <code class="highlighter-rouge">Future</code> is not applicable since <code class="highlighter-rouge">Future</code> is not
trampolined:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Sync</td>
      <td>Sequence</td>
      <td>6716.906</td>
      <td>157.947</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Sync</td>
      <td>Sequence</td>
      <td>3518.888</td>
      <td>167.148</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>And for tasks that fork threads on execution:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>2044.624</td>
      <td>24.852</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1090.355</td>
      <td>15.851</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>S.Future</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1753.614</td>
      <td>20.871</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>As you can see, the Monix <code class="highlighter-rouge">Task</code> has twice the throughput of Scalaz
and fares quite better compared with Scala's standard <code class="highlighter-rouge">Future</code>.</p>

<h3 id="gather" style="font-size: 120%; font-weight: bold;"><b>Gather<b></b></b></h3>

<p>The gather operation would be:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="nc">Task</span><span class="o">.</span><span class="n">gather</span><span class="o">(</span><span class="n">tasks</span><span class="o">)</span>
</code></pre></div>
<p>This works like <code class="highlighter-rouge">sequence</code>, except that the evaluation has non-ordered
effects. What this means is that, if the tasks are forking threads,
then they get executed in parallel.</p>

<p>For synchronous/immediate tasks the numbers are:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Sync</td>
      <td>Gather</td>
      <td>3800.559</td>
      <td>341.509</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Sync</td>
      <td>Gather</td>
      <td>2152.441</td>
      <td>13.569</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>S.Future</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1753.614</td>
      <td>20.871</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>And for forked tasks:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Forked</td>
      <td>Gather</td>
      <td>1396.797</td>
      <td>17.098</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Forked</td>
      <td>Gather</td>
      <td>1014.452</td>
      <td>13.569</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>S.Future</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1753.614</td>
      <td>20.871</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>Including the results of <code class="highlighter-rouge">Future.sequence</code> as well, because <code class="highlighter-rouge">Future</code>
has strict evaluation and it can be used to execute futures in
parallel. The performance of <code class="highlighter-rouge">gather</code> can be worse than
<code class="highlighter-rouge">Future.sequence</code>, because of the execution model. But if it executes
tasks that have immediate execution, or a mixed batch, then it is much
better.</p>

<h3 id="gather-unordered" style="font-size: 120%; font-weight: bold;"><b>Gather Unordered<b></b></b></h3>

<p>The <code class="highlighter-rouge">gatherUnordered</code> operation would be:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="nc">Task</span><span class="o">.</span><span class="n">gatherUnordered</span><span class="o">(</span><span class="n">tasks</span><span class="o">)</span>
</code></pre></div>
<p>This behaves like <code class="highlighter-rouge">gather</code>, except that it does not care for the order
in which the results are served. Can have much better performance if
you don't care about order.</p>

<p>For synchronous/immediate tasks:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Sync</td>
      <td>Unordered</td>
      <td>5654.462</td>
      <td>150.792</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Sync</td>
      <td>Unordered</td>
      <td>3340.645</td>
      <td>244.145</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>S.Future</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1753.614</td>
      <td>20.871</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>For forked tasks:</p>

<table>
  <thead>
    <tr>
      <th>Source</th>
      <th>Type</th>
      <th>Operation</th>
      <th>Score</th>
      <th>Error</th>
      <th>Units</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Monix</td>
      <td>Forked</td>
      <td>Unordered</td>
      <td>1658.055</td>
      <td>12.114</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>Scalaz</td>
      <td>Forked</td>
      <td>Unordered</td>
      <td>1657.454</td>
      <td>35.218</td>
      <td>ops/s</td>
    </tr>
    <tr>
      <td>S.Future</td>
      <td>Forked</td>
      <td>Sequence</td>
      <td>1753.614</td>
      <td>20.871</td>
      <td>ops/s</td>
    </tr>
  </tbody>
</table>

<p>Again, performance is really good for synchronous tasks, whereas for
forked tasks it evens out with the performance of <code class="highlighter-rouge">Future.sequence</code>.</p>

<h3 id="raw-output" style="font-size: 120%; font-weight: bold;"><b>Raw output<b></b></b></h3>

<div class="highlight"><pre class="highlight plaintext"><code>[info] # Run complete. Total time: 00:04:28
[info]
[info] Benchmark                              Mode  Cnt     Score     Error  Units
[info] TaskGatherBenchmark.gatherMonixA      thrpt   10  1396.797 ±  17.098  ops/s
[info] TaskGatherBenchmark.gatherMonixS      thrpt   10  3800.559 ± 341.509  ops/s
[info] TaskGatherBenchmark.gatherScalazA     thrpt   10  1014.452 ±  13.569  ops/s
[info] TaskGatherBenchmark.gatherScalazS     thrpt   10  2152.441 ±  24.811  ops/s
[info] TaskGatherBenchmark.sequenceFutureA   thrpt   10  1753.614 ±  20.871  ops/s
[info] TaskGatherBenchmark.sequenceMonixA    thrpt   10  2044.624 ±  24.852  ops/s
[info] TaskGatherBenchmark.sequenceMonixS    thrpt   10  6716.906 ± 157.947  ops/s
[info] TaskGatherBenchmark.sequenceScalazA   thrpt   10  1090.355 ±  15.851  ops/s
[info] TaskGatherBenchmark.sequenceScalazS   thrpt   10  3518.888 ± 167.148  ops/s
[info] TaskGatherBenchmark.unorderedMonixA   thrpt   10  1658.055 ±  12.114  ops/s
[info] TaskGatherBenchmark.unorderedMonixS   thrpt   10  5654.462 ± 150.792  ops/s
[info] TaskGatherBenchmark.unorderedScalazA  thrpt   10  1657.454 ±  35.218  ops/s
[info] TaskGatherBenchmark.unorderedScalazS  thrpt   10  3340.645 ± 244.145  ops/s
</code></pre></div>
<p>Cheers!</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2016/08/25/monix-task-performance.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2016/05/15/monix-observable.html</id>
   <title>Akka &amp; Monix - Typelevel Summit, Oslo 2016</title>
   <link href="https://alexn.org/blog/2016/05/15/monix-observable.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2016-05-14T21:00:00+00:00</published>
   <updated>2016-05-14T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Monix]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2015/monifu-square.png" class="right" width="200" alt="Monifu square" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p><strong>Akka &amp; Monix: Controlling Power Plants</strong> -
my presentation from the
<a href="http://typelevel.org/event/2016-05-summit-oslo/">Typelevel Summit, Oslo, 2016</a>:</p>

<ul>
  <li><a href="/assets/pdfs/Akka-Monix.pdf">Slides (PDF file)</a></li>
  <li><a href="https://www.youtube.com/watch?v=CQxviYlAKaY">Video (YouTube)</a></li>
</ul>

<p>Also see:</p>

<ul>
  <li>
<a href="/blog/2016/05/10/monix-task.html">Monix Task</a>, flatMap(Oslo), 2016</li>
  <li>the <a href="https://github.com/monixio/monix">Monix</a> project</li>
</ul>

<h2 id="abstract" style="font-size: 150%; font-weight: bold;"><b>Abstract<b></b></b></h2>

<p>This talk is about my experience in dealing with modeling behavior
by processing asynchronous soft realtime signals from different
sources using Akka, along with Monix, the library for building
asynchronous and event-based logic.</p>

<p>It's an experience report from my work in monitoring and controlling
power plants. We do this by gathering signals in real time and
modeling state machines that give us the state in which an asset is in.
The component I worked on is the one component in the project that
definitely adheres to FP principles, the business logic being
described with pure functions and data-structures and the communication
being handled by actors and by Observable streams. I want to show
how I pushed side effects at the edges, in a very pragmatic setup.</p>

<p>This presentation will focus on Akka best practices, the wiring
needed for describing purely functional state, along with a
presentation of Monix Observable and how that helps.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2016/05/15/monix-observable.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2016/05/10/monix-task.html</id>
   <title>Monix Task - flatMap(Oslo) 2016</title>
   <link href="https://alexn.org/blog/2016/05/10/monix-task.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2016-05-09T21:00:00+00:00</published>
   <updated>2016-05-09T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Monix]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2015/monifu-square.png" class="right" width="200" alt="Monifu square" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 200px; " align="right"></p>

<p><strong>Monix Task: Lazy, Async &amp; Awesome</strong> -
my presentation from
<a href="http://2016.flatmap.no/nedelcu.html#session">flatMap(Oslo) 2016</a>:</p>

<ul>
  <li><a href="/assets/pdfs/Monix-Task.pdf">Slides (PDF file)</a></li>
  <li><a href="https://vimeo.com/channels/flatmap2016/165922572">Video (Vimeo)</a></li>
</ul>

<p>Also see:</p>

<ul>
  <li>
<a href="/blog/2016/05/15/monix-observable.html">Akka &amp; Monix</a>,
Typelevel Summit, Oslo, 2016</li>
  <li>the <a href="https://github.com/monixio/monix">Monix</a> project</li>
</ul>

<h2 id="abstract" style="font-size: 150%; font-weight: bold;"><b>Abstract<b></b></b></h2>

<p>Scala’s Future from the standard library is great, but sometimes we need more.</p>

<p>A Future strives to be a value, one detached from time and for
this reason its capabilities are restricted and for some use-cases
its behavior ends up being unintuitive. Hence, while the Future/Promise
pattern is great for representing asynchronous results of processes that
may or may not be started yet, it cannot be used as a specification
for an asynchronous computation.</p>

<p>The Monix Task is in essence about dealing with asynchronous
computations and non-determinism, being inspired by the Scalaz Task
and designed from the ground up for performance and to be compatible with
Scala.js/Javascript runtimes and with the Cats library. It also makes use of
Scala’s Future to represent results, the two being complementary.</p>

<p>In this talk I’ll show you its design, when you should use it and
why in dealing with asynchronicity it’s better to work with Task
instead of blocking threads.</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2016/05/10/monix-task.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2015/12/15/avoid-javaisms-code-smell.html</id>
   <title>Avoid Javaisms: Mocks, Stubs, DI is Code Smell</title>
   <link href="https://alexn.org/blog/2015/12/15/avoid-javaisms-code-smell.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2015-12-14T22:00:00+00:00</published>
   <updated>2015-12-14T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Code]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Rx]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2015/skunk.jpg" class="right" width="300" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 300px; " alt="Skunk" align="right"></p>

<p>I'm a man of strong opinions and I truly believe that when we are
doing
<a href="http://www.martinfowler.com/articles/mocksArentStubs.html">mocking, stubbing</a>,
<a href="https://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a>
and integration testing, such practices represent clear signals for
code smell, meaning code that sucks as a symptom of a bigger problem,
one of design. The lumping together of these practices is not an
accident, as they are related.</p>

<p>Let's take an example. Often in our components we've got dependencies,
other components only slightly related and on which we depend for
producing the desired effects. Things like database access, for both
reads and writes. In true Java spirit, lets build our noun:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">DBService</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">readItemConfig</span><span class="o">(</span><span class="n">uuid</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">ItemConfig</span><span class="o">]</span>
  <span class="k">def</span> <span class="n">saveItemConfig</span><span class="o">(</span><span class="n">uuid</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">config</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>

  <span class="k">def</span> <span class="n">readDatapoints</span><span class="o">(</span><span class="n">item</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">offset</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">count</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Datapoint</span><span class="o">]</span>
  <span class="k">def</span> <span class="n">persistDatapoint</span><span class="o">(</span><span class="n">item</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">dp</span><span class="k">:</span> <span class="kt">Datapoint</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>This interface is reasonably abstract, meaning we aren't leaking too
many underlying storage details. Well, we are assuming synchronous
responses and the datapoints are read in batches instead of a nice
stream, but those are details that can be corrected and the interface
works for a text file, PostgreSQL, MongoDB or what have you. So now we
can depend on it:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">ItemActor</span><span class="o">(</span><span class="n">db</span><span class="k">:</span> <span class="kt">DBService</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Init</span><span class="o">(</span><span class="n">uuid</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">for</span> <span class="o">(</span><span class="n">cfg</span> <span class="k">&lt;-</span> <span class="n">db</span><span class="o">.</span><span class="n">readItemConfig</span><span class="o">(</span><span class="n">uuid</span><span class="o">))</span>
        <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">))</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">)</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">???</span>
<span class="o">}</span>
</code></pre></div>
<p>Of course, if you've got masochistic tendencies, you might prefer
<a href="https://github.com/alexandru/scala-best-practices/blob/master/sections/3-architecture.md#31-should-not-use-the-cake-pattern">the Cake pattern</a>,
being the same thing, only much worse, because now you've got garbage
enhanced by global state and polymorphic superpowers, sucking as much
as Guice, only at compile-time:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">ItemActorComponentImpl</span> <span class="o">{</span>
  <span class="n">self</span><span class="k">:</span> <span class="kt">DBServiceComponent</span> <span class="o">=&gt;</span>

  <span class="k">class</span> <span class="nc">ItemActor</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
    <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
      <span class="k">case</span> <span class="nc">Init</span><span class="o">(</span><span class="n">uuid</span><span class="o">)</span> <span class="k">=&gt;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">cfg</span> <span class="k">&lt;-</span> <span class="n">dbService</span><span class="o">.</span><span class="n">readItemConfig</span><span class="o">(</span><span class="n">uuid</span><span class="o">))</span>
          <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">))</span>
    <span class="o">}</span>

    <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">)</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">???</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>I personally can't stand that, being the epitome of good intentions
gone wrong. But back to our point, if we want to test this actor, we'd
have to mock or stub our <code class="highlighter-rouge">DBService</code>, right?</p>

<p>Well, here's <em>the problem</em> mate: until now this actor only depends on
<code class="highlighter-rouge">DBService.readItemConfig</code>, yet we have to mock or stub the entire
interface of <code class="highlighter-rouge">DBService</code>. And having to mock or stub things unrelated
to testing this functionality should indicate that this code is too
<em>tightly coupled</em>. Right there your nose should reject the air
emanated from this code and it's common sense that often save us,
even though we often can't place our finger on the problem.</p>

<p>OK, OK, lets fix this somewhat using a common Java "best practice", by
splitting this interface into smaller modules. Our <code class="highlighter-rouge">DBService</code>
interface does too much, or so the popular wisdom would say.</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">ItemConfigsRepository</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">read</span><span class="o">(</span><span class="n">uuid</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">ItemConfig</span><span class="o">]</span>
  <span class="k">def</span> <span class="n">save</span><span class="o">(</span><span class="n">uuid</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">config</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">DatapointsRepository</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">readList</span><span class="o">(</span><span class="n">item</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">offset</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">count</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Datapoint</span><span class="o">]</span>
  <span class="k">def</span> <span class="n">persist</span><span class="o">(</span><span class="n">item</span><span class="k">:</span> <span class="kt">UUID</span><span class="o">,</span> <span class="n">dp</span><span class="k">:</span> <span class="kt">Datapoint</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>That feels better, right? By splitting functionality in smaller units
of finer-grained stuff, this should ameliorate our dependency
woes. Wrong! Now we've got two problems:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">ItemActor</span>
  <span class="o">(</span><span class="n">icsRepo</span><span class="k">:</span> <span class="kt">ItemConfigsRepository</span><span class="o">,</span> <span class="n">dpsRepo</span><span class="k">:</span> <span class="kt">DatapointsRepository</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
  
  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Init</span><span class="o">(</span><span class="n">uuid</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">for</span> <span class="o">(</span><span class="n">cfg</span> <span class="k">&lt;-</span> <span class="n">icsRepo</span><span class="o">.</span><span class="n">read</span><span class="o">(</span><span class="n">uuid</span><span class="o">))</span>
        <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="nc">State</span><span class="o">.</span><span class="n">empty</span><span class="o">))</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">,</span> <span class="n">state</span><span class="k">:</span> <span class="kt">State</span><span class="o">)</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">val</span> <span class="n">newState</span> <span class="k">=</span> <span class="n">state</span><span class="o">.</span><span class="n">evolve</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
      <span class="n">dpsRepo</span><span class="o">.</span><span class="n">persist</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="n">uuid</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="n">powerOutput</span><span class="o">)</span>
      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">newState</span><span class="o">))</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>BAM, more dependencies, more garbage, more mocks and stubs. Does this
ring a bell? Cake makes it worse btw. But anyway, now we can see that
our solution with <code class="highlighter-rouge">ItemConfigsRepository</code> doesn't work, as <code class="highlighter-rouge">readItem</code>
is often not used in the same place as <code class="highlighter-rouge">writeItem</code>, so our action had
an opposite effect of what we wanted.</p>

<p>How can this be, our interfaces are abstract and split in small units
according to best practices, yet what are we doing wrong?</p>

<p>Maybe this isn't so bad, right? I mean surely we can stub the
dependencies that aren't actually used and be done with it, everybody
else is doing it. And look, we've got dependency injection to deal
with all the constructor annoyances. Oh, except when you've got more
to add, things unrelated to the actual business logic, like persisting
more stuff:</p>

<div class="highlight"><pre class="highlight scala"><code>  <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">,</span> <span class="n">state</span><span class="k">:</span> <span class="kt">State</span><span class="o">)</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">val</span> <span class="n">newState</span> <span class="k">=</span> <span class="n">state</span><span class="o">.</span><span class="n">evolve</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
      <span class="n">dpsRepo</span><span class="o">.</span><span class="n">persist</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="n">uuid</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="n">powerOutput</span><span class="o">)</span>
      <span class="n">dpsRepo</span><span class="o">.</span><span class="n">persist</span><span class="o">(</span><span class="n">cfg</span><span class="o">.</span><span class="n">uuid</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="n">basepoint</span><span class="o">)</span> <span class="c1">// &lt;-- here
</span>      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">newState</span><span class="o">))</span>
  <span class="o">}</span>
</code></pre></div>
<p>So now with mocks, your tests are broken even though the business
logic hasn't changed, whereas with stubs that ignore those calls, both
of those calls might as well not exist. Both outcomes are wrong.</p>

<p>Here we are having a side-effect, which is persisting values in the
database in response to that <code class="highlighter-rouge">State</code> being evolved when receiving
<code class="highlighter-rouge">Signal</code> values.</p>

<p>Yet we have a non-obvious <em>implementation leak</em>. From the point of
view of this actor, those persistence calls are just signals that a
state change happened and that we could do (but not necessarily)
something <em>in response</em>, but the actor should not care at all that
what we are doing is actual persistence in a database repository, or
sending values over an akka remoting connection, or over web-socket,
or dumping some logs on disk. These concerns should be totally outside
of our component and all we should be testing is if our component is
signaling stuff to the outside world. We tried fixing <code class="highlighter-rouge">DBService</code> but
in fact our Actor is broken.</p>

<p>Meet the famous and underused
<a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer pattern</a>. And
its sibling on steroids <a href="http://reactivex.io/">ReactiveX</a>. Here's the
sample above using <a href="https://github.com/monifu/monifu">Monifu</a>:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">ItemActor</span><span class="o">(</span><span class="n">output</span><span class="k">:</span> <span class="kt">Channel</span><span class="o">[</span><span class="kt">Signal</span><span class="o">])</span>
  <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>

  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span> <span class="o">=&gt;</span>
      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="nc">State</span><span class="o">.</span><span class="n">empty</span><span class="o">))</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span><span class="o">,</span> <span class="n">state</span><span class="k">:</span> <span class="kt">State</span><span class="o">)</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">val</span> <span class="n">newState</span> <span class="k">=</span> <span class="n">state</span><span class="o">.</span><span class="n">evolve</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
      <span class="n">output</span><span class="o">.</span><span class="n">pushNext</span><span class="o">(</span><span class="n">newState</span><span class="o">)</span>
      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">newState</span><span class="o">))</span>
      
    <span class="k">case</span> <span class="n">cfg</span><span class="k">:</span> <span class="kt">ItemConfig</span> <span class="o">=&gt;</span>
      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">cfg</span><span class="o">,</span> <span class="n">state</span><span class="o">))</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// ...
// in a galaxy far, far away
</span>
<span class="n">dbConfigSource</span><span class="o">.</span><span class="n">subscribe</span> <span class="o">{</span> <span class="n">config</span> <span class="k">=&gt;</span>
  <span class="n">actor</span> <span class="o">!</span> <span class="n">itemConfig</span>
<span class="o">}</span>

<span class="n">output</span><span class="o">.</span><span class="n">subscribe</span> <span class="o">{</span> <span class="n">signal</span> <span class="k">=&gt;</span>
  <span class="n">dbService</span><span class="o">.</span><span class="n">persist</span><span class="o">(</span><span class="n">signal</span><span class="o">.</span><span class="n">uuid</span><span class="o">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">powerOutput</span><span class="o">)</span>
  <span class="n">dbService</span><span class="o">.</span><span class="n">persist</span><span class="o">(</span><span class="n">signal</span><span class="o">.</span><span class="n">uuid</span><span class="o">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">basepoint</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div>
<p>OK, I know that Akka actors are cool and all, this is not about you
using or not Akka actors. So lets implement the Observer pattern on
top of Akka actors to see how that looks like:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">class</span> <span class="nc">MyActor</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="n">active</span><span class="o">(</span><span class="nc">State</span><span class="o">.</span><span class="n">empty</span><span class="o">,</span> <span class="nc">Set</span><span class="o">.</span><span class="n">empty</span><span class="o">)</span>

  <span class="k">def</span> <span class="n">active</span><span class="o">(</span><span class="n">state</span><span class="k">:</span> <span class="kt">State</span><span class="o">,</span> <span class="n">subscribers</span><span class="k">:</span> <span class="kt">Set</span><span class="o">[</span><span class="kt">ActorRef</span><span class="o">])</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">case</span> <span class="s">"register"</span> <span class="k">=&gt;</span>
      <span class="k">val</span> <span class="n">ref</span> <span class="k">=</span> <span class="n">sender</span><span class="o">()</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">subscribers</span><span class="o">.</span><span class="n">contains</span><span class="o">(</span><span class="n">ref</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="n">watch</span><span class="o">(</span><span class="n">ref</span><span class="o">)</span>
        <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">state</span><span class="o">,</span> <span class="n">subscribers</span> <span class="o">+</span> <span class="n">ref</span><span class="o">))</span>
      <span class="o">}</span>

    <span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">ref</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="n">context</span><span class="o">.</span><span class="n">unwatch</span><span class="o">(</span><span class="n">ref</span><span class="o">)</span>
      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">state</span><span class="o">,</span> <span class="n">subscribers</span> <span class="o">-</span> <span class="n">sender</span><span class="o">))</span>

    <span class="k">case</span> <span class="nc">Signal</span><span class="o">(</span><span class="n">value</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="k">val</span> <span class="n">newState</span> <span class="k">=</span> <span class="n">state</span><span class="o">.</span><span class="n">evolve</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>      
      <span class="k">for</span> <span class="o">(</span><span class="n">subscriber</span> <span class="k">&lt;-</span> <span class="n">subscribers</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">event</span> <span class="k">&lt;-</span> <span class="n">newState</span><span class="o">.</span><span class="n">events</span><span class="o">)</span>
          <span class="n">subscriber</span> <span class="o">!</span> <span class="n">event</span>
      <span class="o">}</span>

      <span class="n">context</span><span class="o">.</span><span class="n">become</span><span class="o">(</span><span class="n">active</span><span class="o">(</span><span class="n">newState</span><span class="o">,</span> <span class="n">subscribers</span><span class="o">))</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>It has been my general opinion that actors should
<a href="https://github.com/alexandru/scala-best-practices/blob/master/sections/5-actors.md#52-should-mutate-state-in-actors-only-with-contextbecome">mutate their state with context.become</a>
and one reason is because that enables us to separate the business
logic from the actor and leave the actor to handle just the
communication side. Should the above actor be tested? Maybe, if you've
got time, but it really isn't a priority, because it doesn't contain
business logic. Let's go deeper. The business logic, exposed by
<code class="highlighter-rouge">newState = state.evolve</code> would be something like this:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">case</span> <span class="k">class</span> <span class="nc">Event</span><span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>

<span class="k">case</span> <span class="k">class</span> <span class="nc">State</span>
  <span class="o">(</span><span class="n">value</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">lastEvent</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">events</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Event</span><span class="o">])</span> <span class="o">{</span>

  <span class="k">def</span> <span class="n">evolve</span><span class="o">(</span><span class="n">newValue</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">State</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">math</span><span class="o">.</span><span class="n">abs</span><span class="o">(</span><span class="n">newValue</span> <span class="o">-</span> <span class="n">lastEvent</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="o">)</span>
      <span class="nc">State</span><span class="o">(</span><span class="n">newValue</span><span class="o">,</span> <span class="n">newValue</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">(</span><span class="nc">Event</span><span class="o">(</span><span class="n">newValue</span><span class="o">)))</span>
    <span class="k">else</span>
      <span class="n">copy</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="n">newValue</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="n">popEvents</span><span class="k">:</span> <span class="o">(</span><span class="kt">Seq</span><span class="o">[</span><span class="kt">Event</span><span class="o">],</span> <span class="nc">State</span><span class="o">)</span> <span class="k">=</span> 
    <span class="o">(</span><span class="n">events</span><span class="o">,</span> <span class="n">copy</span><span class="o">(</span><span class="n">events</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">.</span><span class="n">empty</span><span class="o">))</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">State</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">empty</span> <span class="k">=</span> <span class="nc">State</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">Seq</span><span class="o">.</span><span class="n">empty</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div>
<p>M'kay, so this does have business logic that would be valuable for
testing. AND we are modeling the side-effects in a pure way, by saying
on each <code class="highlighter-rouge">evolve</code> "<em>here's a bunch of signals to emit Bob, I don't care
how you do it or who reads them</em>".</p>

<p>Does this code have any dependencies whatsoever? No, it's pure and can
be tested in total isolation and for things that actually matter, you
know, unit testing. This is the essence of functional programming and
(I hope) of Scala. Because whenever you're using
<a href="http://mockito.org/">Mockito</a> it means that you're not doing the
above.</p>

<p>In other words:</p>

<ul>
  <li>dependency injection, mocking and stubbing is meant for hiding
garbage under the rug</li>
  <li>for writes, you don't have to sprinkle your side-effecting calls all
over the place, when you can decouple those concerns by implementing
signaling by means of the Observer pattern</li>
  <li>for reads you can have components that <em>push</em> those configurations
into your component and the actual wiring is very often not worth
testing, because …</li>
  <li>testing has diminishing returns: math formulas, the whiles and the
ifs and the decision making are very important, but the interaction
with external components or systems? Not so much, especially because
you end up testing other people's libraries and frameworks,
essentially duplicating functionality and generally not worth the
trouble</li>
  <li>integration testing is like meat eating - it's not that meat eating
is bad for you per se, but rather the fact that by eating meat
you're not eating enough vegetables. You see, we have a finite
budget and by doing integration testing it means that you're not
doing something else. And people that do integration testing in
their code are often the people that gave up on refactoring and unit
testing their convoluted and tightly coupled code</li>
  <li>mocks and stubs are a definite sign that your components are too
tightly coupled and that your business logic is mixed with
side-effects of short term value involving third-party components
and systems. It's usually a sign that you need to clean up your mess</li>
  <li>testing Akka actors is horrible because of their asynchronous nature
and that's a good thing, because it makes you realize that actors
are about communication and that you don't care about communication
in your unit tests, so you'd better not have business logic in them ;-)</li>
  <li>your DBService can always fail for reasons outside of your control,
so instead of testing DBService, your effort is much better spent in
making your own component more resilient to failure and in improving
logging, because when it comes to external systems, testing the
happy path is worthless, being the edge cases that get you</li>
  <li>personally I dislike very much tests that pretend to test things,
but have zero value - writing unit tests is just a means to an end,
take time and have to be maintained, so don't burden your team with
fragile tests that don't test anything of value, because that's not
why you've been hired</li>
</ul>

<p>Pain is good. Mocks, stubs, DI, integration tests are about avoiding
pain by fixing the symptoms rather than the disease. Don't treat the
symptoms, treat the disease.</p>

<p>Also see the list of
<a href="https://github.com/alexandru/scala-best-practices">best practices</a> I
initiated that's free of Javaisms.</p>

<p>Cheers,</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2015/12/15/avoid-javaisms-code-smell.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2015/09/06/monifu-vs-akka-streams.html</id>
   <title>Monifu vs Akka Streams</title>
   <link href="https://alexn.org/blog/2015/09/06/monifu-vs-akka-streams.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2015-09-05T21:00:00+00:00</published>
   <updated>2015-09-05T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Rx]]></category>
   <category><![CDATA[Reactive Streams]]></category>

   <content type="html"><![CDATA[
   <p>Back in June I attended
<a href="http://event.scaladays.org/scaladays-amsterdam-2015">Scala Days</a> in
Amsterdam and participated at a talk by Mathias Doenitz on
<a href="https://www.parleys.com/tutorial/the-reactive-streams-implementation-landscape">The Reactive Streams Implementation Landscape</a>.
It was a good talk, yet I felt a little bias towards Akka Streams,
which is natural coming from somebody that is contributing to Akka,
but let me give you the perspective from <em>the other side</em>.</p>

<p><img src="/assets/img/2015/monifu-square.png" class="right" width="300" alt="Monifu square" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 300px; " align="right"></p>

<p>For a short introduction, we are talking about libraries that are
meant for stream processing. Several libraries exist for stream
processing, a craze that started with
<a href="https://msdn.microsoft.com/en-us/data/gg577609.aspx">Rx.NET</a>, or with
<a href="https://en.wikipedia.org/wiki/Iteratee">Iteratees</a> on the Haskell
side and since then we ended up with ports and enhancements, like
<a href="https://github.com/ReactiveX/RxJava">RxJava</a>,
<a href="https://github.com/Reactive-Extensions/RxJS">Rx.js</a>,
<a href="https://baconjs.github.io/">Bacon.js</a>,
<a href="https://www.playframework.com/documentation/2.4.x/Iteratees">Play's Iteratees</a>,
<a href="https://github.com/scalaz/scalaz-stream">Scalaz Streams</a> and more
recently
<a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/current/">Akka Streams</a>.</p>

<p>The library I've been working on is named
<strong><a href="https://github.com/monifu/monifu">Monifu</a></strong>. It has just
reached 1.0-RC1, it is built on idiomatic Scala principles, is
cross-compiled to <a href="http://www.scala-js.org/">Scala.js</a>, is freaking
awesome and even though it is inspired by Rx, compared to other Rx
implementations, it was designed from scratch to deal with
back-pressure. It's also implementing the 1.0 version of the
<a href="http://www.reactive-streams.org/">Reactive Streams</a> protocol for
interoperability. Checkout this cool sample of client/server
communications, where both the server-side and the browser-side is handled
by Monifu: <a href="https://github.com/monifu/monifu-sample">code</a> /
<a href="http://monifu-sample.herokuapp.com/">demo</a>
(that's a free Heroku node, go easy on it :-)).</p>

<h2 id="code" style="font-size: 150%; font-weight: bold;"><b>Code<b></b></b></h2>

<p>I am biased, I admit. But personally I find the design of Akka Streams
to be <em>conceptually ugly</em>.</p>

<p>Mathias was kind to release his comparison
<a href="https://github.com/sirthias/rs-comparison">on GitHub</a>, containing the
same problem solved with Akka Streams, RxJava and Reactor and I think
this provides a good starting point for a comparison.  So lets take
Mathias's own
<a href="https://github.com/alexandru/rs-comparison/blob/master/src/main/scala/swave/rsc/AkkaPi.scala">sample for Akka Streams</a>
and compare it with my
<a href="https://github.com/alexandru/rs-comparison/blob/master/src/main/scala/swave/rsc/MonifuPi.scala">own sample for Monifu</a>. Akka
Streams is missing some useful operators, like operators for
throttling, therefore the code needs to implement it.</p>

<p>To throttle once per second, here's what the Akka Streams sample is doing:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Akka Streams sample
</span><span class="k">def</span> <span class="n">onePerSecValve</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">State</span>, <span class="kt">State</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Flow</span><span class="o">()</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">b</span> <span class="k">⇒</span>
    <span class="k">import</span> <span class="nn">FlowGraph.Implicits._</span>

    <span class="k">val</span> <span class="n">zip</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">ZipWith</span><span class="o">[</span><span class="kt">State</span>, <span class="kt">Tick.</span><span class="k">type</span>, <span class="kt">State</span><span class="o">](</span><span class="nc">Keep</span><span class="o">.</span><span class="n">left</span><span class="o">)</span>
      <span class="o">.</span><span class="n">withAttributes</span><span class="o">(</span><span class="nc">OperationAttributes</span><span class="o">.</span><span class="n">inputBuffer</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">)))</span>
    <span class="k">val</span> <span class="n">dropOne</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Flow</span><span class="o">[</span><span class="kt">State</span><span class="o">].</span><span class="n">drop</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>

    <span class="nc">Source</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="nc">Zero</span><span class="o">,</span> <span class="mf">1.</span><span class="n">second</span><span class="o">,</span> <span class="nc">Tick</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="n">zip</span><span class="o">.</span><span class="n">in1</span>
    <span class="n">zip</span><span class="o">.</span><span class="n">out</span> <span class="o">~&gt;</span> <span class="n">dropOne</span><span class="o">.</span><span class="n">inlet</span>

    <span class="o">(</span><span class="n">zip</span><span class="o">.</span><span class="n">in0</span><span class="o">,</span> <span class="n">dropOne</span><span class="o">.</span><span class="n">outlet</span><span class="o">)</span>
  <span class="o">}</span>
</code></pre></div>
<p>Monifu has
<a href="https://monifu.org/api/1.0-RC1/index.html#monifu.reactive.Observable@throttleFirst(interval:scala.concurrent.duration.FiniteDuration):monifu.reactive.Observable%5BT%5D">throttling operators</a>
built-in, but if that weren't the case, here's how you could implement
sampling per second:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Monifu sample
</span><span class="k">def</span> <span class="n">throttleOnePerSec</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">source</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Observable</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">tick</span> <span class="k">=</span> <span class="nc">Observable</span><span class="o">.</span><span class="n">intervalAtFixedRate</span><span class="o">(</span><span class="mf">1.</span><span class="n">second</span><span class="o">,</span> <span class="mf">1.</span><span class="n">second</span><span class="o">)</span>
  <span class="n">source</span><span class="o">.</span><span class="n">whileBusyDropEvents</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">tick</span><span class="o">)</span>
    <span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="k">case</span> <span class="o">(</span><span class="n">elem</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">elem</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>Both pieces of code are doing roughly the same thing. A different
data-source is being started that generates a tick over every second
and that data-source is being <code class="highlighter-rouge">zipped</code> with our source. Events emitted
by our source are dropped as long as the tick is silent and then when
the tick event happens we emit whatever we've got. Using <code class="highlighter-rouge">zip</code> for
sampling is actually very inefficient, as <code class="highlighter-rouge">zip</code> is a fundamentally
concurrent operator, but this is just for comparing apples with apples
;-)</p>

<p>So why is the code for Akka Streams looking so complicated? Well
that's because of its design, but lets come back to that later.
In the Akka Streams sample, here's how the original data-source is
being split in two streams (<code class="highlighter-rouge">filterInner</code> and <code class="highlighter-rouge">filterOuter</code>) and then
merged:</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Akka Streams sample
</span><span class="nc">Source</span><span class="o">(()</span> <span class="k">⇒</span> <span class="k">new</span> <span class="nc">RandomDoubleValueGenerator</span><span class="o">())</span>
  <span class="o">.</span><span class="n">grouped</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
  <span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="k">case</span> <span class="n">x</span> <span class="o">+:</span> <span class="n">y</span> <span class="o">+:</span> <span class="nc">Nil</span> <span class="k">⇒</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">}</span>
  <span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="n">broadcastFilterMerge</span><span class="o">)</span>

<span class="c1">// ...
</span><span class="k">def</span> <span class="n">broadcastFilterMerge</span><span class="k">:</span> <span class="kt">Flow</span><span class="o">[</span><span class="kt">Point</span>, <span class="kt">Sample</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
  <span class="nc">Flow</span><span class="o">()</span> <span class="o">{</span> <span class="k">implicit</span> <span class="n">b</span> <span class="k">⇒</span>
    <span class="k">import</span> <span class="nn">FlowGraph.Implicits._</span>

    <span class="k">val</span> <span class="n">broadcast</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Broadcast</span><span class="o">[</span><span class="kt">Point</span><span class="o">](</span><span class="mi">2</span><span class="o">))</span> <span class="c1">// split one upstream into 2 downstreams
</span>    <span class="k">val</span> <span class="n">filterInner</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Flow</span><span class="o">[</span><span class="kt">Point</span><span class="o">].</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">isInner</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="nc">InnerSample</span><span class="o">))</span>
    <span class="k">val</span> <span class="n">filterOuter</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Flow</span><span class="o">[</span><span class="kt">Point</span><span class="o">].</span><span class="n">filter</span><span class="o">(!</span><span class="k">_</span><span class="o">.</span><span class="n">isInner</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="nc">OuterSample</span><span class="o">))</span>
    <span class="k">val</span> <span class="n">merge</span> <span class="k">=</span> <span class="n">b</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">Merge</span><span class="o">[</span><span class="kt">Sample</span><span class="o">](</span><span class="mi">2</span><span class="o">))</span> <span class="c1">// merge 2 upstreams into one downstream
</span>
    <span class="n">broadcast</span><span class="o">.</span><span class="n">out</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="n">filterInner</span> <span class="o">~&gt;</span> <span class="n">merge</span><span class="o">.</span><span class="n">in</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
    <span class="n">broadcast</span><span class="o">.</span><span class="n">out</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">~&gt;</span> <span class="n">filterOuter</span> <span class="o">~&gt;</span> <span class="n">merge</span><span class="o">.</span><span class="n">in</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>

    <span class="o">(</span><span class="n">broadcast</span><span class="o">.</span><span class="n">in</span><span class="o">,</span> <span class="n">merge</span><span class="o">.</span><span class="n">out</span><span class="o">)</span>
  <span class="o">}</span>
</code></pre></div>
<p>Here's Monifu's version, doing the same thing.</p>

<div class="highlight"><pre class="highlight scala"><code><span class="c1">// Monifu sample
</span><span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="nc">Observable</span>
  <span class="o">.</span><span class="n">fromIterator</span><span class="o">(</span><span class="k">new</span> <span class="nc">RandomDoubleValueGenerator</span><span class="o">())</span>
  <span class="o">.</span><span class="n">buffer</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
  <span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="k">case</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="k">⇒</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">}</span>
  <span class="o">.</span><span class="n">share</span><span class="o">()</span> <span class="c1">// shares the data-source
</span>
<span class="k">val</span> <span class="n">innerSamples</span> <span class="k">=</span> <span class="n">source</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">isInner</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="nc">InnerSample</span><span class="o">)</span>
<span class="k">val</span> <span class="n">outerSamples</span> <span class="k">=</span> <span class="n">source</span><span class="o">.</span><span class="n">filter</span><span class="o">(!</span><span class="k">_</span><span class="o">.</span><span class="n">isInner</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="nc">OuterSample</span><span class="o">)</span>

<span class="nc">Observable</span><span class="o">.</span><span class="n">merge</span><span class="o">(</span><span class="n">innerSamples</span><span class="o">,</span> <span class="n">outerSamples</span><span class="o">)</span>
</code></pre></div>
<p>At this point I think a pattern emerges.</p>

<h2 id="design" style="font-size: 150%; font-weight: bold;"><b>Design<b></b></b></h2>

<p>A stream of information is like a river. Does the river care who
observes it or who drinks from it? No, it doesn't. And yes, sometimes
you need to share the source between multiple listeners, sometimes you
want to create new sources for each listener. But the listener
shouldn't care what sort of producer it has on its hands or
vice-versa. And people are really not good at reasoning about graphs
and making those graphs explicit doesn't make it better, it makes it
worse.</p>

<p><img src="/assets/img/2015/river.jpg" class="right" width="300" alt="River" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 300px; " align="right"></p>

<p>In Monifu / Rx you've got hot observables (hot data sources shared
between an unlimited number of subscribers) and cold observables (each
subscriber gets its very own private data source). You can also
convert any cold data source into a hot one by using the <code class="highlighter-rouge">multicast</code>
operator, in combination with <code class="highlighter-rouge">Subjects</code> that dictate behavior
(e.g. Publish, Behavior, Async or Replay). The
<a href="https://monifu.org/api/1.0-RC1/index.html#monifu.reactive.observables.ConnectableObservable">ConnectableObservable</a>
is meant for hot data sources. In our sample above, we are using
<code class="highlighter-rouge">share()</code>, an operator that transforms our data source into a hot one
and then applies reference counting on its subscribers to know when to
stop it. This is what <em>encapsulation</em> is all about.</p>

<p>In Akka Streams the sources have a "single output" port and what you
do is you build "flow graphs" and sinks. Akka Streams is thus all
about modeling how streams are split. They call it "<em>explicit
fan-out</em>" and it's a design choice. However I consider it an
encapsulation leak that makes things way more complicated than they
should be and defeats the purpose of using a library for streams
manipulation in the first place. In Rx (Rx.NET / RxJava / Monifu)
terms, this is like having single-subscriber Observables and then
working with Subjects (which is both a listener and a producer) and
people that have used Rx know that working with Subjects sucks and
when you do, you usually encapsulate it really, really well. This
design choice of Akka Streams has also leaked into the "Reactive
Streams" specification, as that Processor interface is irrelevant,
plus during the talks on what the <code class="highlighter-rouge">Producer</code> should be, the original
design was for the <code class="highlighter-rouge">Producer</code> to be single-subscriber.</p>

<p>Another thing I don't like is that Akka Streams depends on Akka, the
library. You need an Actor System and an <code class="highlighter-rouge">ActorFlowMaterializer</code>,
whatever that is, with the tasks being executed by actors. I think
that's a design mistake. One reason for why Scala's <code class="highlighter-rouge">Future</code> and
<code class="highlighter-rouge">ExecutionContext</code> are great is precisely because they model only
asynchronous computations, but are completely oblivious to how the
required asynchronous execution happens. This
is why <code class="highlighter-rouge">Future</code> works on top of Scala.js without problems.</p>

<p>And again, I'm biased, but Monifu's own implementation is conceptually
elegant. You've got the
<a href="https://github.com/monifu/monifu/blob/master/core/shared/src/main/scala/monifu/concurrent/Scheduler.scala#L34">Scheduler</a>
that is used to execute tasks (an evolved <code class="highlighter-rouge">ExecutionContext</code>), the
<a href="https://github.com/monifu/monifu/blob/v1.0-RC1/monifu/shared/src/main/scala/monifu/reactive/Observable.scala#L379">Observable</a>
interface which is the producer, characterized solely by its
<code class="highlighter-rouge">onSubscribe</code> function, then you've got the
<a href="https://github.com/monifu/monifu/blob/v1.0-RC1/monifu/shared/src/main/scala/monifu/reactive/Observer.scala#L42">Observer</a>
which represents the consumer and has the back-pressure protocol baked
in its API, the
<a href="https://github.com/monifu/monifu/blob/v1.0-RC1/monifu/shared/src/main/scala/monifu/reactive/Subject.scala#L34">Subject</a>
that is both a producer and a consumer, the
<a href="https://github.com/monifu/monifu/blob/master/monifu/shared/src/main/scala/monifu/reactive/Channel.scala#L28">Channel</a>
which represents a way to build Observables in an imperative way
without back-pressure concerns and the
<a href="https://github.com/monifu/monifu/blob/master/monifu/shared/src/main/scala/monifu/reactive/observables/ConnectableObservable.scala#L33">ConnectableObservable</a>,
which represents hot data-sources that are shared between multiple
subscribers. Monifu's internals are self-explanatory and (I hope) a
joy to go through.</p>

<p>I mean, this beauty describes Monifu's design and represents at least
half of what you need to know (and skipping over back-pressure
concerns, you
<a href="https://en.wikipedia.org/wiki/Observer_pattern">already know it</a>):</p>

<div class="highlight"><pre class="highlight scala"><code><span class="k">trait</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">-T</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">onNext</span><span class="o">(</span><span class="n">elem</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Ack</span><span class="o">]</span>

  <span class="k">def</span> <span class="n">onError</span><span class="o">(</span><span class="n">ex</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span>

  <span class="k">def</span> <span class="n">onComplete</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span>
<span class="o">}</span>
</code></pre></div>
<p>In contrast, I found the source-code and the concepts in Akka Streams
to be very hard to read and understand. Give it a try and compare.</p>

<h2 id="performance" style="font-size: 150%; font-weight: bold;"><b>Performance<b></b></b></h2>

<p>I've left the best part of Monifu for last. Here's running the Monifu
sample:</p>

<div class="highlight"><pre class="highlight plaintext"><code>[info] Running swave.rsc.MonifuPi

After  1,909,713 samples π is approximated as 3.14102
After  4,132,610 samples π is approximated as 3.14240
After  6,342,356 samples π is approximated as 3.14241
After  8,513,597 samples π is approximated as 3.14239
After 10,696,940 samples π is approximated as 3.14176
After 12,897,762 samples π is approximated as 3.14165
After 15,099,261 samples π is approximated as 3.14160
After 17,326,511 samples π is approximated as 3.14169
After 19,529,832 samples π is approximated as 3.14164
After 21,752,232 samples π is approximated as 3.14170

[success] Total time: 11 s, completed Sep 6, 2015 2:48:06 PM
</code></pre></div>
<p>Here's Akka Streams:</p>

<div class="highlight"><pre class="highlight plaintext"><code>[info] Running swave.rsc.AkkaPi

After     59,812 samples π is approximated as 3.12807
After    258,925 samples π is approximated as 3.13910
After    525,537 samples π is approximated as 3.14173
After    892,973 samples π is approximated as 3.14070
After  1,258,939 samples π is approximated as 3.14127
After  1,545,861 samples π is approximated as 3.14019
After  1,813,374 samples π is approximated as 3.14103
After  2,219,992 samples π is approximated as 3.14137
After  2,515,283 samples π is approximated as 3.14129
After  2,826,297 samples π is approximated as 3.14148

[success] Total time: 13 s, completed Sep 6, 2015 2:49:23 PM
</code></pre></div>
<p>Here's RxJava (RxScala):</p>

<div class="highlight"><pre class="highlight plaintext"><code>[info] Running swave.rsc.RxScalaPi

After    804,127 samples π is approximated as 3.11240
After  1,747,146 samples π is approximated as 3.12848
After  2,761,645 samples π is approximated as 3.13558
After  3,678,029 samples π is approximated as 3.13880
After  4,756,818 samples π is approximated as 3.13960
After  5,787,079 samples π is approximated as 3.14172
After  6,768,352 samples π is approximated as 3.14249
After  7,804,973 samples π is approximated as 3.14320
After  8,812,403 samples π is approximated as 3.14381
After  9,625,207 samples π is approximated as 3.14393

[success] Total time: 12 s, completed Sep 6, 2015 2:54:55 PM
</code></pre></div>
<p>The results:</p>

<p><img src="/assets/img/2015/bench.png" class="center max" width="1428" height="750" alt="Bench" style="; height: 750px; "></p>

<p>So my Monifu sample is consistently beating Akka Streams by at least a
<strong>factor of 7</strong> and RxJava/RxScala by a <strong>factor of 2</strong>.</p>

<p>The difference is so large that either Akka Streams has some serious
improvements to achieve, or I'm doing something terribly wrong,
because this is Monifu's out-of-the-box behavior, as in I haven't even
attempted to fine tune the buffers or the scheduler for this sample.</p>

<p>But yes, Monifu was built for both ease of use and performance.</p>

<h2 id="final-words" style="font-size: 150%; font-weight: bold;"><b>Final Words<b></b></b></h2>

<p>Again, I'm biased, since I'm the author of an alternative, so take
this conclusion for what it is.</p>

<p>The precursors of Akka Streams have been
<a href="https://www.playframework.com/documentation/2.4.x/Iteratees">Play's Iteratees</a>
and the
<a href="http://doc.akka.io/docs/akka/2.2.0/scala/io-codec.html">Akka I/O Pipeline</a>,
the former on its way to deprecation, the latter already
deprecated. Unfortunately I'm seeing the same mistakes: implementation
hard to read, conceptualy very complicated, while exposing custom
binary operators in the hope of forming a DSL that will somehow fix
this complexity. And I'm all for wheel reinvention when it's done for
the right reasons, but I find this model to be inferior to an evolved
Rx (such as Monifu) and this is just one other design heading towards
deprecation.</p>

<p>If you're interested in Monifu, there's still some work to be done.
It's at release candidate for version 1.0, meaning that we're done breaking the
API and a very functional core is ready. Monifu has been developed in
parallel to its usage in production for the past year, should be fairly
solid and has very good test coverage as testament to that, but bugs may
still happen, since a lot of work went on this past month.
Documentation is sadly a work in progress and for now only the
<a href="http://monifu.org/api/current/">API documentation</a> is up to date. But we're
marching towards a 1.0 release you can rely on, which should be available
in about two weeks from now (if everything goes well). Checkout the
<a href="https://github.com/monifu/monifu">GitHub repo</a>, join
<a href="https://gitter.im/monifu/monifu">our chat channel</a> and give us feedback.</p>

<h3 id="update-sep-8-800-am" style="font-size: 120%; font-weight: bold;"><b>Update (Sep 8, 8:00 AM)<b></b></b></h3>

<p>Some interesting questions happened on
<a href="https://www.reddit.com/r/scala/comments/3jymvw/monifu_vs_akka_streams/">the reddit thread</a>.
To dispel some myths:</p>

<ol>
  <li>currently Akka Streams does no more parallelism than Monifu does</li>
  <li>in our sample Monifu is not single-threaded</li>
  <li>in our sample Monifu parallelizes the portion that it can, which
is the processing of <code class="highlighter-rouge">filterInner</code> and <code class="highlighter-rouge">filterOuter</code>, plus execution
is jumping threads, because Monifu as a matter of policy never keeps
a single thread occupied for too long</li>
  <li>you can't parallelize concurrent operations, that being an oxymoron,
which is why I'm dumbfounded by claims of parallelism</li>
</ol>

<p>Cheers,</p>


   <p><a rel="full-article" href="https://alexn.org/blog/2015/09/06/monifu-vs-akka-streams.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2014/10/20/scala-best-practices.html</id>
   <title>Scala Best Practices</title>
   <link href="https://alexn.org/blog/2014/10/20/scala-best-practices.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2014-10-19T21:00:00+00:00</published>
   <updated>2014-10-19T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Languages]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Best Practices]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/2014/scala-logo.png" class="right" width="100" alt="Scala logo" style="float: right; margin-left: 10px; margin-bottom: 10px;width: 100px; " align="right"></p>

<p>Article has been moved to its own GitHub repo:</p>

<p><a href="https://github.com/alexandru/scala-best-practices/">alexandru/scala-best-practices</a></p>

<p>If you find it useful as a starting point for your team, fork it.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2014/10/20/scala-best-practices.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2013/05/13/getting-started-with-scala.html</id>
   <title>Resources for Learning Scala</title>
   <link href="https://alexn.org/blog/2013/05/13/getting-started-with-scala.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2013-05-12T21:00:00+00:00</published>
   <updated>2013-05-12T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Languages]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Books]]></category>

   <content type="html"><![CDATA[
   <p>Getting started with a new programming language shouldn't be hard,
however navigating the web for resources on getting started with Scala
can be a doubting experience, as many such resources are either out of
date, or wrong, or both. This post is intended to reduce the noise for
my colleagues and other people that are interested in Scala
development.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2013/05/13/getting-started-with-scala.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2013/05/07/towards-better-atomicreference-scala.html</id>
   <title>Towards a Better AtomicReference</title>
   <link href="https://alexn.org/blog/2013/05/07/towards-better-atomicreference-scala.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2013-05-06T21:00:00+00:00</published>
   <updated>2013-05-06T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Languages]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Java]]></category>
   <category><![CDATA[Multithreading]]></category>
   <category><![CDATA[Concurrency]]></category>

   <content type="html"><![CDATA[
   <p>The
<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/package-summary.html">AtomicReference</a>
is like a container for a <code class="highlighter-rouge">volatile</code> reference. Usage of <code class="highlighter-rouge">volatile</code>
references is useful for the issue of
<a href="/blog/2013/03/14/jvm-multithreading-monitor-locks-visibility.html#visibility">visibility</a>
in concurrent code, however <code class="highlighter-rouge">AtomicReference</code> also supports the atomic
<a href="http://en.wikipedia.org/wiki/Compare-and-swap">Compare-and-Swap</a>
operation (CAS for short), which is the pillar of all non-blocking
data-structures and algorithms built on top of the JVM, including
complex ones like the <code class="highlighter-rouge">ConcurrentLinkedQueue</code>, an implementation based
on the
<a href="http://www.cs.rochester.edu/u/michael/PODC96.html">Michael-Scott non-blocking queues</a>.</p>

<p>However, the interface provided leaves something to be desired:</p>

<ul>
  <li>
    <p>the <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicReference.html#compareAndSet%28V,%20V%29">compareAndSet</a>
operation is too low level and for 99% of everything we do in our day to day
code it can be replaced with something much better, as we'll see</p>
  </li>
  <li>
    <p>the classes from the <code class="highlighter-rouge">java.util.concurrent.atomic</code> package do not
implement a common interface, so you can't use an
<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicInteger.html">AtomicInteger</a>
in place of an <code class="highlighter-rouge">AtomicReference</code></p>
  </li>
  <li>
    <p><code class="highlighter-rouge">AtomicInteger</code> and <code class="highlighter-rouge">AtomicLong</code> provide <code class="highlighter-rouge">incrementAndGet</code>, which is
really useful in practice for keeping track of things in
non-blocking counters, but why should that be available only for
Ints and Longs?  Floats, Doubles, BigInt, BigDecimal and all kinds
of numbers can be incremented too</p>
  </li>
</ul>

<p><strong>IMPORTANT UPDATE (March 31, 2014):</strong> The content of this article is slightly obsolete, though
still has pedagogical value. For an up to date article on my Atomic references, checkout the wiki page maintained for project <a href="https://github.com/alexandru/monifu/">Monifu</a>: <a href="https://github.com/alexandru/monifu/blob/master/docs/atomic.md">Atomic References</a></p>



   <p><a rel="full-article" href="https://alexn.org/blog/2013/05/07/towards-better-atomicreference-scala.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2013/03/14/jvm-multithreading-monitor-locks-visibility.html</id>
   <title>JVM Multithreading: Monitor Locks and Visibility</title>
   <link href="https://alexn.org/blog/2013/03/14/jvm-multithreading-monitor-locks-visibility.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2013-03-13T22:00:00+00:00</published>
   <updated>2013-03-13T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Languages]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Java]]></category>
   <category><![CDATA[Multithreading]]></category>
   <category><![CDATA[Concurrency]]></category>

   <content type="html"><![CDATA[
   <p>Multithreading is a bitch to deal with. While interviewing developers,
I noticed that surprisingly many don't have knowledge about this topic
and I can't blame them really. However, in this day and age, for some
problem domains building highly-concurrent architectures may be
paramount to the success of demanding projects. As you'll see, there
are many high level solutions, but I personally prefer to learn with a
bottom up approach, starting from the basic and unsafe primitives, as
understanding the problem is always the first step to real solutions.</p>

<p><img src="/assets/img/2013/ferrari.jpg" class="right" width="300" height="164" alt="Ferrari" style="float: right; margin-left: 10px; margin-bottom: 10px;height: 164px; " align="right"></p>

<p>This is (hopefully) the start of a series of articles giving an
overview of the primitives and tools available on top of the JVM for
solving concurrency-related problems, with code given in Scala and
Java, starting from standard synchronization techniques, going through
low-level primitives and non-blocking algorithms based on
compare-and-set, up to high-level tools, such as Futures/Promises,
actors and optimistic locking with shared transactional memory.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2013/03/14/jvm-multithreading-monitor-locks-visibility.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2012/11/07/notes-javascript-development.html</id>
   <title>Notes On Javascript Client-side Development</title>
   <link href="https://alexn.org/blog/2012/11/07/notes-javascript-development.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2012-11-06T22:00:00+00:00</published>
   <updated>2012-11-06T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Javascript]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Browser]]></category>
   <category><![CDATA[Web]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/javascript_logo.jpg" class="right" width="230" height="194" alt="Javascript logo" style="float: right; margin-left: 10px; margin-bottom: 10px;height: 194px; " align="right"></p>

<p>Client-side Javascript development can be quite overwhelming, even for
senior developers. I'm describing here what I did in a recent piece of
client-side functionality to keep my sanity. This interface I'm
talking about is served on mobile-phones, so it must be pretty
bloat-free, adding salt over injury.</p>

<h2 id="dealing-with-modules-packaging-and-minifying" style="font-size: 150%; font-weight: bold;"><b>Dealing with modules, packaging and minifying<b></b></b></h2>

<p>This is probably my biggest gripe with Javascript, that you can't
simply <code class="highlighter-rouge">require("some.namespace")</code> without extra glue and tricks. This
is a limitation of the browser, as such operations would have to be
executed asynchronously, requiring tedious callbacks and because of
bandwidth constraints you may want to serve everything in a single
optimized and gzipped JS.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2012/11/07/notes-javascript-development.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2012/11/02/scala-functional-programming-type-classes.html</id>
   <title>On Scala, Functional Programming and Type-Classes</title>
   <link href="https://alexn.org/blog/2012/11/02/scala-functional-programming-type-classes.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2012-11-01T22:00:00+00:00</published>
   <updated>2012-11-01T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Languages]]></category>
   <category><![CDATA[Functional]]></category>
   <category><![CDATA[Scala]]></category>
   <category><![CDATA[Clojure]]></category>
   <category><![CDATA[Java]]></category>

   <content type="html"><![CDATA[
   <p>I've been following the excellent Coursera course on
<a href="https://www.coursera.org/course/progfun">Functional Programming Principles in Scala</a>
led by Martin Odersky. This was not my first encounter with Scala as
I've been using it including for my day job. In parallel, because I
felt the need for a Javascript replacement, I've been learning Clojure
too, because of the excellent ClojureScript.</p>

<p>I've fallen in love with both and I can't really pick a favorite. For
what is worth this document represents my (rookie) experience with
Scala, being complete yack shaving on my part, or you could call it
the intellectual masturbation of a fool.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2012/11/02/scala-functional-programming-type-classes.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2012/02/09/howto-build-naive-bayes-classifier.html</id>
   <title>How To Build a Naive Bayes Classifier</title>
   <link href="https://alexn.org/blog/2012/02/09/howto-build-naive-bayes-classifier.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2012-02-08T22:00:00+00:00</published>
   <updated>2012-02-08T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Algorithms]]></category>
   <category><![CDATA[Programming]]></category>
   <category><![CDATA[Mining]]></category>
   <category><![CDATA[Ruby]]></category>

   <content type="html"><![CDATA[
   <p>Some use-cases for building a classifier:</p>

<ul>
  <li>Spam detection, for example you could build your own
<a href="http://akismet.com/">Akismet</a> API</li>
  <li>Automatic assignment of categories to a set of items</li>
  <li>Automatic detection of the primary language (e.g. Google Translate)</li>
  <li>Sentiment analysis, which in simple terms refers to discovering if
an opinion is about love or hate about a certain topic</li>
</ul>

<p>In general you can do a lot better with more specialized techniques,
however the Naive Bayes classifier is general-purpose, simple to
implement and good-enough for most applications. And while other
algorithms give better accuracy, in general I discovered that having
better data in combination with an algorithm that you can tweak does
give better results for less effort.</p>

<p>In this article I'm describing the math behind it. Don't fear the
math, as this is simple enough that a high-schooler understands. And
even though there are a lot of libraries out there that already do
this, you're far better off for understanding the concept behind it,
otherwise you won't be able to tweak the implementation in response to
your needs.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2012/02/09/howto-build-naive-bayes-classifier.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2012/01/16/cosine-similarity-euclidean-distance.html</id>
   <title>Data Mining: Finding Similar Items and Users</title>
   <link href="https://alexn.org/blog/2012/01/16/cosine-similarity-euclidean-distance.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2012-01-15T22:00:00+00:00</published>
   <updated>2012-01-15T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Algorithms]]></category>
   <category><![CDATA[Programming]]></category>
   <category><![CDATA[Mining]]></category>
   <category><![CDATA[Ruby]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/similarity-graphic-small.png" class="right" width="150" height="102" alt="Similarity graphic small" style="float: right; margin-left: 10px; margin-bottom: 10px;height: 102px; " align="right"></p>

<p>Because we want to give kick-ass product recommendations.</p>

<p>I'm showing you how to find related items based on a really simple
formula. If you pay attention, this technique is used all over the web
(like on Amazon) to personalize the user experience and increase
conversion rates.</p>

<p>To get one question out of the way: there are already many available
libraries that do this, but as you'll see there are multiple ways of
skinning the cat and you won't be able to pick the right one without
understanding the process, at least intuitively.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2012/01/16/cosine-similarity-euclidean-distance.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2012/01/05/blogging-for-hackers.html</id>
   <title>Blogging Platform for Hackers</title>
   <link href="https://alexn.org/blog/2012/01/05/blogging-for-hackers.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2012-01-04T22:00:00+00:00</published>
   <updated>2012-01-04T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Publishing]]></category>
   <category><![CDATA[Server]]></category>
   <category><![CDATA[Cloud]]></category>
   <category><![CDATA[Heroku]]></category>
   <category><![CDATA[GAE]]></category>
   <category><![CDATA[Ruby]]></category>
   <category><![CDATA[Jekyll]]></category>

   <content type="html"><![CDATA[
   <p><img src="/assets/img/heroku.png" class="right" width="82" height="100" alt="Heroku" style="float: right; margin-left: 10px; margin-bottom: 10px;height: 100px; " align="right"></p>

<p>I'm showing you how to:</p>

<ul>
  <li>host your own static website on Heroku's free plan;</li>
  <li>use Google's App Engine as a CDN, for better responsiveness;</li>
  <li>keep Heroku's free dyno alive, by using a GAE cron job;</li>
  <li>have a very responsive, scalable and secure blog, with ultimate;
control and simplicity, for zero bucks per month;</li>
</ul>

<p>You could just skip this article and browse the source code of my
blog:</p>

<ul>
  <li><a href="https://github.com/alexandru/alexn.org">github.com/alexandru/alexn.org</a></li>
</ul>

<p>Forget about Wordpress or Blogger. Hacking your own stuff is much more
fun. Also, make sure to read
<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging Like a Hacker</a>,
by Tom Preston-Werner, GitHub's cofounder and the author of Jekyll.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2012/01/05/blogging-for-hackers.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/12/15/crawling-the-android-marketplace-155200-apps.html</id>
   <title>Crawling the Android Marketplace</title>
   <link href="https://alexn.org/blog/2011/12/15/crawling-the-android-marketplace-155200-apps.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-12-14T22:00:00+00:00</published>
   <updated>2011-12-14T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Python]]></category>
   <category><![CDATA[Android]]></category>
   <category><![CDATA[Mining]]></category>
   <category><![CDATA[Stats]]></category>
   <category><![CDATA[Web]]></category>
   <category><![CDATA[API]]></category>

   <content type="html"><![CDATA[
   <p>I had a very specific need for fetching the details for some apps in
the marketplace, in an automated manner. And so I found
<a href="https://github.com/jberkel/supermarket">the supermarket gem</a>, a
wrapper for the
<a href="http://code.google.com/p/android-market-api/">Android Market API</a>
Java implementation. However, it gives unpredictable results (it
wouldn't return the details of our in-house apps or of many other
examples I tried) and Google is placing hard-limits on the number of
requests you can make per minute. This is an internal API, probably
used by the marketplace client and the implementation mentioned above
was created through reverse-engineering.</p>

<p>This really pissed me off, this is Google, they should grok APIs. But
this info is already available from their website and so I went ahead
and crawled it.</p>

<p>The script and the data collected are is available. Read below.</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/12/15/crawling-the-android-marketplace-155200-apps.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/11/29/earning-money-as-an-amazon-affiliate.html</id>
   <title>Earning Money as an Amazon Affiliate</title>
   <link href="https://alexn.org/blog/2011/11/29/earning-money-as-an-amazon-affiliate.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-11-28T22:00:00+00:00</published>
   <updated>2011-11-28T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Story]]></category>
   <category><![CDATA[Publishing]]></category>
   <category><![CDATA[Income]]></category>
   <category><![CDATA[Amazon]]></category>

   <content type="html"><![CDATA[
   <p>
  I published an article that I've meant to publish for a long
  time. I'm usually lazy to not bother writing many articles, however
  this time I also thought about doing an experiment - you see I'm (1)
  on a tight budget and (2) a cheap bastard - so what if I could get
  enough money to pay for my monthly hosting on Linode, while
  satisfying my urge to write from time to time? 
</p>

<p>
  As such I included Amazon Affiliate links in that post to see what
  happens.
</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/11/29/earning-money-as-an-amazon-affiliate.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way.html</id>
   <title>4 Books For Learning to Design, The Hard Way</title>
   <link href="https://alexn.org/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-11-24T22:00:00+00:00</published>
   <updated>2011-11-24T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Books]]></category>
   <category><![CDATA[Design]]></category>
   <category><![CDATA[UX]]></category>

   <content type="html"><![CDATA[
   <p>
  This is the path I'm taking to <i>not suck</i> at design anymore, as
  frankly, I'm getting tired of sucking. I've read the first 3 books
  here and I'm having progress on the last one. I highly recommend all
  4.
</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/10/29/how-i-use-flickr.html</id>
   <title>How I Use Flickr: For Backup</title>
   <link href="https://alexn.org/blog/2011/10/29/how-i-use-flickr.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-10-28T21:00:00+00:00</published>
   <updated>2011-10-28T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Cloud]]></category>
   <category><![CDATA[API]]></category>

   <content type="html"><![CDATA[
   <p>
  I've got a growing number of personal pictures and the collection is
  growing since 2003, when I got my first digital camera, a shitty
  Sanyo that still works and that I still use whenever I forget about
  my Nikon.
</p>

<p>
  But here's the thing with digital pictures - <i><b>they are cheap to
  make, but also easy to lose</b></i>. Digital storage is not as
  reliable as glossy paper. Pictures printed on paper can easily last
  for a 100 years. That's not the case with any digital storage medium
  and we will suffer for it.
</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/10/29/how-i-use-flickr.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/10/23/why-i-find-heroku-suboptimal.html</id>
   <title>Why I Find Heroku Suboptimal</title>
   <link href="https://alexn.org/blog/2011/10/23/why-i-find-heroku-suboptimal.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-10-22T21:00:00+00:00</published>
   <updated>2011-10-22T21:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Heroku]]></category>
   <category><![CDATA[Server]]></category>
   <category><![CDATA[Cloud]]></category>
   <category><![CDATA[Nginx]]></category>
   <category><![CDATA[Varnish]]></category>
   <category><![CDATA[Linode]]></category>

   <content type="html"><![CDATA[
   <p>
  I love freebies. I often find myself compelled to search for the
  best price / convenience ratio, and from this perspective you cannot
  really argue against something offered for free. And yet, here I am
  bitching and moaning about Heroku.
</p>

<p>
  Heroku provides a free-quota that's a LOT more reasonable than all
  the shitty PHP hosting offerings out there. And when time comes to
  scale, it lets you scale nicely for a price.
</p>

<p>
  <b>UPDATE (Oct 21, 2013):</b> This article is outdated, sort
  of. Heroku's Cedar stack is awesome and cost-effective if you can
  design your app to be efficient in terms of throughput (which you
  can only achieve if you use a platform capable of high performance,
  like the JVM). I still think that when starting out, the next step
  after the free Heroku dyno, is to get your own VPS.
</p>

<p>
  Normally you develop your app on your localhost (which is like this
  warm and cozy place for all developers, <i>no place like
  127.0.0.1</i> and all that), but then you want to deploy. You have
  to get out of your comfort zone and face the jungle and it's a true
  jungle out there, filled with shitty / underpowered and expensive
  hosting offerings. If going for a normal VPS, you'll have to
  configure your application server, your database server, your
  webserver that sits on top, maybe a reverse proxy cache, a memcached
  instance or two, a load balancer, a firewall, an email server and it
  goes on and on. And if going for a classic shared-hosting
  environment, then God help you.
</p>

<p>
  There's a reason children with happy childhoods don't want to grow
  up - the world is an ugly and scary place.
</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/10/23/why-i-find-heroku-suboptimal.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
 <entry>
   <id>http://alexn.org/blog/2011/03/24/cross-domain-requests.html</id>
   <title>Cross-Domain, Cross-Browser AJAX Requests</title>
   <link href="https://alexn.org/blog/2011/03/24/cross-domain-requests.html?utm_source=RSS_Feed&amp;utm_medium=RSS&amp;utm_campaign=RSS_Syndication"/>
   <published>2011-03-23T22:00:00+00:00</published>
   <updated>2011-03-23T22:00:00+00:00</updated>

   <author>
     <name>Alexandru Nedelcu</name>
     <uri>https://alexn.org</uri>
   </author>

   <rights type="text">
     Copyright 2018 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   <category><![CDATA[Javascript]]></category>
   <category><![CDATA[Browser]]></category>
   <category><![CDATA[Web]]></category>

   <content type="html"><![CDATA[
   <p>
  This article describes how to make cross-browser requests, in all
  browsers (including <u>IExplorer 6</u>), without using a proxy or JSONP
  (which is limited and awkward) -- as long as you control the
  destination server, or if the destination server allows.
</p>

<p>
  I'm explaining this file: <a href="https://github.com/alexandru/crossdomain-requests-js/blob/gh-pages/public/crossdomain-ajax.js">crossdomain-ajax.js</a>
</p>

<h3 style="font-size: 120%; font-weight: bold;"><b>UPDATED Oct 27, 2011<b></b></b></h3>

<p>
  Added restrictions of usage and removed functionality that doesn't
  work on IExplorer. So in case this doesn't work for you, please see
  this page: <a href="https://github.com/alexandru/crossdomain-requests-js/wiki/Troubleshooting">Troubleshooting</a>
</p>



   <p><a rel="full-article" href="https://alexn.org/blog/2011/03/24/cross-domain-requests.html?utm_source=RSS_Feed&utm_medium=RSS&utm_campaign=RSS_Syndication"><b>Read This Article &raquo;</b></a></p>
   ]]></content>
 </entry>
</feed>
