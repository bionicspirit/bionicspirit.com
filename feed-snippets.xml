<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:dc="http://purl.org/dc/elements/1.1/">

  <channel>
    <title>Alexandru Nedelcu - Snippets</title>
    <description>Feed of snippets, published at alexn.org/snippets/</description>
    <link>https://alexn.org/snippets/</link>
    <atom:link href="https://alexn.org/feed-snippets.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Aug 2020 18:48:30 +0000</pubDate>
    <lastBuildDate>Mon, 24 Aug 2020 18:48:30 +0000</lastBuildDate>
  	<language>en</language>
    <sy:updatePeriod>hourly</sy:updatePeriod>
	  <sy:updateFrequency>1</sy:updateFrequency>
    <generator>Jekyll v4.1.1</generator>

    
      
      <item>
        <title>Error Hierarchy.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_08_14_error_hierarchy_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_08_14_error_hierarchy_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_08_14_error_hierarchy_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .c{color:#999}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .k{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .o{color:#555}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .no{color:#360}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_08_14_error_hierarchy_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_08_14_error_hierarchy_scala"><figure style="max-width: 100%; ">
  <a href="https://alexn.org/assets/media/snippets/error-hierarchy.svg" target="_blank">
    <img src="https://alexn.org/assets/media/snippets/error-hierarchy.svg" alt="Error hierarchy graph" title="Error hierarchy graph" style="max-width: 100%; width:100%;">
  </a>
</figure>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">KnownException</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>

<span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">KnownException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>

<span class="k">object</span> <span class="nc">InputException</span> <span class="o">{</span>
  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Validation</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">BadInput</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Forbidden</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">NotFound</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Conflict</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">InputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>
<span class="o">}</span>

<span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">OutputException</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">KnownException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>

<span class="k">object</span> <span class="nc">OutputException</span> <span class="o">{</span>
  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Timeout</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">OutputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">TooManyRequests</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">OutputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">ResourceUnavailable</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">OutputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>

  <span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Unknown</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">cause</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span>
    <span class="k">extends</span> <span class="nc">OutputException</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">)</span>
    <span class="k">with</span> <span class="nc">ExceptionCaseClassEquality</span>
<span class="o">}</span>

<span class="k">trait</span> <span class="nc">ExceptionCaseClassEquality</span> <span class="o">{</span> <span class="n">self</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="kt">with</span> <span class="kt">Product</span> <span class="o">=&gt;</span>
  <span class="k">override</span> <span class="k">def</span> <span class="nf">equals</span><span class="o">(</span><span class="n">other</span><span class="k">:</span> <span class="kt">Any</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="o">{</span>
    <span class="n">other</span> <span class="k">match</span> <span class="o">{</span>
      <span class="k">case</span> <span class="n">refTh</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span>
        <span class="n">refTh</span> <span class="k">match</span> <span class="o">{</span>
          <span class="k">case</span> <span class="n">refProd</span><span class="k">:</span> <span class="kt">Product</span> <span class="o">=&gt;</span>
            <span class="nv">productIterator</span><span class="o">.</span><span class="py">toSeq</span><span class="o">.</span><span class="py">equals</span><span class="o">(</span><span class="nv">refProd</span><span class="o">.</span><span class="py">productIterator</span><span class="o">.</span><span class="py">toSeq</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
              <span class="nv">getStackTrace</span><span class="o">.</span><span class="py">toSeq</span><span class="o">.</span><span class="py">equals</span><span class="o">(</span><span class="nv">refTh</span><span class="o">.</span><span class="py">getStackTrace</span><span class="o">.</span><span class="py">toSeq</span><span class="o">)</span>
          <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
            <span class="kc">false</span>
        <span class="o">}</span>
      <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
        <span class="kc">false</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/08/14/error-hierarchy.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/08/14/error-hierarchy.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Sbt Fork Debug.sbt</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .c{color:#999}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .k{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .o{color:#555}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .cp{color:#099}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .c1{color:#999}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .cs{color:#999}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .ge{font-style:italic}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gr{color:#f00}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gh{color:#030}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .go{color:#aaa}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gp{color:#009}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gu{color:#030}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .gt{color:#9c6}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kc{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kd{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kn{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kp{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kr{color:#069}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .kt{color:#078}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .m{color:#f60}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .s{color:#d44950}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nb{color:#366}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nc{color:#0a8}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .no{color:#360}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nd{color:#99f}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .ni{color:#999}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .ne{color:#c00}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nf{color:#c0f}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nl{color:#99f}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nn{color:#0cf}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .nv{color:#033}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .ow{color:#000}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .w{color:#bbb}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .mf{color:#f60}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .mh{color:#f60}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .mi{color:#f60}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .mo{color:#f60}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sb{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sc{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .s2{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .se{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sh{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .si{color:#a00}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sx{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .sr{color:#3aa}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .s1{color:#c30}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .ss{color:#fc3}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .bp{color:#366}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .vc{color:#033}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .vg{color:#033}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .vi{color:#033}#alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_08_13_sbt_fork_debug_sbt"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="n">fork</span> <span class="o">:=</span> <span class="kc">true</span>

<span class="n">javaOptions</span> <span class="o">++=</span> <span class="o">{</span>
  <span class="k">val</span> <span class="nv">Digits</span> <span class="k">=</span> <span class="s">"^(\\d+)$"</span><span class="o">.</span><span class="py">r</span>
  <span class="nv">sys</span><span class="o">.</span><span class="py">env</span><span class="o">.</span><span class="py">get</span><span class="o">(</span><span class="s">"JVM_DEBUG"</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="s">"true"</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="nc">Seq</span><span class="o">(</span><span class="s">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"</span><span class="o">)</span>
    <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">Digits</span><span class="o">(</span><span class="n">port</span><span class="o">))</span> <span class="k">=&gt;</span>
      <span class="nc">Seq</span><span class="o">(</span><span class="n">s</span><span class="s">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=$port"</span><span class="o">)</span>
    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
      <span class="nv">Seq</span><span class="o">.</span><span class="py">empty</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/08/13/sbt-fork-debug.sbt.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/08/13/sbt-fork-debug.sbt.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Flow Sensitive Typing.ts</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .c{color:#999}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .k{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .o{color:#555}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .cp{color:#099}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .c1{color:#999}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .cs{color:#999}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .ge{font-style:italic}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gr{color:#f00}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gh{color:#030}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .go{color:#aaa}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gp{color:#009}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gu{color:#030}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .gt{color:#9c6}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kc{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kd{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kn{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kp{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kr{color:#069}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .kt{color:#078}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .m{color:#f60}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .s{color:#d44950}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nb{color:#366}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nc{color:#0a8}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .no{color:#360}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nd{color:#99f}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .ni{color:#999}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .ne{color:#c00}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nf{color:#c0f}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nl{color:#99f}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nn{color:#0cf}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .nv{color:#033}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .ow{color:#000}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .w{color:#bbb}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .mf{color:#f60}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .mh{color:#f60}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .mi{color:#f60}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .mo{color:#f60}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sb{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sc{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .s2{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .se{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sh{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .si{color:#a00}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sx{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .sr{color:#3aa}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .s1{color:#c30}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .ss{color:#fc3}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .bp{color:#366}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .vc{color:#033}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .vg{color:#033}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .vi{color:#033}#alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_08_11_flow_sensitive_typing_ts"><div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="kd">type</span> <span class="nx">Left</span><span class="o">&lt;</span><span class="nx">L</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">either</span><span class="p">:</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span>
  <span class="na">value</span><span class="p">:</span> <span class="nx">L</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Right</span><span class="o">&lt;</span><span class="nx">R</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">either</span><span class="p">:</span> <span class="dl">"</span><span class="s2">right</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">value</span><span class="p">:</span> <span class="nx">R</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Either</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">,</span> <span class="nx">R</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nx">Left</span><span class="o">&lt;</span><span class="nx">L</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">Right</span><span class="o">&lt;</span><span class="nx">R</span><span class="o">&gt;</span>

<span class="kd">function</span> <span class="nx">left</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">,</span> <span class="nx">R</span><span class="o">=</span><span class="nx">never</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">L</span><span class="p">):</span> <span class="nx">Either</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">,</span> <span class="nx">R</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">either</span><span class="p">:</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">right</span><span class="o">&lt;</span><span class="nx">R</span><span class="p">,</span> <span class="nx">L</span><span class="o">=</span><span class="nx">never</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">R</span><span class="p">):</span> <span class="nx">Either</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">,</span> <span class="nx">R</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">either</span><span class="p">:</span> <span class="dl">"</span><span class="s2">right</span><span class="dl">"</span><span class="p">,</span> <span class="nx">value</span> <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ----</span>
<span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">left</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Flow-sensitive typing in action</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">either</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">l</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">string: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">l</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">r</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">value</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/08/11/flow-sensitive-typing.ts.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/08/11/flow-sensitive-typing.ts.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>On Error Retry Loop.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .c{color:#999}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .k{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .o{color:#555}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .no{color:#360}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_08_03_on_error_retry_loop_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_08_03_on_error_retry_loop_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">import</span> <span class="nn">java.io._</span>
<span class="k">import</span> <span class="nn">java.nio.charset.CharacterCodingException</span>

<span class="k">import</span> <span class="nn">cats.</span><span class="o">{</span> <span class="nc">ApplicativeError</span><span class="o">,</span> <span class="nc">Defer</span><span class="o">,</span> <span class="nc">MonadError</span> <span class="o">}</span>
<span class="k">import</span> <span class="nn">cats.effect._</span>
<span class="k">import</span> <span class="nn">cats.implicits._</span>
<span class="k">import</span> <span class="nn">com.typesafe.scalalogging.LazyLogging</span>

<span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>

<span class="cm">/**
  * Configuration for retry logic, could be read from a config file, via
  * something like [[https://github.com/pureconfig/pureconfig PureConfig]].
  */</span>
<span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">RetryConfig</span><span class="o">(</span>
  <span class="n">maxRetries</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
  <span class="n">initialDelay</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">,</span>
  <span class="n">maxDelay</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">,</span>
  <span class="n">backoffFactor</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span>
  <span class="k">private</span> <span class="k">val</span> <span class="nv">evolvedDelay</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">FiniteDuration</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span><span class="o">,</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">canRetry</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="n">maxRetries</span> <span class="o">&gt;</span> <span class="mi">0</span>

  <span class="k">def</span> <span class="nf">delay</span><span class="k">:</span> <span class="kt">FiniteDuration</span> <span class="o">=</span>
    <span class="nv">evolvedDelay</span><span class="o">.</span><span class="py">getOrElse</span><span class="o">(</span><span class="n">initialDelay</span><span class="o">)</span>

  <span class="k">def</span> <span class="nf">evolve</span><span class="k">:</span> <span class="kt">RetryConfig</span> <span class="o">=</span>
    <span class="nf">copy</span><span class="o">(</span>
      <span class="n">maxRetries</span> <span class="k">=</span> <span class="nv">math</span><span class="o">.</span><span class="py">max</span><span class="o">(</span><span class="n">maxRetries</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span>
      <span class="n">evolvedDelay</span> <span class="k">=</span> <span class="nc">Some</span> <span class="o">{</span>
        <span class="k">val</span> <span class="nv">nextDelay</span> <span class="k">=</span> <span class="nv">evolvedDelay</span><span class="o">.</span><span class="py">getOrElse</span><span class="o">(</span><span class="n">initialDelay</span><span class="o">)</span> <span class="o">*</span> <span class="n">backoffFactor</span>
        <span class="nv">maxDelay</span><span class="o">.</span><span class="py">min</span><span class="o">(</span><span class="n">nextDelay</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
          <span class="k">case</span> <span class="n">ref</span><span class="k">:</span> <span class="kt">FiniteDuration</span> <span class="o">=&gt;</span> <span class="n">ref</span>
          <span class="k">case</span> <span class="k">_:</span> <span class="kt">Duration.Infinite</span> <span class="o">=&gt;</span> <span class="n">maxDelay</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">)</span>
<span class="o">}</span>

<span class="cm">/**
  * Signaling desired outcomes via Boolean is very confusing,
  * having our own ADT for this is better.
  */</span>
<span class="k">sealed</span> <span class="k">trait</span> <span class="nc">RetryOutcome</span>

<span class="k">object</span> <span class="nc">RetryOutcome</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">object</span> <span class="nc">Next</span> <span class="k">extends</span> <span class="nc">RetryOutcome</span>
  <span class="k">case</span> <span class="k">object</span> <span class="nc">Raise</span> <span class="k">extends</span> <span class="nc">RetryOutcome</span>
<span class="o">}</span>

<span class="cm">/** Module grouping our retry helpers. */</span>
<span class="k">object</span> <span class="nc">OnErrorRetry</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">loop</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span>, <span class="kt">S</span><span class="o">](</span>
    <span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span>
    <span class="n">initial</span><span class="k">:</span> <span class="kt">S</span>
  <span class="o">)(</span>
    <span class="n">f</span><span class="k">:</span> <span class="o">(</span><span class="kt">Throwable</span><span class="o">,</span> <span class="kt">S</span><span class="o">,</span> <span class="n">S</span> <span class="k">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span> <span class="k">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
  <span class="o">)(</span><span class="k">implicit</span> <span class="n">F</span><span class="k">:</span> <span class="kt">ApplicativeError</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">Throwable</span><span class="o">],</span> <span class="n">D</span><span class="k">:</span> <span class="kt">Defer</span><span class="o">[</span><span class="kt">F</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="nv">fa</span><span class="o">.</span><span class="py">handleErrorWith</span> <span class="o">{</span> <span class="n">err</span> <span class="k">=&gt;</span>
      <span class="nf">f</span><span class="o">(</span><span class="n">err</span><span class="o">,</span> <span class="n">initial</span><span class="o">,</span> <span class="n">state</span> <span class="k">=&gt;</span> <span class="nv">D</span><span class="o">.</span><span class="py">defer</span><span class="o">(</span><span class="nf">loop</span><span class="o">(</span><span class="n">fa</span><span class="o">,</span> <span class="n">state</span><span class="o">)(</span><span class="n">f</span><span class="o">)))</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="k">def</span> <span class="nf">withBackoff</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">fa</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">],</span> <span class="n">config</span><span class="k">:</span> <span class="kt">RetryConfig</span><span class="o">)(</span>
    <span class="n">p</span><span class="k">:</span> <span class="kt">Throwable</span> <span class="o">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">RetryOutcome</span><span class="o">]</span>
  <span class="o">)(</span><span class="k">implicit</span>
    <span class="n">F</span><span class="k">:</span> <span class="kt">MonadError</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">Throwable</span><span class="o">],</span>
    <span class="n">D</span><span class="k">:</span> <span class="kt">Defer</span><span class="o">[</span><span class="kt">F</span><span class="o">],</span>
    <span class="n">timer</span><span class="k">:</span> <span class="kt">Timer</span><span class="o">[</span><span class="kt">F</span><span class="o">]</span>
  <span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="nv">OnErrorRetry</span><span class="o">.</span><span class="py">loop</span><span class="o">(</span><span class="n">fa</span><span class="o">,</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span> <span class="o">(</span><span class="n">error</span><span class="o">,</span> <span class="n">state</span><span class="o">,</span> <span class="n">retry</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="nf">if</span> <span class="o">(</span><span class="nv">state</span><span class="o">.</span><span class="py">canRetry</span><span class="o">)</span>
        <span class="nf">p</span><span class="o">(</span><span class="n">error</span><span class="o">).</span><span class="py">flatMap</span> <span class="o">{</span>
          <span class="k">case</span> <span class="nv">RetryOutcome</span><span class="o">.</span><span class="py">Next</span> <span class="k">=&gt;</span>
            <span class="nv">timer</span><span class="o">.</span><span class="py">sleep</span><span class="o">(</span><span class="nv">state</span><span class="o">.</span><span class="py">delay</span><span class="o">)</span> <span class="o">*&gt;</span> <span class="nf">retry</span><span class="o">(</span><span class="nv">state</span><span class="o">.</span><span class="py">evolve</span><span class="o">)</span>
          <span class="k">case</span> <span class="nv">RetryOutcome</span><span class="o">.</span><span class="py">Raise</span> <span class="k">=&gt;</span>
            <span class="c1">// Cannot recover from error</span>
            <span class="nv">F</span><span class="o">.</span><span class="py">raiseError</span><span class="o">(</span><span class="n">error</span><span class="o">)</span>
        <span class="o">}</span>
      <span class="k">else</span>
        <span class="c1">// No retries left</span>
        <span class="nv">F</span><span class="o">.</span><span class="py">raiseError</span><span class="o">(</span><span class="n">error</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">Playground</span> <span class="k">extends</span> <span class="nc">LazyLogging</span> <span class="k">with</span> <span class="nc">IOApp</span> <span class="o">{</span>
  <span class="c1">// Motivating example, not very good, but go with it</span>
  <span class="k">def</span> <span class="nf">readTextFromFile</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">File</span><span class="o">,</span> <span class="n">charset</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">IO</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span>
    <span class="nc">IO</span> <span class="o">{</span>
      <span class="k">val</span> <span class="nv">in</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">file</span><span class="o">),</span> <span class="n">charset</span><span class="o">))</span>
      <span class="k">val</span> <span class="nv">builder</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">()</span>

      <span class="k">var</span> <span class="n">line</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="kc">null</span>
      <span class="k">do</span> <span class="o">{</span>
        <span class="n">line</span> <span class="k">=</span> <span class="nv">in</span><span class="o">.</span><span class="py">readLine</span><span class="o">()</span>
        <span class="nf">if</span> <span class="o">(</span><span class="n">line</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
          <span class="nv">builder</span><span class="o">.</span><span class="py">append</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="py">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">)</span>
      <span class="o">}</span> <span class="nf">while</span> <span class="o">(</span><span class="n">line</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>

      <span class="nv">builder</span><span class="o">.</span><span class="py">toString</span>
    <span class="o">}</span>

  <span class="k">override</span> <span class="k">def</span> <span class="nf">run</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span><span class="k">:</span> <span class="kt">IO</span><span class="o">[</span><span class="kt">ExitCode</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">val</span> <span class="nv">config</span> <span class="k">=</span> <span class="nc">RetryConfig</span><span class="o">(</span>
      <span class="n">maxRetries</span> <span class="k">=</span> <span class="mi">10</span><span class="o">,</span>
      <span class="n">initialDelay</span> <span class="k">=</span> <span class="mf">10.</span><span class="n">millis</span><span class="o">,</span>
      <span class="n">maxDelay</span> <span class="k">=</span> <span class="mf">2.</span><span class="n">seconds</span><span class="o">,</span>
      <span class="n">backoffFactor</span> <span class="k">=</span> <span class="mf">1.5</span>
    <span class="o">)</span>
    <span class="k">val</span> <span class="nv">task</span> <span class="k">=</span> <span class="nv">IO</span><span class="o">.</span><span class="py">suspend</span> <span class="o">{</span>
      <span class="k">val</span> <span class="nv">path</span> <span class="k">=</span> <span class="nv">args</span><span class="o">.</span><span class="py">headOption</span><span class="o">.</span><span class="py">getOrElse</span><span class="o">(</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"File path expected in main's args"</span><span class="o">)</span>
      <span class="o">)</span>
      <span class="nf">readTextFromFile</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">path</span><span class="o">),</span> <span class="s">"UTF-8"</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="k">val</span> <span class="nv">text</span> <span class="k">=</span> <span class="nv">OnErrorRetry</span><span class="o">.</span><span class="py">withBackoff</span><span class="o">(</span><span class="n">task</span><span class="o">,</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">case</span> <span class="k">_:</span> <span class="kt">CharacterCodingException</span> <span class="kt">|</span> <span class="k">_</span><span class="kt">:</span> <span class="kt">IllegalArgumentException</span> <span class="o">=&gt;</span>
        <span class="nv">IO</span><span class="o">.</span><span class="py">pure</span><span class="o">(</span><span class="nv">RetryOutcome</span><span class="o">.</span><span class="py">Raise</span><span class="o">)</span>
      <span class="k">case</span> <span class="n">e</span> <span class="k">=&gt;</span>
        <span class="nc">IO</span><span class="o">(</span><span class="nv">logger</span><span class="o">.</span><span class="py">warn</span><span class="o">(</span><span class="s">"Unexpected error, retrying"</span><span class="o">,</span> <span class="n">e</span><span class="o">))</span>
          <span class="o">.</span><span class="py">as</span><span class="o">(</span><span class="nv">RetryOutcome</span><span class="o">.</span><span class="py">Next</span><span class="o">)</span>
    <span class="o">}</span>
    <span class="k">for</span> <span class="o">{</span>
      <span class="n">t</span> <span class="k">&lt;-</span> <span class="n">text</span>
      <span class="k">_</span> <span class="k">&lt;-</span> <span class="nc">IO</span><span class="o">(</span><span class="nf">println</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
    <span class="o">}</span> <span class="k">yield</span> <span class="nv">ExitCode</span><span class="o">.</span><span class="py">Success</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/08/03/on-error-retry-loop.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/08/03/on-error-retry-loop.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Resource As Publisher.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .c{color:#999}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .k{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .o{color:#555}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .no{color:#360}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_07_30_resource_as_publisher_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_07_30_resource_as_publisher_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="cm">/**
  * Imported from Gist:
  * [[https://gist.github.com/alexandru/b258f67ab1e21d61d06dcfd6ec73557a]]
  */</span>

<span class="k">import</span> <span class="nn">java.util.concurrent.atomic.AtomicReference</span>
<span class="k">import</span> <span class="nn">cats.effect.</span><span class="o">{</span> <span class="nc">IO</span><span class="o">,</span> <span class="nc">Resource</span> <span class="o">}</span>
<span class="k">import</span> <span class="nn">com.ing.raptor.common.UnlawfulEffect</span>
<span class="k">import</span> <span class="nn">org.reactivestreams.</span><span class="o">{</span> <span class="nc">Publisher</span><span class="o">,</span> <span class="nc">Subscriber</span><span class="o">,</span> <span class="nc">Subscription</span> <span class="o">}</span>

<span class="cm">/**
  * WARN: broken example, this cannot work, as it leaks, DO NOT USE!
  */</span>
<span class="k">def</span> <span class="nf">resourceAsPublisher</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">r</span><span class="k">:</span> <span class="kt">Resource</span><span class="o">[</span><span class="kt">IO</span>, <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Publisher</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">new</span> <span class="nc">Publisher</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
    <span class="k">override</span> <span class="k">def</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">Subscriber</span><span class="o">[</span><span class="k">_</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
      <span class="nv">s</span><span class="o">.</span><span class="py">onSubscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">Subscription</span> <span class="o">{</span>
        <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">var</span> <span class="n">phase</span><span class="k">:</span> <span class="kt">Long</span> <span class="o">=</span> <span class="mi">2</span>
        <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nv">cancelable</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AtomicReference</span><span class="o">(</span><span class="nv">IO</span><span class="o">.</span><span class="py">unit</span><span class="o">)</span>

        <span class="k">override</span> <span class="k">def</span> <span class="nf">request</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
          <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nv">s</span><span class="o">.</span><span class="py">onError</span><span class="o">(</span><span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"n must be strictly positive"</span><span class="o">))</span>
            <span class="k">return</span>
          <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Oops!!!</span>
            <span class="nv">s</span><span class="o">.</span><span class="py">onError</span><span class="o">(</span><span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"resource will be closed immediately if buffered"</span><span class="o">))</span>
            <span class="k">return</span>
          <span class="o">}</span>

          <span class="n">phase</span> <span class="k">=</span> <span class="nv">math</span><span class="o">.</span><span class="py">max</span><span class="o">(</span><span class="n">phase</span> <span class="o">-</span> <span class="n">n</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
          <span class="n">phase</span> <span class="k">match</span> <span class="o">{</span>
            <span class="k">case</span> <span class="mi">1</span> <span class="k">=&gt;</span>
              <span class="nv">r</span><span class="o">.</span><span class="py">allocated</span><span class="o">.</span><span class="py">flatMap</span> <span class="o">{</span>
                <span class="nf">case</span> <span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">cancel</span><span class="o">)</span> <span class="k">=&gt;</span>
                  <span class="nf">if</span> <span class="o">(!</span><span class="nv">cancelable</span><span class="o">.</span><span class="py">compareAndSet</span><span class="o">(</span><span class="nv">IO</span><span class="o">.</span><span class="py">unit</span><span class="o">,</span> <span class="n">cancel</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">cancel</span> <span class="o">*&gt;</span> <span class="nc">IO</span><span class="o">(</span><span class="nv">s</span><span class="o">.</span><span class="py">onComplete</span><span class="o">())</span>
                  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="nc">IO</span><span class="o">(</span><span class="nv">s</span><span class="o">.</span><span class="py">onNext</span><span class="o">(</span><span class="n">res</span><span class="o">))</span>
                  <span class="o">}</span>
              <span class="o">}.</span><span class="py">unsafeToFuture</span>
            <span class="k">case</span> <span class="mi">0</span> <span class="k">=&gt;</span>
              <span class="nv">closeAndSignal</span><span class="o">.</span><span class="py">unsafeToFuture</span>
          <span class="o">}</span>
          <span class="o">()</span>
        <span class="o">}</span>

        <span class="k">override</span> <span class="k">def</span> <span class="nf">cancel</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
          <span class="nv">UnlawfulEffect</span><span class="o">.</span><span class="py">unsafeToFuture</span><span class="o">(</span><span class="n">closeAndSignal</span><span class="o">)</span>
          <span class="o">()</span>
        <span class="o">}</span>

        <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">val</span> <span class="nv">closeAndSignal</span><span class="k">:</span> <span class="kt">IO</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
          <span class="nv">IO</span><span class="o">.</span><span class="py">suspend</span> <span class="o">{</span>
            <span class="k">val</span> <span class="nv">cancel</span> <span class="k">=</span> <span class="nv">cancelable</span><span class="o">.</span><span class="py">getAndSet</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
            <span class="nf">if</span> <span class="o">(</span><span class="n">cancel</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">cancel</span> <span class="o">*&gt;</span> <span class="nc">IO</span><span class="o">(</span><span class="nv">s</span><span class="o">.</span><span class="py">onComplete</span><span class="o">())</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
              <span class="nv">IO</span><span class="o">.</span><span class="py">unit</span>
            <span class="o">}</span>
          <span class="o">}</span>
      <span class="o">})</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/07/30/resource-as-publisher.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/07/30/resource-as-publisher.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Python Proxy.py</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_07_30_python_proxy_py .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_07_30_python_proxy_py code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_07_30_python_proxy_py div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_07_30_python_proxy_py div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .c{color:#999}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .k{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .o{color:#555}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .cp{color:#099}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .c1{color:#999}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .cs{color:#999}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .ge{font-style:italic}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gr{color:#f00}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gh{color:#030}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .go{color:#aaa}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gp{color:#009}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gu{color:#030}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .gt{color:#9c6}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kc{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kd{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kn{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kp{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kr{color:#069}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .kt{color:#078}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .m{color:#f60}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .s{color:#d44950}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nb{color:#366}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nc{color:#0a8}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .no{color:#360}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nd{color:#99f}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .ni{color:#999}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .ne{color:#c00}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nf{color:#c0f}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nl{color:#99f}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nn{color:#0cf}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .nv{color:#033}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .ow{color:#000}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .w{color:#bbb}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .mf{color:#f60}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .mh{color:#f60}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .mi{color:#f60}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .mo{color:#f60}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sb{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sc{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .s2{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .se{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sh{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .si{color:#a00}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sx{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .sr{color:#3aa}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .s1{color:#c30}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .ss{color:#fc3}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .bp{color:#366}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .vc{color:#033}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .vg{color:#033}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .vi{color:#033}#alexn_post__snippets_2020_07_30_python_proxy_py .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_07_30_python_proxy_py"><div class="language-py highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">class</span> <span class="nc">ProxyAttribute</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">"."</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span>

    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ProxyInvoke</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span> <span class="o">=</span> <span class="n">kwargs</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">args_str</span>   <span class="o">=</span> <span class="s">', '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">args</span><span class="p">)</span>
        <span class="n">kwargs_str</span> <span class="o">=</span> <span class="s">', '</span><span class="p">.</span><span class="n">join</span><span class="p">([</span> <span class="s">"%s=%s"</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span> <span class="p">])</span>

        <span class="n">args_list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">args_str</span><span class="p">:</span> <span class="n">args_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">args_str</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">kwargs_str</span><span class="p">:</span> <span class="n">args_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">kwargs_str</span><span class="p">)</span>

        <span class="k">return</span> <span class="s">"  invoke(%s)"</span> <span class="o">%</span> <span class="s">', '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">args_list</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">obj</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ProxyInvokeIndex</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">set_value</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_value</span> <span class="o">=</span> <span class="n">set_value</span>
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">set_value</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"  __getitem__(%s)"</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">key</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"  __setitem__(%s, %s)"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">key</span><span class="p">),</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>
    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">set_value</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">obj</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">key</span><span class="p">]</span>
        <span class="n">obj</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">value</span>

<span class="k">class</span> <span class="nc">Proxy</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">on_error_callback</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">_chain</span><span class="o">=</span><span class="p">[],</span> <span class="n">_memo</span><span class="o">=</span><span class="p">[]):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_wrapped_inst</span> <span class="o">=</span> <span class="n">instance</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_chain</span> <span class="o">=</span> <span class="n">_chain</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_on_error_callback</span> <span class="o">=</span> <span class="n">on_error_callback</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">_memo</span> <span class="o">=</span> <span class="n">_memo</span>

    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_new_proxy</span><span class="p">(</span><span class="n">ProxyAttribute</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_new_proxy</span><span class="p">(</span><span class="n">ProxyInvoke</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_new_proxy</span><span class="p">(</span><span class="n">ProxyInvokeIndex</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_new_proxy</span><span class="p">(</span><span class="n">ProxyInvokeIndex</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_new_proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">appended</span><span class="p">):</span>
        <span class="n">newc</span> <span class="o">=</span> <span class="p">[</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_chain</span> <span class="p">]</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">appended</span><span class="p">:</span> <span class="n">newc</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">newm</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_memo</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">Proxy</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_wrapped_inst</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">_on_error_callback</span><span class="p">,</span> <span class="n">newc</span><span class="p">,</span> <span class="n">newm</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">do_cache</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">should_exist</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">do</span><span class="p">(</span><span class="n">should_exist</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">should_exist</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_wrapped_inst</span>

        <span class="n">step_idx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_chain</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_memo</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">step_idx</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">step_idx</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">_memo</span><span class="p">):</span>
                    <span class="n">ret</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_memo</span><span class="p">[</span><span class="n">step_idx</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">ret</span> <span class="o">=</span> <span class="n">step</span><span class="p">.</span><span class="n">do</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">should_exist</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span>
                        <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="s">"returned value was nulls"</span><span class="p">)</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">_memo</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
                    <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_on_error_callback</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_on_error_callback</span><span class="p">(</span><span class="n">exc</span><span class="o">=</span><span class="n">e</span><span class="p">,</span> <span class="n">obj</span><span class="o">=</span><span class="n">ret</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="n">step</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">raise</span>
            <span class="n">step_idx</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">return</span> <span class="n">ret</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">str</span> <span class="o">=</span> <span class="s">"[Proxy Invocation: </span><span class="se">\n</span><span class="s">"</span>
        <span class="k">for</span> <span class="n">o</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">_chain</span><span class="p">:</span>
            <span class="nb">str</span> <span class="o">+=</span> <span class="s">'  '</span> <span class="o">+</span> <span class="nb">repr</span><span class="p">(</span><span class="n">o</span><span class="p">)</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
        <span class="k">return</span> <span class="nb">str</span> <span class="o">+</span> <span class="s">']'</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/07/30/python-proxy.py.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/07/30/python-proxy.py.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>From Resource To Reactivestreams.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .c{color:#999}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .k{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .o{color:#555}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .no{color:#360}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_07_30_from_resource_to_reactivestreams_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">import</span> <span class="nn">cats.effect.Resource</span>
<span class="k">import</span> <span class="nn">org.reactivestreams.Publisher</span>
<span class="k">import</span> <span class="nn">scala.concurrent.Future</span>

<span class="k">type</span> <span class="kt">Ack</span><span class="o">[</span><span class="kt">F</span><span class="o">]</span> <span class="k">=</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">F</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span>

<span class="c1">// This leaks</span>
<span class="k">def</span> <span class="nf">fromResource</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">res</span><span class="k">:</span> <span class="kt">Resource</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Publisher</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span>

<span class="c1">// Explicit acknowledgement logic is required</span>
<span class="k">def</span> <span class="nf">fromResource</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>, <span class="kt">A</span><span class="o">](</span><span class="n">res</span><span class="k">:</span> <span class="kt">Resource</span><span class="o">[</span><span class="kt">F</span>, <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Publisher</span><span class="o">[(</span><span class="kt">A</span>, <span class="kt">Ack</span><span class="o">[</span><span class="kt">F</span><span class="o">])]]</span>

<span class="c1">//-------------</span>

<span class="c1">// Similarly for concrete resources, this leaks!</span>
<span class="k">def</span> <span class="nf">fromFile</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">File</span><span class="o">)</span><span class="k">:</span> <span class="kt">Publisher</span><span class="o">[</span><span class="kt">InputStream</span><span class="o">]</span>

<span class="c1">// Explicit acknowledgement logic is required</span>
<span class="k">def</span> <span class="nf">fromFile</span><span class="o">(</span><span class="n">file</span><span class="k">:</span> <span class="kt">File</span><span class="o">)</span><span class="k">:</span> <span class="kt">Publisher</span><span class="o">[(</span><span class="kt">InputStream</span>, <span class="kt">Ack</span><span class="o">[</span><span class="kt">Future</span><span class="o">])]</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/07/30/from-resource-to-reactivestreams.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/07/30/from-resource-to-reactivestreams.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Enumeratum.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_07_30_enumeratum_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_07_30_enumeratum_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_07_30_enumeratum_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_07_30_enumeratum_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .c{color:#999}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .k{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .o{color:#555}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .no{color:#360}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_07_30_enumeratum_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_07_30_enumeratum_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="cm">/**
  * Imported from Gist:
  * [[https://gist.github.com/alexandru/3df8116f1c85f69612143b3b1884e1ed]]
  */</span>

<span class="k">import</span> <span class="nn">enumeratum.</span><span class="o">{</span> <span class="nc">CatsEnum</span><span class="o">,</span> <span class="nc">Enum</span><span class="o">,</span> <span class="nc">EnumEntry</span> <span class="o">}</span>

<span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="k">override</span> <span class="k">val</span> <span class="nv">entryName</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
  <span class="k">extends</span> <span class="nc">Product</span>
  <span class="k">with</span> <span class="nc">Serializable</span>
  <span class="k">with</span> <span class="nc">EnumEntry</span>

<span class="k">object</span> <span class="nc">AcknowledgeMode</span> <span class="k">extends</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">AcknowledgeMode</span><span class="o">]</span> <span class="k">with</span> <span class="nc">CatsEnum</span><span class="o">[</span><span class="kt">AcknowledgeMode</span><span class="o">]</span> <span class="o">{</span>
  <span class="k">val</span> <span class="nv">values</span> <span class="k">=</span> <span class="n">findValues</span>

  <span class="k">case</span> <span class="k">object</span> <span class="nc">Off</span> <span class="k">extends</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="s">"off"</span><span class="o">)</span>

  <span class="k">case</span> <span class="k">object</span> <span class="nc">Auto</span> <span class="k">extends</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="s">"auto"</span><span class="o">)</span>

  <span class="k">case</span> <span class="k">object</span> <span class="nc">Client</span> <span class="k">extends</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="s">"client"</span><span class="o">)</span>

  <span class="k">case</span> <span class="k">object</span> <span class="nc">DuplicatesOk</span> <span class="k">extends</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="s">"duplicates-ok"</span><span class="o">)</span>

  <span class="k">case</span> <span class="k">object</span> <span class="nc">Session</span> <span class="k">extends</span> <span class="nc">AcknowledgeMode</span><span class="o">(</span><span class="s">"session"</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/07/30/enumeratum.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/07/30/enumeratum.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Akka Streams Buffer Test.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .c{color:#999}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .k{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .o{color:#555}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .no{color:#360}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_07_30_akka_streams_buffer_test_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="cm">/**
  * Imported from Gist:
  * [[https://gist.github.com/alexandru/23e102b4891cda37ab41ffa74d40e390]]
  */</span>

<span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
<span class="k">import</span> <span class="nn">akka.stream.Attributes</span>
<span class="k">import</span> <span class="nn">akka.stream.scaladsl.Source</span>
<span class="k">import</span> <span class="nn">monix.execution.rstreams.Subscription</span>
<span class="k">import</span> <span class="nn">org.reactivestreams.</span><span class="o">{</span> <span class="nc">Publisher</span><span class="o">,</span> <span class="nc">Subscriber</span> <span class="o">}</span>

<span class="k">import</span> <span class="nn">scala.concurrent.</span><span class="o">{</span> <span class="nc">Await</span><span class="o">,</span> <span class="nc">ExecutionContext</span><span class="o">,</span> <span class="nc">Future</span> <span class="o">}</span>
<span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>

<span class="k">def</span> <span class="nf">repeated</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">ec</span><span class="k">:</span> <span class="kt">ExecutionContext</span><span class="o">)</span><span class="k">:</span> <span class="kt">Publisher</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span>
  <span class="k">new</span> <span class="nc">Publisher</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="o">{</span>
    <span class="k">override</span> <span class="k">def</span> <span class="nf">subscribe</span><span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">Subscriber</span><span class="o">[</span><span class="k">_</span> <span class="k">&gt;:</span> <span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span>
      <span class="nv">s</span><span class="o">.</span><span class="py">onSubscribe</span><span class="o">(</span><span class="k">new</span> <span class="nc">Subscription</span> <span class="o">{</span>
        <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">var</span> <span class="n">current</span> <span class="k">=</span> <span class="n">x</span>
        <span class="k">private</span><span class="o">[</span><span class="kt">this</span><span class="o">]</span> <span class="k">var</span> <span class="n">requestCount</span> <span class="k">=</span> <span class="mi">0</span>

        <span class="k">override</span> <span class="k">def</span> <span class="nf">cancel</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">()</span>
        <span class="k">override</span> <span class="k">def</span> <span class="nf">request</span><span class="o">(</span><span class="n">n</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
          <span class="n">requestCount</span> <span class="o">+=</span> <span class="mi">1</span>
          <span class="nf">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Request ($requestCount): $n"</span><span class="o">)</span>

          <span class="nv">ec</span><span class="o">.</span><span class="py">execute</span><span class="o">(()</span> <span class="k">=&gt;</span> <span class="o">{</span>
            <span class="k">var</span> <span class="n">i</span> <span class="k">=</span> <span class="mi">0L</span>
            <span class="nf">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">val</span> <span class="nv">c</span> <span class="k">=</span> <span class="n">current</span>
              <span class="n">current</span> <span class="k">=</span> <span class="nf">f</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
              <span class="nv">s</span><span class="o">.</span><span class="py">onNext</span><span class="o">(</span><span class="n">c</span><span class="o">)</span>
              <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="o">}</span>
          <span class="o">})</span>
        <span class="o">}</span>
      <span class="o">})</span>
  <span class="o">}</span>

<span class="k">def</span> <span class="nf">run</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">val</span> <span class="nv">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
  <span class="k">implicit</span> <span class="k">val</span> <span class="nv">ec</span> <span class="k">=</span> <span class="nv">system</span><span class="o">.</span><span class="py">dispatcher</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="k">val</span> <span class="nv">f</span> <span class="k">=</span> <span class="nc">Source</span>
      <span class="o">.</span><span class="py">fromPublisher</span><span class="o">(</span><span class="nf">repeated</span><span class="o">(</span><span class="mi">1</span><span class="o">)(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
      <span class="o">.</span><span class="py">mapAsync</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span>
        <span class="nc">Future</span> <span class="o">{</span>
          <span class="nv">Thread</span><span class="o">.</span><span class="py">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">)</span>
          <span class="nf">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Received: $x"</span><span class="o">)</span>
        <span class="o">}</span>
      <span class="o">}</span>
      <span class="o">.</span><span class="py">withAttributes</span><span class="o">(</span><span class="nv">Attributes</span><span class="o">.</span><span class="py">inputBuffer</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">))</span>
      <span class="o">.</span><span class="py">take</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>
      <span class="o">.</span><span class="py">run</span><span class="o">()</span>

    <span class="nv">Await</span><span class="o">.</span><span class="py">result</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="nv">Duration</span><span class="o">.</span><span class="py">Inf</span><span class="o">);</span> <span class="o">()</span>
  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
    <span class="nv">Await</span><span class="o">.</span><span class="py">result</span><span class="o">(</span><span class="nv">system</span><span class="o">.</span><span class="py">terminate</span><span class="o">(),</span> <span class="mf">10.</span><span class="n">seconds</span><span class="o">);</span> <span class="o">()</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/07/30/akka-streams-buffer-test.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/07/30/akka-streams-buffer-test.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Future Stack Overflow.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .c{color:#999}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .k{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .o{color:#555}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .cp{color:#099}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .c1{color:#999}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .cs{color:#999}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gr{color:#f00}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gh{color:#030}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .go{color:#aaa}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gp{color:#009}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gu{color:#030}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kc{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kd{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kn{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kp{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kr{color:#069}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .kt{color:#078}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .m{color:#f60}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .s{color:#d44950}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nb{color:#366}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .no{color:#360}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nd{color:#99f}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .ni{color:#999}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .ne{color:#c00}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nl{color:#99f}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .nv{color:#033}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .ow{color:#000}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .w{color:#bbb}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .mf{color:#f60}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .mh{color:#f60}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .mi{color:#f60}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .mo{color:#f60}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sb{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sc{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .s2{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .se{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sh{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .si{color:#a00}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sx{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .s1{color:#c30}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .bp{color:#366}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .vc{color:#033}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .vg{color:#033}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .vi{color:#033}#alexn_post__snippets_2020_05_27_future_stack_overflow_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_05_27_future_stack_overflow_scala"><div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="c1">// Demonstrating that directly executing runnables in your </span>
<span class="c1">// ExecutionContext is a really bad idea</span>

<span class="k">def</span> <span class="nf">trigger</span><span class="o">(</span><span class="n">cycles</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">val</span> <span class="nv">directEC</span> <span class="k">=</span>
    <span class="k">new</span> <span class="nc">ExecutionContext</span> <span class="o">{</span>
      <span class="k">def</span> <span class="nf">execute</span><span class="o">(</span><span class="n">r</span><span class="k">:</span> <span class="kt">Runnable</span><span class="o">)</span> <span class="k">=</span> <span class="nv">r</span><span class="o">.</span><span class="py">run</span><span class="o">()</span>
      <span class="k">def</span> <span class="nf">reportFailure</span><span class="o">(</span><span class="n">e</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">)</span> <span class="k">=</span> <span class="k">throw</span> <span class="n">e</span>
    <span class="o">}</span>

  <span class="k">val</span> <span class="nv">p</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">Int</span><span class="o">]()</span>
  <span class="k">val</span> <span class="nv">f</span> <span class="k">=</span> <span class="o">(</span><span class="mi">0</span> <span class="n">until</span> <span class="n">cycles</span><span class="o">).</span><span class="py">foldLeft</span><span class="o">(</span><span class="nv">p</span><span class="o">.</span><span class="py">future</span><span class="o">)((</span><span class="n">f</span><span class="o">,</span> <span class="k">_</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nv">f</span><span class="o">.</span><span class="py">map</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span>
  <span class="nv">p</span><span class="o">.</span><span class="py">success</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
  <span class="n">f</span>
<span class="o">}</span>

<span class="c1">// Throws StackOverflowError</span>
<span class="nf">trigger</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/05/27/future-stack-overflow.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/05/27/future-stack-overflow.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Send Mail.py</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_03_18_send_mail_py .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_03_18_send_mail_py .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_03_18_send_mail_py code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_03_18_send_mail_py div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_03_18_send_mail_py div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .c{color:#999}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .k{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .o{color:#555}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .cp{color:#099}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .c1{color:#999}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .cs{color:#999}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .ge{font-style:italic}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gr{color:#f00}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gh{color:#030}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .go{color:#aaa}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gp{color:#009}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gu{color:#030}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .gt{color:#9c6}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kc{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kd{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kn{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kp{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kr{color:#069}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .kt{color:#078}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .m{color:#f60}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .s{color:#d44950}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nb{color:#366}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nc{color:#0a8}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .no{color:#360}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nd{color:#99f}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .ni{color:#999}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .ne{color:#c00}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nf{color:#c0f}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nl{color:#99f}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nn{color:#0cf}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .nv{color:#033}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .ow{color:#000}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .w{color:#bbb}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .mf{color:#f60}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .mh{color:#f60}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .mi{color:#f60}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .mo{color:#f60}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sb{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sc{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .s2{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .se{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sh{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .si{color:#a00}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sx{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .sr{color:#3aa}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .s1{color:#c30}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .ss{color:#fc3}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .bp{color:#366}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .vc{color:#033}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .vg{color:#033}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .vi{color:#033}#alexn_post__snippets_2020_03_18_send_mail_py .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_03_18_send_mail_py"><div class="language-python highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">import</span> <span class="nn">smtplib</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
<span class="kn">from</span> <span class="nn">email.message</span> <span class="kn">import</span> <span class="n">EmailMessage</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Send email'</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--smtp-host'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'smtp_host'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"SMTP host and port"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--smtp-user'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'smtp_user'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"SMTP user for login"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--smtp-pass'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'smtp_pass'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"SMTP password for login"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--to'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'to_address'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"TO address"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--from'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'from_address'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"FROM address"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--title'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'title'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"Mail title"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span>
  <span class="s">'--body'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'body'</span><span class="p">,</span>
  <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"Mail body"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span>

<span class="n">msg</span> <span class="o">=</span> <span class="n">EmailMessage</span><span class="p">()</span>
<span class="n">msg</span><span class="p">.</span><span class="n">set_content</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">body</span><span class="p">)</span>

<span class="n">msg</span><span class="p">[</span><span class="s">'Subject'</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">title</span>
<span class="n">msg</span><span class="p">[</span><span class="s">'From'</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">from_address</span>
<span class="n">msg</span><span class="p">[</span><span class="s">'To'</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">to_address</span>

<span class="n">service</span> <span class="o">=</span> <span class="n">smtplib</span><span class="p">.</span><span class="n">SMTP_SSL</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">smtp_host</span><span class="p">)</span>
<span class="c1"># service.starttls()
</span><span class="n">service</span><span class="p">.</span><span class="n">login</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">smtp_user</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">smtp_pass</span><span class="p">)</span>
<span class="n">service</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
<span class="n">service</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/03/18/send-mail.py.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/03/18/send-mail.py.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Encrypt.sh</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2020_02_18_encrypt_sh .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2020_02_18_encrypt_sh code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2020_02_18_encrypt_sh div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2020_02_18_encrypt_sh div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .hll{background-color:#ffc}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .c{color:#999}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .k{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .o{color:#555}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .cp{color:#099}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .c1{color:#999}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .cs{color:#999}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .ge{font-style:italic}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gr{color:#f00}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gh{color:#030}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .go{color:#aaa}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gp{color:#009}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gu{color:#030}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .gt{color:#9c6}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kc{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kd{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kn{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kp{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kr{color:#069}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .kt{color:#078}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .m{color:#f60}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .s{color:#d44950}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .na{color:#4f9fcf}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nb{color:#366}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nc{color:#0a8}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .no{color:#360}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nd{color:#99f}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .ni{color:#999}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .ne{color:#c00}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nf{color:#c0f}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nl{color:#99f}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nn{color:#0cf}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .nv{color:#033}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .ow{color:#000}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .w{color:#bbb}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .mf{color:#f60}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .mh{color:#f60}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .mi{color:#f60}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .mo{color:#f60}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sb{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sc{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .s2{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .se{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sh{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .si{color:#a00}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sx{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .sr{color:#3aa}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .s1{color:#c30}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .ss{color:#fc3}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .bp{color:#366}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .vc{color:#033}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .vg{color:#033}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .vi{color:#033}#alexn_post__snippets_2020_02_18_encrypt_sh .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2020_02_18_encrypt_sh"><div class="language-sh highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="c">#!/usr/bin/env bash</span>
<span class="c">#</span>
<span class="c"># Quickly encrypt a message or a file for sending to</span>
<span class="c"># your colleagues over unsecure messengers (Slack, etc)...</span>
<span class="c">#</span>
<span class="c">#     echo "secret message" | encrypt</span>
<span class="c">#</span>
<span class="c"># Or to encrypt a file:</span>
<span class="c">#</span>
<span class="c">#     encrypt ./path/to/file</span>
<span class="c">#</span>
<span class="c"># -----------------------------------------------------------------------------</span>

<span class="nv">FILEPATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$FILEPATH</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">BASE64</span><span class="o">=</span><span class="si">$(</span>openssl enc <span class="nt">-A</span> <span class="nt">-aes256</span> <span class="nt">-base64</span> <span class="nt">-md</span> md5<span class="si">)</span>

    <span class="nb">echo
    echo</span> <span class="se">\#</span> Decrypt this message by running:
    <span class="nb">echo</span> <span class="se">\#</span> <span class="o">================================</span>
    <span class="nb">echo 
    echo echo</span> <span class="se">\"</span><span class="s2">"</span><span class="nv">$BASE64</span><span class="s2">"</span><span class="se">\"</span> <span class="se">\|</span> openssl enc <span class="nt">-d</span> <span class="nt">-aes256</span> <span class="nt">-base64</span> <span class="nt">-md</span> md5 <span class="nt">-A</span>
    <span class="nb">echo 
    echo</span> <span class="se">\#</span> <span class="o">================================</span>    
    <span class="nb">echo
</span><span class="k">elif</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$FILEPATH</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nv">RPATH</span><span class="o">=</span><span class="si">$(</span><span class="nb">realpath</span> <span class="nt">--relative-base</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$FILEPATH</span><span class="s2">"</span><span class="si">)</span>
    <span class="nv">BASE64</span><span class="o">=</span><span class="si">$(</span>openssl enc <span class="nt">-A</span> <span class="nt">-aes256</span> <span class="nt">-base64</span> <span class="nt">-md</span> md5 &lt; <span class="s2">"</span><span class="nv">$FILEPATH</span><span class="s2">"</span><span class="si">)</span>

    <span class="nb">echo
    echo</span> <span class="se">\#</span> Decrypt this file by running:
    <span class="nb">echo</span> <span class="se">\#</span> <span class="o">================================</span>
    <span class="nb">echo 
    echo echo</span> <span class="se">\"</span><span class="s2">"</span><span class="nv">$BASE64</span><span class="s2">"</span><span class="se">\"</span> <span class="se">\|</span> openssl enc <span class="nt">-d</span> <span class="nt">-aes256</span> <span class="nt">-base64</span> <span class="nt">-md</span> md5 <span class="nt">-A</span> <span class="se">\&gt;</span> <span class="se">\"</span><span class="s2">"~/</span><span class="nv">$RPATH</span><span class="s2">"</span><span class="se">\"</span>
    <span class="nb">echo 
    echo</span> <span class="se">\#</span> <span class="o">================================</span>
    <span class="nb">echo
</span><span class="k">else
    </span><span class="nb">echo</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">echo</span> <span class="s2">"ERROR - file not found: </span><span class="nv">$FILEPATH</span><span class="s2">"</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">echo</span> <span class="o">&gt;</span>&amp;2
    <span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2020/02/18/encrypt.sh.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2020/02/18/encrypt.sh.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Sierpinski.hs</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2019_11_29_sierpinski_hs .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2019_11_29_sierpinski_hs code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2019_11_29_sierpinski_hs div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2019_11_29_sierpinski_hs div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .hll{background-color:#ffc}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .c{color:#999}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .k{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .o{color:#555}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .cp{color:#099}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .c1{color:#999}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .cs{color:#999}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .ge{font-style:italic}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gr{color:#f00}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gh{color:#030}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .go{color:#aaa}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gp{color:#009}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gu{color:#030}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .gt{color:#9c6}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kc{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kd{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kn{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kp{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kr{color:#069}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .kt{color:#078}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .m{color:#f60}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .s{color:#d44950}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .na{color:#4f9fcf}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nb{color:#366}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nc{color:#0a8}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .no{color:#360}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nd{color:#99f}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .ni{color:#999}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .ne{color:#c00}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nf{color:#c0f}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nl{color:#99f}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nn{color:#0cf}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .nv{color:#033}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .ow{color:#000}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .w{color:#bbb}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .mf{color:#f60}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .mh{color:#f60}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .mi{color:#f60}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .mo{color:#f60}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sb{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sc{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .s2{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .se{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sh{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .si{color:#a00}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sx{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .sr{color:#3aa}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .s1{color:#c30}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .ss{color:#fc3}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .bp{color:#366}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .vc{color:#033}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .vg{color:#033}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .vi{color:#033}#alexn_post__snippets_2019_11_29_sierpinski_hs .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2019_11_29_sierpinski_hs"><div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="o">#!/</span><span class="n">usr</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">stack</span>
<span class="c1">-- stack --resolver lts-14.14 script</span>
<span class="kr">import</span> <span class="nn">Data.Bits</span>

<span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">mapM_</span> <span class="n">putStrLn</span> <span class="n">lines</span>
  <span class="kr">where</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">32</span> <span class="o">::</span> <span class="kt">Int</span>
    <span class="n">line</span> <span class="n">i</span> <span class="o">=</span>
      <span class="p">[</span> <span class="kr">if</span> <span class="n">i</span> <span class="o">.&amp;.</span> <span class="n">j</span> <span class="o">/=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="sc">' '</span> <span class="kr">else</span> <span class="sc">'*'</span>
      <span class="o">|</span> <span class="n">j</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="p">]</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span> <span class="n">i</span> <span class="o">|</span> <span class="n">i</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2019/11/29/sierpinski.hs.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2019/11/29/sierpinski.hs.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Async Queue.ts</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2019_10_07_async_queue_ts .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2019_10_07_async_queue_ts code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2019_10_07_async_queue_ts div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2019_10_07_async_queue_ts div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .hll{background-color:#ffc}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .c{color:#999}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .k{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .o{color:#555}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .cp{color:#099}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .c1{color:#999}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .cs{color:#999}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .ge{font-style:italic}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gr{color:#f00}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gh{color:#030}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .go{color:#aaa}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gp{color:#009}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gu{color:#030}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .gt{color:#9c6}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kc{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kd{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kn{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kp{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kr{color:#069}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .kt{color:#078}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .m{color:#f60}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .s{color:#d44950}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .na{color:#4f9fcf}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nb{color:#366}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nc{color:#0a8}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .no{color:#360}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nd{color:#99f}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .ni{color:#999}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .ne{color:#c00}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nf{color:#c0f}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nl{color:#99f}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nn{color:#0cf}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .nv{color:#033}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .ow{color:#000}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .w{color:#bbb}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .mf{color:#f60}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .mh{color:#f60}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .mi{color:#f60}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .mo{color:#f60}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sb{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sc{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .s2{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .se{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sh{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .si{color:#a00}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sx{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .sr{color:#3aa}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .s1{color:#c30}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .ss{color:#fc3}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .bp{color:#366}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .vc{color:#033}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .vg{color:#033}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .vi{color:#033}#alexn_post__snippets_2019_10_07_async_queue_ts .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2019_10_07_async_queue_ts"><div class="language-ts highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="kd">type</span> <span class="nx">Callback</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">A</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>

<span class="cm">/**
 * Delays stuff for ensuring fairness.
 */</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">yieldRunLoop</span><span class="p">():</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="na">fn</span><span class="p">:</span> <span class="p">(</span><span class="na">cb</span><span class="p">:</span> <span class="p">(()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="k">void</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">setImmediate</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span>
    <span class="p">?</span> <span class="nx">setImmediate</span>
    <span class="p">:</span> <span class="nx">cb</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/**
 * Async queue implementation
 */</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Queue</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">private</span> <span class="k">readonly</span> <span class="na">elements</span><span class="p">:</span> <span class="nx">A</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">private</span> <span class="k">readonly</span> <span class="na">callbacks</span><span class="p">:</span> <span class="p">([</span><span class="nx">Callback</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">Callback</span><span class="o">&lt;</span><span class="nb">Error</span><span class="o">&gt;</span><span class="p">])[]</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="nx">enqueue</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="na">a</span><span class="p">:</span> <span class="nx">A</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">cbs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">cbs</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// fairness + guards against stack overflows</span>
      <span class="k">await</span> <span class="nx">yieldRunLoop</span><span class="p">()</span>
      <span class="kd">const</span> <span class="p">[</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">_</span><span class="p">]</span> <span class="o">=</span> <span class="nx">cbs</span>
      <span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">dequeue</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="k">as</span> <span class="nx">A</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="na">cb</span><span class="p">:</span> <span class="p">[</span><span class="nx">Callback</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">Callback</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">]</span> <span class="o">|</span> <span class="kc">undefined</span>
      <span class="kd">const</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">cb</span> <span class="o">=</span> <span class="p">[</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">]</span> <span class="p">})</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cb</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Promise constructor</span><span class="dl">"</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span>
      <span class="k">return</span> <span class="k">await</span> <span class="nx">p</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nx">rejectAllActive</span> <span class="o">=</span> <span class="p">(</span><span class="na">e</span><span class="p">:</span> <span class="nb">Error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">cbs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cbs</span><span class="p">)</span> <span class="k">continue</span>
      <span class="kd">const</span> <span class="p">[</span><span class="nx">_</span><span class="p">,</span> <span class="nx">reject</span><span class="p">]</span> <span class="o">=</span> <span class="nx">cbs</span>
      <span class="nx">reject</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 * Consumer implementation.
 *
 * @param workers specifies the number of workers to start in parallel
 * @param blockProcessFromExiting if `true` then blocks the Nodejs process from exiting
 *
 * @returns a `[promise, cancel]` tuple, where `cancel` is a function that can be used
 *          to stop all processing and `promise` can be awaited for the completion of
 *          all workers, workers that complete on cancellation
 */</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">consumeQueue</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">queue</span><span class="p">:</span> <span class="nx">Queue</span><span class="o">&lt;</span><span class="nx">A</span><span class="o">&gt;</span><span class="p">,</span> <span class="nx">workers</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">blockProcessFromExiting</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">Cancel</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">queue-cancel-all</span><span class="dl">"</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">startWorker</span> <span class="o">=</span>
    <span class="k">async</span> <span class="p">(</span><span class="nx">isActive</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">[],</span> <span class="nx">process</span><span class="p">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">A</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nx">yieldRunLoop</span><span class="p">()</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">isActive</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">isActive</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">dequeue</span><span class="p">()</span>
          <span class="k">try</span> <span class="p">{</span>
            <span class="k">await</span> <span class="nx">process</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
          <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error while processing queue message:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
          <span class="p">}</span>
          <span class="c1">// Fairness + protection against stack-overflow</span>
          <span class="k">await</span> <span class="nx">yieldRunLoop</span><span class="p">()</span>
        <span class="p">}</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span> <span class="o">!=</span> <span class="nx">Cancel</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">e</span>
      <span class="p">}</span>
    <span class="p">}</span>

  <span class="c1">// For keeping the process alive, for as long as there is a run-loop active</span>
  <span class="kd">function</span> <span class="nx">startTick</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">tickID</span><span class="p">:</span> <span class="nb">Object</span>
    <span class="kd">function</span> <span class="nx">tick</span><span class="p">()</span> <span class="p">{</span> <span class="nx">tickID</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">tick</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">}</span>
    <span class="nx">tick</span><span class="p">()</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">tickID</span> <span class="k">as</span> <span class="kr">any</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span><span class="nx">process</span><span class="p">:</span> <span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="nx">A</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">isActive</span> <span class="o">=</span> <span class="p">[</span><span class="kc">true</span><span class="p">]</span>
    <span class="kd">const</span> <span class="nx">cancelTick</span> <span class="o">=</span> <span class="nx">blockProcessFromExiting</span> <span class="p">?</span> <span class="nx">startTick</span><span class="p">()</span> <span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{}</span>
    <span class="kd">const</span> <span class="nx">cancel</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">isActive</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span>
      <span class="nx">queue</span><span class="p">.</span><span class="nx">rejectAllActive</span><span class="p">(</span><span class="nx">Cancel</span><span class="p">)</span>
      <span class="nx">cancelTick</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="na">tasks</span><span class="p">:</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">workers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">tasks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">startWorker</span><span class="p">(</span><span class="nx">isActive</span><span class="p">,</span> <span class="nx">process</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">all</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">tasks</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">_</span> <span class="o">=&gt;</span> <span class="kc">undefined</span> <span class="k">as</span> <span class="k">void</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="nx">all</span><span class="p">,</span> <span class="nx">cancel</span><span class="p">]</span> <span class="k">as</span> <span class="p">[</span><span class="nb">Promise</span><span class="o">&lt;</span><span class="k">void</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And usage:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">async</span> <span class="kd">function</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Starting...</span><span class="dl">"</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Queue</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">()</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">promise</span><span class="p">,</span> <span class="nx">cancel</span><span class="p">]</span> <span class="o">=</span> <span class="nx">consumeQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="kc">true</span><span class="p">)(</span>
    <span class="k">async</span> <span class="nx">msg</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">r</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="mi">1000</span><span class="p">))</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
    <span class="p">})</span>

  <span class="nx">process</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">SIGINT</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="s2">Cancelling...</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">cancel</span><span class="p">()</span>
  <span class="p">})</span>

  <span class="k">await</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span><span class="p">)</span>
  <span class="k">await</span> <span class="nx">queue</span><span class="p">.</span><span class="nx">enqueue</span><span class="p">(</span><span class="dl">"</span><span class="s2">World!</span><span class="dl">"</span><span class="p">)</span>

  <span class="c1">// Requires `blockProcessFromExiting` to be `true`</span>
  <span class="k">await</span> <span class="nx">promise</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Done!</span><span class="dl">"</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">main</span><span class="p">().</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2019/10/07/async-queue.ts.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2019/10/07/async-queue.ts.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
      
      <item>
        <title>Blocking Task.scala</title>
        <description><![CDATA[          
          <style type="text/css">
            #alexn_post__snippets_2019_09_02_blocking_task_scala .highlighter-rouge .highlight{background-color:#f0f0f0;color:#333;padding:10px}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;line-height:1.3;font-size:.9em}#alexn_post__snippets_2019_09_02_blocking_task_scala code.highlighter-rouge{background-color:rgba(27,31,35,0.05);padding:.2em .4em;margin:0;font-size:85%;border-radius:3px}#alexn_post__snippets_2019_09_02_blocking_task_scala div.formula-code{white-space:pre;overflow:auto;word-wrap:normal;background:#f0f0f0;color:#333;border-radius:4px;border:1px solid #bbb;padding:20px 0;margin:0 0 20px 0}#alexn_post__snippets_2019_09_02_blocking_task_scala div.formula-code .MathJax_Display{margin:0 !important}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .hll{background-color:#ffc}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .c{color:#999}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .err{color:#a00;background-color:#faa}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .k{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .o{color:#555}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .cm{color:#09f;font-style:italic}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .cp{color:#099}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .c1{color:#999}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .cs{color:#999}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gd{background-color:#fcc;border:1px solid #c00}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .ge{font-style:italic}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gr{color:#f00}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gh{color:#030}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gi{background-color:#cfc;border:1px solid #0c0}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .go{color:#aaa}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gp{color:#009}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gu{color:#030}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .gt{color:#9c6}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kc{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kd{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kn{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kp{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kr{color:#069}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .kt{color:#078}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .m{color:#f60}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .s{color:#d44950}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .na{color:#4f9fcf}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nb{color:#366}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nc{color:#0a8}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .no{color:#360}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nd{color:#99f}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .ni{color:#999}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .ne{color:#c00}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nf{color:#c0f}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nl{color:#99f}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nn{color:#0cf}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nt{color:#2f6f9f}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .nv{color:#033}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .ow{color:#000}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .w{color:#bbb}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .mf{color:#f60}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .mh{color:#f60}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .mi{color:#f60}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .mo{color:#f60}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sb{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sc{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sd{color:#c30;font-style:italic}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .s2{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .se{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sh{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .si{color:#a00}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sx{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .sr{color:#3aa}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .s1{color:#c30}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .ss{color:#fc3}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .bp{color:#366}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .vc{color:#033}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .vg{color:#033}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .vi{color:#033}#alexn_post__snippets_2019_09_02_blocking_task_scala .highlight .il{color:#f60}

          </style>
          <article id="alexn_post__snippets_2019_09_02_blocking_task_scala"><p>Imported from <a href="https://gist.github.com/alexandru/d04c23e3ebd918c6144b5ad33c69f48f">gist.github.com</a>.</p>

<p>WARN: not sure if this code is correct.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="code"><code><span class="k">import</span> <span class="nn">monix.eval._</span>
<span class="k">import</span> <span class="nn">monix.execution.atomic.Atomic</span>
<span class="k">import</span> <span class="nn">scala.util.control.NonFatal</span>

<span class="k">def</span> <span class="nf">blocking</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">f</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Task</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span>
  <span class="nv">Task</span><span class="o">.</span><span class="py">cancelable0</span> <span class="o">{</span> <span class="o">(</span><span class="n">scheduler</span><span class="o">,</span> <span class="n">cb</span><span class="o">)</span> <span class="k">=&gt;</span>
    <span class="c1">// For capturing the executing thread</span>
    <span class="k">val</span> <span class="nv">thread</span> <span class="k">=</span> <span class="nc">Atomic</span><span class="o">(</span><span class="nc">None</span> <span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Thread</span><span class="o">])</span>
    <span class="c1">// For synchronizing cancellation, ensuring the</span>
    <span class="c1">// interrupted flag is reset, in case it is our fault</span>
    <span class="k">val</span> <span class="nv">wasInterrupted</span> <span class="k">=</span> <span class="nc">Atomic</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>

    <span class="c1">// Executing on top of thread-pool</span>
    <span class="nv">scheduler</span><span class="o">.</span><span class="py">execute</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span> <span class="o">{</span>
      <span class="k">def</span> <span class="nf">run</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
        <span class="k">val</span> <span class="nv">th</span> <span class="k">=</span> <span class="nv">Thread</span><span class="o">.</span><span class="py">currentThread</span><span class="o">()</span>
        <span class="k">val</span> <span class="nv">update</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="n">th</span><span class="o">)</span>
        <span class="k">var</span> <span class="n">started</span> <span class="k">=</span> <span class="kc">false</span>

        <span class="k">try</span> <span class="o">{</span>
          <span class="nf">if</span> <span class="o">(</span><span class="nv">thread</span><span class="o">.</span><span class="py">compareAndSet</span><span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="n">update</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">started</span> <span class="k">=</span> <span class="kc">true</span>
            <span class="nv">scala</span><span class="o">.</span><span class="py">concurrent</span><span class="o">.</span><span class="py">blocking</span> <span class="o">{</span>
              <span class="nv">cb</span><span class="o">.</span><span class="py">onSuccess</span><span class="o">(</span><span class="n">f</span><span class="o">)</span>
            <span class="o">}</span>
          <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">{</span>
          <span class="k">case</span> <span class="n">e</span><span class="k">:</span> <span class="kt">InterruptedException</span> <span class="o">=&gt;</span>
            <span class="o">()</span>
          <span class="k">case</span> <span class="nc">NonFatal</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="k">=&gt;</span>
            <span class="nv">cb</span><span class="o">.</span><span class="py">onError</span><span class="o">(</span><span class="n">e</span><span class="o">)</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
          <span class="c1">// If true, then cancellation logic is guaranteed to</span>
          <span class="c1">// interrupt or to have interrupted current thread</span>
          <span class="nf">if</span> <span class="o">(</span><span class="n">started</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">thread</span><span class="o">.</span><span class="py">compareAndSet</span><span class="o">(</span><span class="n">update</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
            <span class="c1">// Waits for cancellation logic to finish</span>
            <span class="nf">while</span> <span class="o">(!</span><span class="nv">wasInterrupted</span><span class="o">.</span><span class="py">get</span><span class="o">)</span> <span class="o">{</span>
              <span class="c1">// Thread.onSpinWait() on Java 9</span>
              <span class="nc">Thread</span><span class="o">.</span><span class="n">`yield`</span><span class="o">()</span>
            <span class="o">}</span>
            <span class="c1">// Clear interruption flag</span>
            <span class="nv">Thread</span><span class="o">.</span><span class="py">interrupted</span><span class="o">()</span>
          <span class="o">}</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">})</span>

    <span class="c1">// Cancellation logic</span>
    <span class="nc">Task</span> <span class="o">{</span>
      <span class="nv">thread</span><span class="o">.</span><span class="py">getAndSet</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">None</span> <span class="o">|</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="o">()</span>
        <span class="k">case</span> <span class="nc">Some</span><span class="o">(</span><span class="n">th</span><span class="o">)</span> <span class="k">=&gt;</span>
          <span class="nv">th</span><span class="o">.</span><span class="py">interrupt</span><span class="o">()</span>
          <span class="nv">wasInterrupted</span><span class="o">.</span><span class="py">set</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
</article>
        ]]></description>
        <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
        <link>https://alexn.org/snippets/2019/09/02/blocking-task.scala.html?pk_campaign=rss&amp;pk_kwd=rss-link</link>
        <guid isPermaLink="true">https://alexn.org/snippets/2019/09/02/blocking-task.scala.html</guid>
        
        
        <dc:creator>Alexandru Nedelcu</dc:creator>
        
        
      </item>
      
    
  </channel>
</rss>
